
EXTI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b7e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000bf2  2**0
                  ALLOC
  2 .stab         00000de0  00000000  00000000  00000bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000608  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__vector_1>
   8:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_2>
   c:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 80 05 	call	0xb00	; 0xb00 <main>
  74:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GIE_voidEnable>:
//Global Pointers to hold address of ISR of INT0
void (*EXTI_pvInt0) (void)=NULL;
void (*EXTI_pvInt1) (void)=NULL;
void (*EXTI_pvInt2) (void)=NULL;

void GIE_voidEnable(void){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,SREG_I);
  84:	af e5       	ldi	r26, 0x5F	; 95
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	ef e5       	ldi	r30, 0x5F	; 95
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	8c 93       	st	X, r24
}
  92:	cf 91       	pop	r28
  94:	df 91       	pop	r29
  96:	08 95       	ret

00000098 <GIE_voidDisable>:
void GIE_voidDisable(void){
  98:	df 93       	push	r29
  9a:	cf 93       	push	r28
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(SREG,SREG_I);
  a0:	af e5       	ldi	r26, 0x5F	; 95
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	ef e5       	ldi	r30, 0x5F	; 95
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8f 77       	andi	r24, 0x7F	; 127
  ac:	8c 93       	st	X, r24
}
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <EXTI_voidInt0init>:

void EXTI_voidInt0init(u8 Copy_u8InterruptMode) {
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	00 d0       	rcall	.+0      	; 0xba <EXTI_voidInt0init+0x6>
  ba:	0f 92       	push	r0
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8InterruptMode) {
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	28 2f       	mov	r18, r24
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	3b 83       	std	Y+3, r19	; 0x03
  ca:	2a 83       	std	Y+2, r18	; 0x02
  cc:	8a 81       	ldd	r24, Y+2	; 0x02
  ce:	9b 81       	ldd	r25, Y+3	; 0x03
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	91 05       	cpc	r25, r1
  d4:	61 f1       	breq	.+88     	; 0x12e <EXTI_voidInt0init+0x7a>
  d6:	2a 81       	ldd	r18, Y+2	; 0x02
  d8:	3b 81       	ldd	r19, Y+3	; 0x03
  da:	22 30       	cpi	r18, 0x02	; 2
  dc:	31 05       	cpc	r19, r1
  de:	2c f4       	brge	.+10     	; 0xea <EXTI_voidInt0init+0x36>
  e0:	8a 81       	ldd	r24, Y+2	; 0x02
  e2:	9b 81       	ldd	r25, Y+3	; 0x03
  e4:	00 97       	sbiw	r24, 0x00	; 0
  e6:	69 f0       	breq	.+26     	; 0x102 <EXTI_voidInt0init+0x4e>
  e8:	63 c0       	rjmp	.+198    	; 0x1b0 <EXTI_voidInt0init+0xfc>
  ea:	2a 81       	ldd	r18, Y+2	; 0x02
  ec:	3b 81       	ldd	r19, Y+3	; 0x03
  ee:	22 30       	cpi	r18, 0x02	; 2
  f0:	31 05       	cpc	r19, r1
  f2:	99 f1       	breq	.+102    	; 0x15a <EXTI_voidInt0init+0xa6>
  f4:	8a 81       	ldd	r24, Y+2	; 0x02
  f6:	9b 81       	ldd	r25, Y+3	; 0x03
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	91 05       	cpc	r25, r1
  fc:	09 f4       	brne	.+2      	; 0x100 <EXTI_voidInt0init+0x4c>
  fe:	43 c0       	rjmp	.+134    	; 0x186 <EXTI_voidInt0init+0xd2>
 100:	57 c0       	rjmp	.+174    	; 0x1b0 <EXTI_voidInt0init+0xfc>
	case low_level : {
		// Set sense control to low level
		Clr_Bit(MCUCR, MCUCR_ISC01);
 102:	a5 e5       	ldi	r26, 0x55	; 85
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e5 e5       	ldi	r30, 0x55	; 85
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	8c 93       	st	X, r24
		Clr_Bit(MCUCR, MCUCR_ISC00);
 110:	a5 e5       	ldi	r26, 0x55	; 85
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e5 e5       	ldi	r30, 0x55	; 85
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8e 7f       	andi	r24, 0xFE	; 254
 11c:	8c 93       	st	X, r24

		// Set PIE for INT0
		Set_Bit(GICR, GICR_INT0);
 11e:	ab e5       	ldi	r26, 0x5B	; 91
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	eb e5       	ldi	r30, 0x5B	; 91
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	8c 93       	st	X, r24
 12c:	41 c0       	rjmp	.+130    	; 0x1b0 <EXTI_voidInt0init+0xfc>
		break;
	}

	case on_change: {
		// Set sense control to any logical change
		Clr_Bit(MCUCR, MCUCR_ISC01);
 12e:	a5 e5       	ldi	r26, 0x55	; 85
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e5 e5       	ldi	r30, 0x55	; 85
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	8d 7f       	andi	r24, 0xFD	; 253
 13a:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC00);
 13c:	a5 e5       	ldi	r26, 0x55	; 85
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e5 e5       	ldi	r30, 0x55	; 85
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	81 60       	ori	r24, 0x01	; 1
 148:	8c 93       	st	X, r24

		// Set PIE for INT0
		Set_Bit(GICR, GICR_INT0);
 14a:	ab e5       	ldi	r26, 0x5B	; 91
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	eb e5       	ldi	r30, 0x5B	; 91
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	80 64       	ori	r24, 0x40	; 64
 156:	8c 93       	st	X, r24
 158:	2b c0       	rjmp	.+86     	; 0x1b0 <EXTI_voidInt0init+0xfc>
		break;
	}

	case falling_edge: {
		// Set sense control to falling edge
		Set_Bit(MCUCR, MCUCR_ISC01);
 15a:	a5 e5       	ldi	r26, 0x55	; 85
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	e5 e5       	ldi	r30, 0x55	; 85
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	82 60       	ori	r24, 0x02	; 2
 166:	8c 93       	st	X, r24
		Clr_Bit(MCUCR, MCUCR_ISC00);
 168:	a5 e5       	ldi	r26, 0x55	; 85
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	e5 e5       	ldi	r30, 0x55	; 85
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	8e 7f       	andi	r24, 0xFE	; 254
 174:	8c 93       	st	X, r24

		// Set PIE for INT0
		Set_Bit(GICR, GICR_INT0);
 176:	ab e5       	ldi	r26, 0x5B	; 91
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	eb e5       	ldi	r30, 0x5B	; 91
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8c 93       	st	X, r24
 184:	15 c0       	rjmp	.+42     	; 0x1b0 <EXTI_voidInt0init+0xfc>
		break;
	}

	case rising_edge: {
		// Set sense control to rising edge
		Set_Bit(MCUCR, MCUCR_ISC01);
 186:	a5 e5       	ldi	r26, 0x55	; 85
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	e5 e5       	ldi	r30, 0x55	; 85
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	82 60       	ori	r24, 0x02	; 2
 192:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC00);
 194:	a5 e5       	ldi	r26, 0x55	; 85
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	e5 e5       	ldi	r30, 0x55	; 85
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	81 60       	ori	r24, 0x01	; 1
 1a0:	8c 93       	st	X, r24

		// Set PIE for INT0
		Set_Bit(GICR, GICR_INT0);
 1a2:	ab e5       	ldi	r26, 0x5B	; 91
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	eb e5       	ldi	r30, 0x5B	; 91
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	80 64       	ori	r24, 0x40	; 64
 1ae:	8c 93       	st	X, r24
	default: {
		// Handle invalid interrupt mode if necessary
		break;
	}
	}
}
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	cf 91       	pop	r28
 1b8:	df 91       	pop	r29
 1ba:	08 95       	ret

000001bc <EXTI_voidInt1init>:


void EXTI_voidInt1init(u8 Copy_u8InterruptMode){
 1bc:	df 93       	push	r29
 1be:	cf 93       	push	r28
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <EXTI_voidInt1init+0x6>
 1c2:	0f 92       	push	r0
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8InterruptMode) {
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	3b 83       	std	Y+3, r19	; 0x03
 1d2:	2a 83       	std	Y+2, r18	; 0x02
 1d4:	8a 81       	ldd	r24, Y+2	; 0x02
 1d6:	9b 81       	ldd	r25, Y+3	; 0x03
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	91 05       	cpc	r25, r1
 1dc:	61 f1       	breq	.+88     	; 0x236 <EXTI_voidInt1init+0x7a>
 1de:	2a 81       	ldd	r18, Y+2	; 0x02
 1e0:	3b 81       	ldd	r19, Y+3	; 0x03
 1e2:	22 30       	cpi	r18, 0x02	; 2
 1e4:	31 05       	cpc	r19, r1
 1e6:	2c f4       	brge	.+10     	; 0x1f2 <EXTI_voidInt1init+0x36>
 1e8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ea:	9b 81       	ldd	r25, Y+3	; 0x03
 1ec:	00 97       	sbiw	r24, 0x00	; 0
 1ee:	69 f0       	breq	.+26     	; 0x20a <EXTI_voidInt1init+0x4e>
 1f0:	63 c0       	rjmp	.+198    	; 0x2b8 <EXTI_voidInt1init+0xfc>
 1f2:	2a 81       	ldd	r18, Y+2	; 0x02
 1f4:	3b 81       	ldd	r19, Y+3	; 0x03
 1f6:	22 30       	cpi	r18, 0x02	; 2
 1f8:	31 05       	cpc	r19, r1
 1fa:	99 f1       	breq	.+102    	; 0x262 <EXTI_voidInt1init+0xa6>
 1fc:	8a 81       	ldd	r24, Y+2	; 0x02
 1fe:	9b 81       	ldd	r25, Y+3	; 0x03
 200:	83 30       	cpi	r24, 0x03	; 3
 202:	91 05       	cpc	r25, r1
 204:	09 f4       	brne	.+2      	; 0x208 <EXTI_voidInt1init+0x4c>
 206:	43 c0       	rjmp	.+134    	; 0x28e <EXTI_voidInt1init+0xd2>
 208:	57 c0       	rjmp	.+174    	; 0x2b8 <EXTI_voidInt1init+0xfc>
		case low_level : {
			// Set sense control to low level
			Clr_Bit(MCUCR, MCUCR_ISC10);
 20a:	a5 e5       	ldi	r26, 0x55	; 85
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	e5 e5       	ldi	r30, 0x55	; 85
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	8b 7f       	andi	r24, 0xFB	; 251
 216:	8c 93       	st	X, r24
			Clr_Bit(MCUCR, MCUCR_ISC11);
 218:	a5 e5       	ldi	r26, 0x55	; 85
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	e5 e5       	ldi	r30, 0x55	; 85
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	87 7f       	andi	r24, 0xF7	; 247
 224:	8c 93       	st	X, r24

			// Set PIE for INT1
			Set_Bit(GICR, GICR_INT1);
 226:	ab e5       	ldi	r26, 0x5B	; 91
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	eb e5       	ldi	r30, 0x5B	; 91
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 68       	ori	r24, 0x80	; 128
 232:	8c 93       	st	X, r24
 234:	41 c0       	rjmp	.+130    	; 0x2b8 <EXTI_voidInt1init+0xfc>
			break;
		}

		case on_change: {
			// Set sense control to any logical change
			Clr_Bit(MCUCR, MCUCR_ISC11);
 236:	a5 e5       	ldi	r26, 0x55	; 85
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	e5 e5       	ldi	r30, 0x55	; 85
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	87 7f       	andi	r24, 0xF7	; 247
 242:	8c 93       	st	X, r24
			Set_Bit(MCUCR, MCUCR_ISC10);
 244:	a5 e5       	ldi	r26, 0x55	; 85
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e5 e5       	ldi	r30, 0x55	; 85
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	84 60       	ori	r24, 0x04	; 4
 250:	8c 93       	st	X, r24

			// Set PIE for INT1
			Set_Bit(GICR, GICR_INT1);
 252:	ab e5       	ldi	r26, 0x5B	; 91
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	eb e5       	ldi	r30, 0x5B	; 91
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	80 68       	ori	r24, 0x80	; 128
 25e:	8c 93       	st	X, r24
 260:	2b c0       	rjmp	.+86     	; 0x2b8 <EXTI_voidInt1init+0xfc>
			break;
		}

		case falling_edge: {
			// Set sense control to falling edge
			Set_Bit(MCUCR, MCUCR_ISC11);
 262:	a5 e5       	ldi	r26, 0x55	; 85
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	e5 e5       	ldi	r30, 0x55	; 85
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	88 60       	ori	r24, 0x08	; 8
 26e:	8c 93       	st	X, r24
			Clr_Bit(MCUCR, MCUCR_ISC10);
 270:	a5 e5       	ldi	r26, 0x55	; 85
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	e5 e5       	ldi	r30, 0x55	; 85
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	8b 7f       	andi	r24, 0xFB	; 251
 27c:	8c 93       	st	X, r24

			// Set PIE for INT1
			Set_Bit(GICR, GICR_INT1);
 27e:	ab e5       	ldi	r26, 0x5B	; 91
 280:	b0 e0       	ldi	r27, 0x00	; 0
 282:	eb e5       	ldi	r30, 0x5B	; 91
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	80 68       	ori	r24, 0x80	; 128
 28a:	8c 93       	st	X, r24
 28c:	15 c0       	rjmp	.+42     	; 0x2b8 <EXTI_voidInt1init+0xfc>
			break;
		}

		case rising_edge: {
			// Set sense control to rising edge
			Set_Bit(MCUCR, MCUCR_ISC11);
 28e:	a5 e5       	ldi	r26, 0x55	; 85
 290:	b0 e0       	ldi	r27, 0x00	; 0
 292:	e5 e5       	ldi	r30, 0x55	; 85
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	88 60       	ori	r24, 0x08	; 8
 29a:	8c 93       	st	X, r24
			Set_Bit(MCUCR, MCUCR_ISC10);
 29c:	a5 e5       	ldi	r26, 0x55	; 85
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	e5 e5       	ldi	r30, 0x55	; 85
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	84 60       	ori	r24, 0x04	; 4
 2a8:	8c 93       	st	X, r24

			// Set PIE for INT1
			Set_Bit(GICR, GICR_INT1);
 2aa:	ab e5       	ldi	r26, 0x5B	; 91
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	eb e5       	ldi	r30, 0x5B	; 91
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	80 68       	ori	r24, 0x80	; 128
 2b6:	8c 93       	st	X, r24
			// Handle invalid interrupt mode if necessary
			break;
		}
		}

}
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	cf 91       	pop	r28
 2c0:	df 91       	pop	r29
 2c2:	08 95       	ret

000002c4 <EXTI_voidInt2init>:




//INT2 has falling edge and rising edge  modes only
void EXTI_voidInt2init(u8 Copy_u8InterruptMode){
 2c4:	df 93       	push	r29
 2c6:	cf 93       	push	r28
 2c8:	00 d0       	rcall	.+0      	; 0x2ca <EXTI_voidInt2init+0x6>
 2ca:	0f 92       	push	r0
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8InterruptMode) {
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	28 2f       	mov	r18, r24
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	3b 83       	std	Y+3, r19	; 0x03
 2da:	2a 83       	std	Y+2, r18	; 0x02
 2dc:	8a 81       	ldd	r24, Y+2	; 0x02
 2de:	9b 81       	ldd	r25, Y+3	; 0x03
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	91 05       	cpc	r25, r1
 2e4:	31 f0       	breq	.+12     	; 0x2f2 <EXTI_voidInt2init+0x2e>
 2e6:	2a 81       	ldd	r18, Y+2	; 0x02
 2e8:	3b 81       	ldd	r19, Y+3	; 0x03
 2ea:	23 30       	cpi	r18, 0x03	; 3
 2ec:	31 05       	cpc	r19, r1
 2ee:	81 f0       	breq	.+32     	; 0x310 <EXTI_voidInt2init+0x4c>
 2f0:	1d c0       	rjmp	.+58     	; 0x32c <EXTI_voidInt2init+0x68>

		case falling_edge: {
			// Set sense control to falling edge
			Clr_Bit(MCUCSR, MCUCSR_ISC2);
 2f2:	a4 e5       	ldi	r26, 0x54	; 84
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	e4 e5       	ldi	r30, 0x54	; 84
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	8f 7b       	andi	r24, 0xBF	; 191
 2fe:	8c 93       	st	X, r24


			// Set PIE for INT2
			Set_Bit(GICR,  GICR_INT2);
 300:	ab e5       	ldi	r26, 0x5B	; 91
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	eb e5       	ldi	r30, 0x5B	; 91
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	80 62       	ori	r24, 0x20	; 32
 30c:	8c 93       	st	X, r24
 30e:	0e c0       	rjmp	.+28     	; 0x32c <EXTI_voidInt2init+0x68>
			break;
		}

		case rising_edge: {
			// Set sense control to rising edge
			Set_Bit(MCUCSR, MCUCSR_ISC2);
 310:	a4 e5       	ldi	r26, 0x54	; 84
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	e4 e5       	ldi	r30, 0x54	; 84
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	80 64       	ori	r24, 0x40	; 64
 31c:	8c 93       	st	X, r24


			// Set PIE for INT2
			Set_Bit(GICR,  GICR_INT2);
 31e:	ab e5       	ldi	r26, 0x5B	; 91
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	eb e5       	ldi	r30, 0x5B	; 91
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	80 62       	ori	r24, 0x20	; 32
 32a:	8c 93       	st	X, r24
			// Handle invalid interrupt mode if necessary
			break;
		}
		}

}
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	cf 91       	pop	r28
 334:	df 91       	pop	r29
 336:	08 95       	ret

00000338 <EXTI_u8INT0SetCallBack>:


u8 EXTI_u8INT0SetCallBack(void (*Copy_pvINT0Func)(void)){
 338:	df 93       	push	r29
 33a:	cf 93       	push	r28
 33c:	00 d0       	rcall	.+0      	; 0x33e <EXTI_u8INT0SetCallBack+0x6>
 33e:	0f 92       	push	r0
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	9b 83       	std	Y+3, r25	; 0x03
 346:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
 348:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvINT0Func!=NULL){
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	9b 81       	ldd	r25, Y+3	; 0x03
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	39 f0       	breq	.+14     	; 0x360 <EXTI_u8INT0SetCallBack+0x28>
		EXTI_pvInt0=Copy_pvINT0Func;
 352:	8a 81       	ldd	r24, Y+2	; 0x02
 354:	9b 81       	ldd	r25, Y+3	; 0x03
 356:	90 93 61 00 	sts	0x0061, r25
 35a:	80 93 60 00 	sts	0x0060, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <EXTI_u8INT0SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 364:	89 81       	ldd	r24, Y+1	; 0x01
}
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	cf 91       	pop	r28
 36e:	df 91       	pop	r29
 370:	08 95       	ret

00000372 <EXTI_u8INT1SetCallBack>:

u8 EXTI_u8INT1SetCallBack(void (*Copy_pvINT1Func)(void)){
 372:	df 93       	push	r29
 374:	cf 93       	push	r28
 376:	00 d0       	rcall	.+0      	; 0x378 <EXTI_u8INT1SetCallBack+0x6>
 378:	0f 92       	push	r0
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	9b 83       	std	Y+3, r25	; 0x03
 380:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
 382:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvINT1Func!=NULL){
 384:	8a 81       	ldd	r24, Y+2	; 0x02
 386:	9b 81       	ldd	r25, Y+3	; 0x03
 388:	00 97       	sbiw	r24, 0x00	; 0
 38a:	39 f0       	breq	.+14     	; 0x39a <EXTI_u8INT1SetCallBack+0x28>
		EXTI_pvInt1=Copy_pvINT1Func;
 38c:	8a 81       	ldd	r24, Y+2	; 0x02
 38e:	9b 81       	ldd	r25, Y+3	; 0x03
 390:	90 93 63 00 	sts	0x0063, r25
 394:	80 93 62 00 	sts	0x0062, r24
 398:	02 c0       	rjmp	.+4      	; 0x39e <EXTI_u8INT1SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=1;
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 39e:	89 81       	ldd	r24, Y+1	; 0x01
}
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	0f 90       	pop	r0
 3a6:	cf 91       	pop	r28
 3a8:	df 91       	pop	r29
 3aa:	08 95       	ret

000003ac <EXTI_u8INT2SetCallBack>:
u8 EXTI_u8INT2SetCallBack(void (*Copy_pvINT2Func)(void)){
 3ac:	df 93       	push	r29
 3ae:	cf 93       	push	r28
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <EXTI_u8INT2SetCallBack+0x6>
 3b2:	0f 92       	push	r0
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	9b 83       	std	Y+3, r25	; 0x03
 3ba:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
 3bc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvINT2Func!=NULL){
 3be:	8a 81       	ldd	r24, Y+2	; 0x02
 3c0:	9b 81       	ldd	r25, Y+3	; 0x03
 3c2:	00 97       	sbiw	r24, 0x00	; 0
 3c4:	39 f0       	breq	.+14     	; 0x3d4 <EXTI_u8INT2SetCallBack+0x28>
		EXTI_pvInt2=Copy_pvINT2Func;
 3c6:	8a 81       	ldd	r24, Y+2	; 0x02
 3c8:	9b 81       	ldd	r25, Y+3	; 0x03
 3ca:	90 93 65 00 	sts	0x0065, r25
 3ce:	80 93 64 00 	sts	0x0064, r24
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <EXTI_u8INT2SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=1;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 3d8:	89 81       	ldd	r24, Y+1	; 0x01
}
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	cf 91       	pop	r28
 3e2:	df 91       	pop	r29
 3e4:	08 95       	ret

000003e6 <__vector_1>:




void __vector_1 (void) __attribute__((signal));
void __vector_1 (void){
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	2f 93       	push	r18
 3f2:	3f 93       	push	r19
 3f4:	4f 93       	push	r20
 3f6:	5f 93       	push	r21
 3f8:	6f 93       	push	r22
 3fa:	7f 93       	push	r23
 3fc:	8f 93       	push	r24
 3fe:	9f 93       	push	r25
 400:	af 93       	push	r26
 402:	bf 93       	push	r27
 404:	ef 93       	push	r30
 406:	ff 93       	push	r31
 408:	df 93       	push	r29
 40a:	cf 93       	push	r28
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvInt0(); //name of function is already pointer to function
 410:	e0 91 60 00 	lds	r30, 0x0060
 414:	f0 91 61 00 	lds	r31, 0x0061
 418:	09 95       	icall
}
 41a:	cf 91       	pop	r28
 41c:	df 91       	pop	r29
 41e:	ff 91       	pop	r31
 420:	ef 91       	pop	r30
 422:	bf 91       	pop	r27
 424:	af 91       	pop	r26
 426:	9f 91       	pop	r25
 428:	8f 91       	pop	r24
 42a:	7f 91       	pop	r23
 42c:	6f 91       	pop	r22
 42e:	5f 91       	pop	r21
 430:	4f 91       	pop	r20
 432:	3f 91       	pop	r19
 434:	2f 91       	pop	r18
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2 (void){
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	2f 93       	push	r18
 44c:	3f 93       	push	r19
 44e:	4f 93       	push	r20
 450:	5f 93       	push	r21
 452:	6f 93       	push	r22
 454:	7f 93       	push	r23
 456:	8f 93       	push	r24
 458:	9f 93       	push	r25
 45a:	af 93       	push	r26
 45c:	bf 93       	push	r27
 45e:	ef 93       	push	r30
 460:	ff 93       	push	r31
 462:	df 93       	push	r29
 464:	cf 93       	push	r28
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvInt1(); //name of function is already pointer to function
 46a:	e0 91 62 00 	lds	r30, 0x0062
 46e:	f0 91 63 00 	lds	r31, 0x0063
 472:	09 95       	icall
}
 474:	cf 91       	pop	r28
 476:	df 91       	pop	r29
 478:	ff 91       	pop	r31
 47a:	ef 91       	pop	r30
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <__vector_3>:
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void){
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	2f 93       	push	r18
 4a6:	3f 93       	push	r19
 4a8:	4f 93       	push	r20
 4aa:	5f 93       	push	r21
 4ac:	6f 93       	push	r22
 4ae:	7f 93       	push	r23
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
 4b4:	af 93       	push	r26
 4b6:	bf 93       	push	r27
 4b8:	ef 93       	push	r30
 4ba:	ff 93       	push	r31
 4bc:	df 93       	push	r29
 4be:	cf 93       	push	r28
 4c0:	cd b7       	in	r28, 0x3d	; 61
 4c2:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvInt2(); //name of function is already pointer to function
 4c4:	e0 91 64 00 	lds	r30, 0x0064
 4c8:	f0 91 65 00 	lds	r31, 0x0065
 4cc:	09 95       	icall
}
 4ce:	cf 91       	pop	r28
 4d0:	df 91       	pop	r29
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	bf 91       	pop	r27
 4d8:	af 91       	pop	r26
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	7f 91       	pop	r23
 4e0:	6f 91       	pop	r22
 4e2:	5f 91       	pop	r21
 4e4:	4f 91       	pop	r20
 4e6:	3f 91       	pop	r19
 4e8:	2f 91       	pop	r18
 4ea:	0f 90       	pop	r0
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <DIO_u8SetPinDirection>:
#include "STD_Types.h"
#include "GPIO_config.h"
#include "GPIO_private.h"
#include "GPIO_interface.h"

u8  DIO_u8SetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
 4f4:	df 93       	push	r29
 4f6:	cf 93       	push	r28
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
 4fc:	28 97       	sbiw	r28, 0x08	; 8
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	f8 94       	cli
 502:	de bf       	out	0x3e, r29	; 62
 504:	0f be       	out	0x3f, r0	; 63
 506:	cd bf       	out	0x3d, r28	; 61
 508:	8a 83       	std	Y+2, r24	; 0x02
 50a:	6b 83       	std	Y+3, r22	; 0x03
 50c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 50e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin<=DIO_u8PIN7 )
 510:	8b 81       	ldd	r24, Y+3	; 0x03
 512:	88 30       	cpi	r24, 0x08	; 8
 514:	08 f0       	brcs	.+2      	; 0x518 <DIO_u8SetPinDirection+0x24>
 516:	f4 c0       	rjmp	.+488    	; 0x700 <DIO_u8SetPinDirection+0x20c>
	{
		if ( Copy_u8Direction==DIO_u8PIN_INPUT){
 518:	8c 81       	ldd	r24, Y+4	; 0x04
 51a:	88 23       	and	r24, r24
 51c:	09 f0       	breq	.+2      	; 0x520 <DIO_u8SetPinDirection+0x2c>
 51e:	77 c0       	rjmp	.+238    	; 0x60e <DIO_u8SetPinDirection+0x11a>
			switch (Copy_u8Port)
 520:	8a 81       	ldd	r24, Y+2	; 0x02
 522:	28 2f       	mov	r18, r24
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	38 87       	std	Y+8, r19	; 0x08
 528:	2f 83       	std	Y+7, r18	; 0x07
 52a:	8f 81       	ldd	r24, Y+7	; 0x07
 52c:	98 85       	ldd	r25, Y+8	; 0x08
 52e:	81 30       	cpi	r24, 0x01	; 1
 530:	91 05       	cpc	r25, r1
 532:	59 f1       	breq	.+86     	; 0x58a <DIO_u8SetPinDirection+0x96>
 534:	2f 81       	ldd	r18, Y+7	; 0x07
 536:	38 85       	ldd	r19, Y+8	; 0x08
 538:	22 30       	cpi	r18, 0x02	; 2
 53a:	31 05       	cpc	r19, r1
 53c:	2c f4       	brge	.+10     	; 0x548 <DIO_u8SetPinDirection+0x54>
 53e:	8f 81       	ldd	r24, Y+7	; 0x07
 540:	98 85       	ldd	r25, Y+8	; 0x08
 542:	00 97       	sbiw	r24, 0x00	; 0
 544:	69 f0       	breq	.+26     	; 0x560 <DIO_u8SetPinDirection+0x6c>
 546:	60 c0       	rjmp	.+192    	; 0x608 <DIO_u8SetPinDirection+0x114>
 548:	2f 81       	ldd	r18, Y+7	; 0x07
 54a:	38 85       	ldd	r19, Y+8	; 0x08
 54c:	22 30       	cpi	r18, 0x02	; 2
 54e:	31 05       	cpc	r19, r1
 550:	89 f1       	breq	.+98     	; 0x5b4 <DIO_u8SetPinDirection+0xc0>
 552:	8f 81       	ldd	r24, Y+7	; 0x07
 554:	98 85       	ldd	r25, Y+8	; 0x08
 556:	83 30       	cpi	r24, 0x03	; 3
 558:	91 05       	cpc	r25, r1
 55a:	09 f4       	brne	.+2      	; 0x55e <DIO_u8SetPinDirection+0x6a>
 55c:	40 c0       	rjmp	.+128    	; 0x5de <DIO_u8SetPinDirection+0xea>
 55e:	54 c0       	rjmp	.+168    	; 0x608 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: Clr_Bit(DDRA,Copy_u8Pin);break;
 560:	aa e3       	ldi	r26, 0x3A	; 58
 562:	b0 e0       	ldi	r27, 0x00	; 0
 564:	ea e3       	ldi	r30, 0x3A	; 58
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	48 2f       	mov	r20, r24
 56c:	8b 81       	ldd	r24, Y+3	; 0x03
 56e:	28 2f       	mov	r18, r24
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 2e       	mov	r0, r18
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_u8SetPinDirection+0x8a>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	0a 94       	dec	r0
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_u8SetPinDirection+0x86>
 582:	80 95       	com	r24
 584:	84 23       	and	r24, r20
 586:	8c 93       	st	X, r24
 588:	bd c0       	rjmp	.+378    	; 0x704 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB:Clr_Bit(DDRB,Copy_u8Pin); break;
 58a:	a7 e3       	ldi	r26, 0x37	; 55
 58c:	b0 e0       	ldi	r27, 0x00	; 0
 58e:	e7 e3       	ldi	r30, 0x37	; 55
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	80 81       	ld	r24, Z
 594:	48 2f       	mov	r20, r24
 596:	8b 81       	ldd	r24, Y+3	; 0x03
 598:	28 2f       	mov	r18, r24
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	02 2e       	mov	r0, r18
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <DIO_u8SetPinDirection+0xb4>
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	0a 94       	dec	r0
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <DIO_u8SetPinDirection+0xb0>
 5ac:	80 95       	com	r24
 5ae:	84 23       	and	r24, r20
 5b0:	8c 93       	st	X, r24
 5b2:	a8 c0       	rjmp	.+336    	; 0x704 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC:Clr_Bit(DDRC,Copy_u8Pin); break;
 5b4:	a4 e3       	ldi	r26, 0x34	; 52
 5b6:	b0 e0       	ldi	r27, 0x00	; 0
 5b8:	e4 e3       	ldi	r30, 0x34	; 52
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	80 81       	ld	r24, Z
 5be:	48 2f       	mov	r20, r24
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	28 2f       	mov	r18, r24
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	02 2e       	mov	r0, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_u8SetPinDirection+0xde>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	0a 94       	dec	r0
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_u8SetPinDirection+0xda>
 5d6:	80 95       	com	r24
 5d8:	84 23       	and	r24, r20
 5da:	8c 93       	st	X, r24
 5dc:	93 c0       	rjmp	.+294    	; 0x704 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD:Clr_Bit(DDRD,Copy_u8Pin); break;
 5de:	a1 e3       	ldi	r26, 0x31	; 49
 5e0:	b0 e0       	ldi	r27, 0x00	; 0
 5e2:	e1 e3       	ldi	r30, 0x31	; 49
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
 5e8:	48 2f       	mov	r20, r24
 5ea:	8b 81       	ldd	r24, Y+3	; 0x03
 5ec:	28 2f       	mov	r18, r24
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 2e       	mov	r0, r18
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_u8SetPinDirection+0x108>
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	0a 94       	dec	r0
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_u8SetPinDirection+0x104>
 600:	80 95       	com	r24
 602:	84 23       	and	r24, r20
 604:	8c 93       	st	X, r24
 606:	7e c0       	rjmp	.+252    	; 0x704 <DIO_u8SetPinDirection+0x210>
			default:Local_u8ErrorState=1;
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	89 83       	std	Y+1, r24	; 0x01
 60c:	7b c0       	rjmp	.+246    	; 0x704 <DIO_u8SetPinDirection+0x210>
			}
		}
			else if ( Copy_u8Direction==DIO_u8PIN_OUTPUT){
 60e:	8c 81       	ldd	r24, Y+4	; 0x04
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	09 f0       	breq	.+2      	; 0x616 <DIO_u8SetPinDirection+0x122>
 614:	72 c0       	rjmp	.+228    	; 0x6fa <DIO_u8SetPinDirection+0x206>
				switch (Copy_u8Port)
 616:	8a 81       	ldd	r24, Y+2	; 0x02
 618:	28 2f       	mov	r18, r24
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	3e 83       	std	Y+6, r19	; 0x06
 61e:	2d 83       	std	Y+5, r18	; 0x05
 620:	8d 81       	ldd	r24, Y+5	; 0x05
 622:	9e 81       	ldd	r25, Y+6	; 0x06
 624:	81 30       	cpi	r24, 0x01	; 1
 626:	91 05       	cpc	r25, r1
 628:	49 f1       	breq	.+82     	; 0x67c <DIO_u8SetPinDirection+0x188>
 62a:	2d 81       	ldd	r18, Y+5	; 0x05
 62c:	3e 81       	ldd	r19, Y+6	; 0x06
 62e:	22 30       	cpi	r18, 0x02	; 2
 630:	31 05       	cpc	r19, r1
 632:	2c f4       	brge	.+10     	; 0x63e <DIO_u8SetPinDirection+0x14a>
 634:	8d 81       	ldd	r24, Y+5	; 0x05
 636:	9e 81       	ldd	r25, Y+6	; 0x06
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	61 f0       	breq	.+24     	; 0x654 <DIO_u8SetPinDirection+0x160>
 63c:	5b c0       	rjmp	.+182    	; 0x6f4 <DIO_u8SetPinDirection+0x200>
 63e:	2d 81       	ldd	r18, Y+5	; 0x05
 640:	3e 81       	ldd	r19, Y+6	; 0x06
 642:	22 30       	cpi	r18, 0x02	; 2
 644:	31 05       	cpc	r19, r1
 646:	71 f1       	breq	.+92     	; 0x6a4 <DIO_u8SetPinDirection+0x1b0>
 648:	8d 81       	ldd	r24, Y+5	; 0x05
 64a:	9e 81       	ldd	r25, Y+6	; 0x06
 64c:	83 30       	cpi	r24, 0x03	; 3
 64e:	91 05       	cpc	r25, r1
 650:	e9 f1       	breq	.+122    	; 0x6cc <DIO_u8SetPinDirection+0x1d8>
 652:	50 c0       	rjmp	.+160    	; 0x6f4 <DIO_u8SetPinDirection+0x200>
				{
				case DIO_u8PORTA:Set_Bit(DDRA,Copy_u8Pin);break;
 654:	aa e3       	ldi	r26, 0x3A	; 58
 656:	b0 e0       	ldi	r27, 0x00	; 0
 658:	ea e3       	ldi	r30, 0x3A	; 58
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	80 81       	ld	r24, Z
 65e:	48 2f       	mov	r20, r24
 660:	8b 81       	ldd	r24, Y+3	; 0x03
 662:	28 2f       	mov	r18, r24
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	02 2e       	mov	r0, r18
 66c:	02 c0       	rjmp	.+4      	; 0x672 <DIO_u8SetPinDirection+0x17e>
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	0a 94       	dec	r0
 674:	e2 f7       	brpl	.-8      	; 0x66e <DIO_u8SetPinDirection+0x17a>
 676:	84 2b       	or	r24, r20
 678:	8c 93       	st	X, r24
 67a:	44 c0       	rjmp	.+136    	; 0x704 <DIO_u8SetPinDirection+0x210>
				case DIO_u8PORTB:Set_Bit(DDRB,Copy_u8Pin); break;
 67c:	a7 e3       	ldi	r26, 0x37	; 55
 67e:	b0 e0       	ldi	r27, 0x00	; 0
 680:	e7 e3       	ldi	r30, 0x37	; 55
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	80 81       	ld	r24, Z
 686:	48 2f       	mov	r20, r24
 688:	8b 81       	ldd	r24, Y+3	; 0x03
 68a:	28 2f       	mov	r18, r24
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	02 2e       	mov	r0, r18
 694:	02 c0       	rjmp	.+4      	; 0x69a <DIO_u8SetPinDirection+0x1a6>
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	0a 94       	dec	r0
 69c:	e2 f7       	brpl	.-8      	; 0x696 <DIO_u8SetPinDirection+0x1a2>
 69e:	84 2b       	or	r24, r20
 6a0:	8c 93       	st	X, r24
 6a2:	30 c0       	rjmp	.+96     	; 0x704 <DIO_u8SetPinDirection+0x210>
				case DIO_u8PORTC:Set_Bit(DDRC,Copy_u8Pin); break;
 6a4:	a4 e3       	ldi	r26, 0x34	; 52
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	e4 e3       	ldi	r30, 0x34	; 52
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	48 2f       	mov	r20, r24
 6b0:	8b 81       	ldd	r24, Y+3	; 0x03
 6b2:	28 2f       	mov	r18, r24
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	02 2e       	mov	r0, r18
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DIO_u8SetPinDirection+0x1ce>
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	0a 94       	dec	r0
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <DIO_u8SetPinDirection+0x1ca>
 6c6:	84 2b       	or	r24, r20
 6c8:	8c 93       	st	X, r24
 6ca:	1c c0       	rjmp	.+56     	; 0x704 <DIO_u8SetPinDirection+0x210>
				case DIO_u8PORTD:Set_Bit(DDRD,Copy_u8Pin); break;
 6cc:	a1 e3       	ldi	r26, 0x31	; 49
 6ce:	b0 e0       	ldi	r27, 0x00	; 0
 6d0:	e1 e3       	ldi	r30, 0x31	; 49
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	48 2f       	mov	r20, r24
 6d8:	8b 81       	ldd	r24, Y+3	; 0x03
 6da:	28 2f       	mov	r18, r24
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 2e       	mov	r0, r18
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <DIO_u8SetPinDirection+0x1f6>
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	0a 94       	dec	r0
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <DIO_u8SetPinDirection+0x1f2>
 6ee:	84 2b       	or	r24, r20
 6f0:	8c 93       	st	X, r24
 6f2:	08 c0       	rjmp	.+16     	; 0x704 <DIO_u8SetPinDirection+0x210>
				default:Local_u8ErrorState=1;
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	89 83       	std	Y+1, r24	; 0x01
 6f8:	05 c0       	rjmp	.+10     	; 0x704 <DIO_u8SetPinDirection+0x210>
				}

			}
			else{ Local_u8ErrorState=1;}
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	89 83       	std	Y+1, r24	; 0x01
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_u8SetPinDirection+0x210>


	}
	else {Local_u8ErrorState=1;}
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
 704:	89 81       	ldd	r24, Y+1	; 0x01
}
 706:	28 96       	adiw	r28, 0x08	; 8
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	f8 94       	cli
 70c:	de bf       	out	0x3e, r29	; 62
 70e:	0f be       	out	0x3f, r0	; 63
 710:	cd bf       	out	0x3d, r28	; 61
 712:	cf 91       	pop	r28
 714:	df 91       	pop	r29
 716:	08 95       	ret

00000718 <DIO_u8SetPortDirection>:


u8  DIO_u8SetPortDirection (u8 Copy_u8Port, u8 Copy_u8Direction){
 718:	df 93       	push	r29
 71a:	cf 93       	push	r28
 71c:	00 d0       	rcall	.+0      	; 0x71e <DIO_u8SetPortDirection+0x6>
 71e:	00 d0       	rcall	.+0      	; 0x720 <DIO_u8SetPortDirection+0x8>
 720:	0f 92       	push	r0
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	8a 83       	std	Y+2, r24	; 0x02
 728:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 72a:	19 82       	std	Y+1, r1	; 0x01


	  switch (Copy_u8Port){
 72c:	8a 81       	ldd	r24, Y+2	; 0x02
 72e:	28 2f       	mov	r18, r24
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	3d 83       	std	Y+5, r19	; 0x05
 734:	2c 83       	std	Y+4, r18	; 0x04
 736:	8c 81       	ldd	r24, Y+4	; 0x04
 738:	9d 81       	ldd	r25, Y+5	; 0x05
 73a:	81 30       	cpi	r24, 0x01	; 1
 73c:	91 05       	cpc	r25, r1
 73e:	d1 f0       	breq	.+52     	; 0x774 <DIO_u8SetPortDirection+0x5c>
 740:	2c 81       	ldd	r18, Y+4	; 0x04
 742:	3d 81       	ldd	r19, Y+5	; 0x05
 744:	22 30       	cpi	r18, 0x02	; 2
 746:	31 05       	cpc	r19, r1
 748:	2c f4       	brge	.+10     	; 0x754 <DIO_u8SetPortDirection+0x3c>
 74a:	8c 81       	ldd	r24, Y+4	; 0x04
 74c:	9d 81       	ldd	r25, Y+5	; 0x05
 74e:	00 97       	sbiw	r24, 0x00	; 0
 750:	61 f0       	breq	.+24     	; 0x76a <DIO_u8SetPortDirection+0x52>
 752:	1e c0       	rjmp	.+60     	; 0x790 <DIO_u8SetPortDirection+0x78>
 754:	2c 81       	ldd	r18, Y+4	; 0x04
 756:	3d 81       	ldd	r19, Y+5	; 0x05
 758:	22 30       	cpi	r18, 0x02	; 2
 75a:	31 05       	cpc	r19, r1
 75c:	81 f0       	breq	.+32     	; 0x77e <DIO_u8SetPortDirection+0x66>
 75e:	8c 81       	ldd	r24, Y+4	; 0x04
 760:	9d 81       	ldd	r25, Y+5	; 0x05
 762:	83 30       	cpi	r24, 0x03	; 3
 764:	91 05       	cpc	r25, r1
 766:	81 f0       	breq	.+32     	; 0x788 <DIO_u8SetPortDirection+0x70>
 768:	13 c0       	rjmp	.+38     	; 0x790 <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
 76a:	ea e3       	ldi	r30, 0x3A	; 58
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	8b 81       	ldd	r24, Y+3	; 0x03
 770:	80 83       	st	Z, r24
 772:	0e c0       	rjmp	.+28     	; 0x790 <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
 774:	e7 e3       	ldi	r30, 0x37	; 55
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	8b 81       	ldd	r24, Y+3	; 0x03
 77a:	80 83       	st	Z, r24
 77c:	09 c0       	rjmp	.+18     	; 0x790 <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
 77e:	e4 e3       	ldi	r30, 0x34	; 52
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	8b 81       	ldd	r24, Y+3	; 0x03
 784:	80 83       	st	Z, r24
 786:	04 c0       	rjmp	.+8      	; 0x790 <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
 788:	e1 e3       	ldi	r30, 0x31	; 49
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	8b 81       	ldd	r24, Y+3	; 0x03
 78e:	80 83       	st	Z, r24
	  }




	return Local_u8ErrorState;
 790:	89 81       	ldd	r24, Y+1	; 0x01
}
 792:	0f 90       	pop	r0
 794:	0f 90       	pop	r0
 796:	0f 90       	pop	r0
 798:	0f 90       	pop	r0
 79a:	0f 90       	pop	r0
 79c:	cf 91       	pop	r28
 79e:	df 91       	pop	r29
 7a0:	08 95       	ret

000007a2 <DIO_u8SetPinValue>:




u8  DIO_u8SetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
 7a2:	df 93       	push	r29
 7a4:	cf 93       	push	r28
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	28 97       	sbiw	r28, 0x08	; 8
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	f8 94       	cli
 7b0:	de bf       	out	0x3e, r29	; 62
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	cd bf       	out	0x3d, r28	; 61
 7b6:	8a 83       	std	Y+2, r24	; 0x02
 7b8:	6b 83       	std	Y+3, r22	; 0x03
 7ba:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 7bc:	19 82       	std	Y+1, r1	; 0x01
	if ( Copy_u8Pin<=DIO_u8PIN7 )
 7be:	8b 81       	ldd	r24, Y+3	; 0x03
 7c0:	88 30       	cpi	r24, 0x08	; 8
 7c2:	08 f0       	brcs	.+2      	; 0x7c6 <DIO_u8SetPinValue+0x24>
 7c4:	f4 c0       	rjmp	.+488    	; 0x9ae <__stack+0x14f>
	{
		if ( Copy_u8Value==DIO_u8PIN_LOW){
 7c6:	8c 81       	ldd	r24, Y+4	; 0x04
 7c8:	88 23       	and	r24, r24
 7ca:	09 f0       	breq	.+2      	; 0x7ce <DIO_u8SetPinValue+0x2c>
 7cc:	77 c0       	rjmp	.+238    	; 0x8bc <__stack+0x5d>
			switch (Copy_u8Port)
 7ce:	8a 81       	ldd	r24, Y+2	; 0x02
 7d0:	28 2f       	mov	r18, r24
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	38 87       	std	Y+8, r19	; 0x08
 7d6:	2f 83       	std	Y+7, r18	; 0x07
 7d8:	8f 81       	ldd	r24, Y+7	; 0x07
 7da:	98 85       	ldd	r25, Y+8	; 0x08
 7dc:	81 30       	cpi	r24, 0x01	; 1
 7de:	91 05       	cpc	r25, r1
 7e0:	59 f1       	breq	.+86     	; 0x838 <DIO_u8SetPinValue+0x96>
 7e2:	2f 81       	ldd	r18, Y+7	; 0x07
 7e4:	38 85       	ldd	r19, Y+8	; 0x08
 7e6:	22 30       	cpi	r18, 0x02	; 2
 7e8:	31 05       	cpc	r19, r1
 7ea:	2c f4       	brge	.+10     	; 0x7f6 <DIO_u8SetPinValue+0x54>
 7ec:	8f 81       	ldd	r24, Y+7	; 0x07
 7ee:	98 85       	ldd	r25, Y+8	; 0x08
 7f0:	00 97       	sbiw	r24, 0x00	; 0
 7f2:	69 f0       	breq	.+26     	; 0x80e <DIO_u8SetPinValue+0x6c>
 7f4:	60 c0       	rjmp	.+192    	; 0x8b6 <__stack+0x57>
 7f6:	2f 81       	ldd	r18, Y+7	; 0x07
 7f8:	38 85       	ldd	r19, Y+8	; 0x08
 7fa:	22 30       	cpi	r18, 0x02	; 2
 7fc:	31 05       	cpc	r19, r1
 7fe:	89 f1       	breq	.+98     	; 0x862 <__stack+0x3>
 800:	8f 81       	ldd	r24, Y+7	; 0x07
 802:	98 85       	ldd	r25, Y+8	; 0x08
 804:	83 30       	cpi	r24, 0x03	; 3
 806:	91 05       	cpc	r25, r1
 808:	09 f4       	brne	.+2      	; 0x80c <DIO_u8SetPinValue+0x6a>
 80a:	40 c0       	rjmp	.+128    	; 0x88c <__stack+0x2d>
 80c:	54 c0       	rjmp	.+168    	; 0x8b6 <__stack+0x57>
			{
			case DIO_u8PORTA: Clr_Bit(PORTA,Copy_u8Pin);break;
 80e:	ab e3       	ldi	r26, 0x3B	; 59
 810:	b0 e0       	ldi	r27, 0x00	; 0
 812:	eb e3       	ldi	r30, 0x3B	; 59
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	48 2f       	mov	r20, r24
 81a:	8b 81       	ldd	r24, Y+3	; 0x03
 81c:	28 2f       	mov	r18, r24
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	02 2e       	mov	r0, r18
 826:	02 c0       	rjmp	.+4      	; 0x82c <DIO_u8SetPinValue+0x8a>
 828:	88 0f       	add	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	0a 94       	dec	r0
 82e:	e2 f7       	brpl	.-8      	; 0x828 <DIO_u8SetPinValue+0x86>
 830:	80 95       	com	r24
 832:	84 23       	and	r24, r20
 834:	8c 93       	st	X, r24
 836:	bd c0       	rjmp	.+378    	; 0x9b2 <__stack+0x153>
			case DIO_u8PORTB:Clr_Bit(PORTB,Copy_u8Pin); break;
 838:	a8 e3       	ldi	r26, 0x38	; 56
 83a:	b0 e0       	ldi	r27, 0x00	; 0
 83c:	e8 e3       	ldi	r30, 0x38	; 56
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	48 2f       	mov	r20, r24
 844:	8b 81       	ldd	r24, Y+3	; 0x03
 846:	28 2f       	mov	r18, r24
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	02 2e       	mov	r0, r18
 850:	02 c0       	rjmp	.+4      	; 0x856 <DIO_u8SetPinValue+0xb4>
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	0a 94       	dec	r0
 858:	e2 f7       	brpl	.-8      	; 0x852 <DIO_u8SetPinValue+0xb0>
 85a:	80 95       	com	r24
 85c:	84 23       	and	r24, r20
 85e:	8c 93       	st	X, r24
 860:	a8 c0       	rjmp	.+336    	; 0x9b2 <__stack+0x153>
			case DIO_u8PORTC:Clr_Bit(PORTC,Copy_u8Pin); break;
 862:	a5 e3       	ldi	r26, 0x35	; 53
 864:	b0 e0       	ldi	r27, 0x00	; 0
 866:	e5 e3       	ldi	r30, 0x35	; 53
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	80 81       	ld	r24, Z
 86c:	48 2f       	mov	r20, r24
 86e:	8b 81       	ldd	r24, Y+3	; 0x03
 870:	28 2f       	mov	r18, r24
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	02 2e       	mov	r0, r18
 87a:	02 c0       	rjmp	.+4      	; 0x880 <__stack+0x21>
 87c:	88 0f       	add	r24, r24
 87e:	99 1f       	adc	r25, r25
 880:	0a 94       	dec	r0
 882:	e2 f7       	brpl	.-8      	; 0x87c <__stack+0x1d>
 884:	80 95       	com	r24
 886:	84 23       	and	r24, r20
 888:	8c 93       	st	X, r24
 88a:	93 c0       	rjmp	.+294    	; 0x9b2 <__stack+0x153>
			case DIO_u8PORTD:Clr_Bit(PORTD,Copy_u8Pin); break;
 88c:	a2 e3       	ldi	r26, 0x32	; 50
 88e:	b0 e0       	ldi	r27, 0x00	; 0
 890:	e2 e3       	ldi	r30, 0x32	; 50
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	80 81       	ld	r24, Z
 896:	48 2f       	mov	r20, r24
 898:	8b 81       	ldd	r24, Y+3	; 0x03
 89a:	28 2f       	mov	r18, r24
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	02 2e       	mov	r0, r18
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
 8a6:	88 0f       	add	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	0a 94       	dec	r0
 8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
 8ae:	80 95       	com	r24
 8b0:	84 23       	and	r24, r20
 8b2:	8c 93       	st	X, r24
 8b4:	7e c0       	rjmp	.+252    	; 0x9b2 <__stack+0x153>
			default:Local_u8ErrorState=1;
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	89 83       	std	Y+1, r24	; 0x01
 8ba:	7b c0       	rjmp	.+246    	; 0x9b2 <__stack+0x153>
			}
		}
		else if ( Copy_u8Value==DIO_u8PIN_HIGH){
 8bc:	8c 81       	ldd	r24, Y+4	; 0x04
 8be:	81 30       	cpi	r24, 0x01	; 1
 8c0:	09 f0       	breq	.+2      	; 0x8c4 <__stack+0x65>
 8c2:	72 c0       	rjmp	.+228    	; 0x9a8 <__stack+0x149>
			switch (Copy_u8Port)
 8c4:	8a 81       	ldd	r24, Y+2	; 0x02
 8c6:	28 2f       	mov	r18, r24
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	3e 83       	std	Y+6, r19	; 0x06
 8cc:	2d 83       	std	Y+5, r18	; 0x05
 8ce:	8d 81       	ldd	r24, Y+5	; 0x05
 8d0:	9e 81       	ldd	r25, Y+6	; 0x06
 8d2:	81 30       	cpi	r24, 0x01	; 1
 8d4:	91 05       	cpc	r25, r1
 8d6:	49 f1       	breq	.+82     	; 0x92a <__stack+0xcb>
 8d8:	2d 81       	ldd	r18, Y+5	; 0x05
 8da:	3e 81       	ldd	r19, Y+6	; 0x06
 8dc:	22 30       	cpi	r18, 0x02	; 2
 8de:	31 05       	cpc	r19, r1
 8e0:	2c f4       	brge	.+10     	; 0x8ec <__stack+0x8d>
 8e2:	8d 81       	ldd	r24, Y+5	; 0x05
 8e4:	9e 81       	ldd	r25, Y+6	; 0x06
 8e6:	00 97       	sbiw	r24, 0x00	; 0
 8e8:	61 f0       	breq	.+24     	; 0x902 <__stack+0xa3>
 8ea:	5b c0       	rjmp	.+182    	; 0x9a2 <__stack+0x143>
 8ec:	2d 81       	ldd	r18, Y+5	; 0x05
 8ee:	3e 81       	ldd	r19, Y+6	; 0x06
 8f0:	22 30       	cpi	r18, 0x02	; 2
 8f2:	31 05       	cpc	r19, r1
 8f4:	71 f1       	breq	.+92     	; 0x952 <__stack+0xf3>
 8f6:	8d 81       	ldd	r24, Y+5	; 0x05
 8f8:	9e 81       	ldd	r25, Y+6	; 0x06
 8fa:	83 30       	cpi	r24, 0x03	; 3
 8fc:	91 05       	cpc	r25, r1
 8fe:	e9 f1       	breq	.+122    	; 0x97a <__stack+0x11b>
 900:	50 c0       	rjmp	.+160    	; 0x9a2 <__stack+0x143>
			{
			case DIO_u8PORTA:Set_Bit(PORTA,Copy_u8Pin);break;
 902:	ab e3       	ldi	r26, 0x3B	; 59
 904:	b0 e0       	ldi	r27, 0x00	; 0
 906:	eb e3       	ldi	r30, 0x3B	; 59
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	80 81       	ld	r24, Z
 90c:	48 2f       	mov	r20, r24
 90e:	8b 81       	ldd	r24, Y+3	; 0x03
 910:	28 2f       	mov	r18, r24
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	02 2e       	mov	r0, r18
 91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0xc1>
 91c:	88 0f       	add	r24, r24
 91e:	99 1f       	adc	r25, r25
 920:	0a 94       	dec	r0
 922:	e2 f7       	brpl	.-8      	; 0x91c <__stack+0xbd>
 924:	84 2b       	or	r24, r20
 926:	8c 93       	st	X, r24
 928:	44 c0       	rjmp	.+136    	; 0x9b2 <__stack+0x153>
			case DIO_u8PORTB:Set_Bit(PORTB,Copy_u8Pin); break;
 92a:	a8 e3       	ldi	r26, 0x38	; 56
 92c:	b0 e0       	ldi	r27, 0x00	; 0
 92e:	e8 e3       	ldi	r30, 0x38	; 56
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	80 81       	ld	r24, Z
 934:	48 2f       	mov	r20, r24
 936:	8b 81       	ldd	r24, Y+3	; 0x03
 938:	28 2f       	mov	r18, r24
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	02 2e       	mov	r0, r18
 942:	02 c0       	rjmp	.+4      	; 0x948 <__stack+0xe9>
 944:	88 0f       	add	r24, r24
 946:	99 1f       	adc	r25, r25
 948:	0a 94       	dec	r0
 94a:	e2 f7       	brpl	.-8      	; 0x944 <__stack+0xe5>
 94c:	84 2b       	or	r24, r20
 94e:	8c 93       	st	X, r24
 950:	30 c0       	rjmp	.+96     	; 0x9b2 <__stack+0x153>
			case DIO_u8PORTC:Set_Bit(PORTC,Copy_u8Pin); break;
 952:	a5 e3       	ldi	r26, 0x35	; 53
 954:	b0 e0       	ldi	r27, 0x00	; 0
 956:	e5 e3       	ldi	r30, 0x35	; 53
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	80 81       	ld	r24, Z
 95c:	48 2f       	mov	r20, r24
 95e:	8b 81       	ldd	r24, Y+3	; 0x03
 960:	28 2f       	mov	r18, r24
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	02 2e       	mov	r0, r18
 96a:	02 c0       	rjmp	.+4      	; 0x970 <__stack+0x111>
 96c:	88 0f       	add	r24, r24
 96e:	99 1f       	adc	r25, r25
 970:	0a 94       	dec	r0
 972:	e2 f7       	brpl	.-8      	; 0x96c <__stack+0x10d>
 974:	84 2b       	or	r24, r20
 976:	8c 93       	st	X, r24
 978:	1c c0       	rjmp	.+56     	; 0x9b2 <__stack+0x153>
			case DIO_u8PORTD:Set_Bit(PORTD,Copy_u8Pin); break;
 97a:	a2 e3       	ldi	r26, 0x32	; 50
 97c:	b0 e0       	ldi	r27, 0x00	; 0
 97e:	e2 e3       	ldi	r30, 0x32	; 50
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	48 2f       	mov	r20, r24
 986:	8b 81       	ldd	r24, Y+3	; 0x03
 988:	28 2f       	mov	r18, r24
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	02 2e       	mov	r0, r18
 992:	02 c0       	rjmp	.+4      	; 0x998 <__stack+0x139>
 994:	88 0f       	add	r24, r24
 996:	99 1f       	adc	r25, r25
 998:	0a 94       	dec	r0
 99a:	e2 f7       	brpl	.-8      	; 0x994 <__stack+0x135>
 99c:	84 2b       	or	r24, r20
 99e:	8c 93       	st	X, r24
 9a0:	08 c0       	rjmp	.+16     	; 0x9b2 <__stack+0x153>
			default:Local_u8ErrorState=1;
 9a2:	81 e0       	ldi	r24, 0x01	; 1
 9a4:	89 83       	std	Y+1, r24	; 0x01
 9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <__stack+0x153>
			}

		}
		else{ Local_u8ErrorState=1;}
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	89 83       	std	Y+1, r24	; 0x01
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <__stack+0x153>


	}

	else {Local_u8ErrorState=1;}
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
 9b2:	89 81       	ldd	r24, Y+1	; 0x01
}
 9b4:	28 96       	adiw	r28, 0x08	; 8
 9b6:	0f b6       	in	r0, 0x3f	; 63
 9b8:	f8 94       	cli
 9ba:	de bf       	out	0x3e, r29	; 62
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	cd bf       	out	0x3d, r28	; 61
 9c0:	cf 91       	pop	r28
 9c2:	df 91       	pop	r29
 9c4:	08 95       	ret

000009c6 <DIO_u8SetPortValue>:





u8  DIO_u8SetPortValue (u8 Copy_u8Port, u8 Copy_u8Value){
 9c6:	df 93       	push	r29
 9c8:	cf 93       	push	r28
 9ca:	00 d0       	rcall	.+0      	; 0x9cc <DIO_u8SetPortValue+0x6>
 9cc:	00 d0       	rcall	.+0      	; 0x9ce <DIO_u8SetPortValue+0x8>
 9ce:	0f 92       	push	r0
 9d0:	cd b7       	in	r28, 0x3d	; 61
 9d2:	de b7       	in	r29, 0x3e	; 62
 9d4:	8a 83       	std	Y+2, r24	; 0x02
 9d6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 9d8:	19 82       	std	Y+1, r1	; 0x01


	switch (Copy_u8Port){
 9da:	8a 81       	ldd	r24, Y+2	; 0x02
 9dc:	28 2f       	mov	r18, r24
 9de:	30 e0       	ldi	r19, 0x00	; 0
 9e0:	3d 83       	std	Y+5, r19	; 0x05
 9e2:	2c 83       	std	Y+4, r18	; 0x04
 9e4:	8c 81       	ldd	r24, Y+4	; 0x04
 9e6:	9d 81       	ldd	r25, Y+5	; 0x05
 9e8:	81 30       	cpi	r24, 0x01	; 1
 9ea:	91 05       	cpc	r25, r1
 9ec:	d1 f0       	breq	.+52     	; 0xa22 <DIO_u8SetPortValue+0x5c>
 9ee:	2c 81       	ldd	r18, Y+4	; 0x04
 9f0:	3d 81       	ldd	r19, Y+5	; 0x05
 9f2:	22 30       	cpi	r18, 0x02	; 2
 9f4:	31 05       	cpc	r19, r1
 9f6:	2c f4       	brge	.+10     	; 0xa02 <DIO_u8SetPortValue+0x3c>
 9f8:	8c 81       	ldd	r24, Y+4	; 0x04
 9fa:	9d 81       	ldd	r25, Y+5	; 0x05
 9fc:	00 97       	sbiw	r24, 0x00	; 0
 9fe:	61 f0       	breq	.+24     	; 0xa18 <DIO_u8SetPortValue+0x52>
 a00:	1e c0       	rjmp	.+60     	; 0xa3e <DIO_u8SetPortValue+0x78>
 a02:	2c 81       	ldd	r18, Y+4	; 0x04
 a04:	3d 81       	ldd	r19, Y+5	; 0x05
 a06:	22 30       	cpi	r18, 0x02	; 2
 a08:	31 05       	cpc	r19, r1
 a0a:	81 f0       	breq	.+32     	; 0xa2c <DIO_u8SetPortValue+0x66>
 a0c:	8c 81       	ldd	r24, Y+4	; 0x04
 a0e:	9d 81       	ldd	r25, Y+5	; 0x05
 a10:	83 30       	cpi	r24, 0x03	; 3
 a12:	91 05       	cpc	r25, r1
 a14:	81 f0       	breq	.+32     	; 0xa36 <DIO_u8SetPortValue+0x70>
 a16:	13 c0       	rjmp	.+38     	; 0xa3e <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTA: PORTA=Copy_u8Value;break;
 a18:	eb e3       	ldi	r30, 0x3B	; 59
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	8b 81       	ldd	r24, Y+3	; 0x03
 a1e:	80 83       	st	Z, r24
 a20:	0e c0       	rjmp	.+28     	; 0xa3e <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTB: PORTB=Copy_u8Value;break;
 a22:	e8 e3       	ldi	r30, 0x38	; 56
 a24:	f0 e0       	ldi	r31, 0x00	; 0
 a26:	8b 81       	ldd	r24, Y+3	; 0x03
 a28:	80 83       	st	Z, r24
 a2a:	09 c0       	rjmp	.+18     	; 0xa3e <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTC: PORTC=Copy_u8Value;break;
 a2c:	e5 e3       	ldi	r30, 0x35	; 53
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	8b 81       	ldd	r24, Y+3	; 0x03
 a32:	80 83       	st	Z, r24
 a34:	04 c0       	rjmp	.+8      	; 0xa3e <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTD: PORTD=Copy_u8Value;break;
 a36:	e2 e3       	ldi	r30, 0x32	; 50
 a38:	f0 e0       	ldi	r31, 0x00	; 0
 a3a:	8b 81       	ldd	r24, Y+3	; 0x03
 a3c:	80 83       	st	Z, r24

		  }

	return Local_u8ErrorState;
 a3e:	89 81       	ldd	r24, Y+1	; 0x01
}
 a40:	0f 90       	pop	r0
 a42:	0f 90       	pop	r0
 a44:	0f 90       	pop	r0
 a46:	0f 90       	pop	r0
 a48:	0f 90       	pop	r0
 a4a:	cf 91       	pop	r28
 a4c:	df 91       	pop	r29
 a4e:	08 95       	ret

00000a50 <DIO_u8GetPinValue>:

u8  DIO_u8GetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value){
 a50:	df 93       	push	r29
 a52:	cf 93       	push	r28
 a54:	cd b7       	in	r28, 0x3d	; 61
 a56:	de b7       	in	r29, 0x3e	; 62
 a58:	27 97       	sbiw	r28, 0x07	; 7
 a5a:	0f b6       	in	r0, 0x3f	; 63
 a5c:	f8 94       	cli
 a5e:	de bf       	out	0x3e, r29	; 62
 a60:	0f be       	out	0x3f, r0	; 63
 a62:	cd bf       	out	0x3d, r28	; 61
 a64:	8a 83       	std	Y+2, r24	; 0x02
 a66:	6b 83       	std	Y+3, r22	; 0x03
 a68:	5d 83       	std	Y+5, r21	; 0x05
 a6a:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 a6c:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7)){
 a6e:	8c 81       	ldd	r24, Y+4	; 0x04
 a70:	9d 81       	ldd	r25, Y+5	; 0x05
 a72:	00 97       	sbiw	r24, 0x00	; 0
 a74:	c9 f1       	breq	.+114    	; 0xae8 <DIO_u8GetPinValue+0x98>
 a76:	8b 81       	ldd	r24, Y+3	; 0x03
 a78:	88 30       	cpi	r24, 0x08	; 8
 a7a:	b0 f5       	brcc	.+108    	; 0xae8 <DIO_u8GetPinValue+0x98>
		switch (Copy_u8Port){
 a7c:	8a 81       	ldd	r24, Y+2	; 0x02
 a7e:	28 2f       	mov	r18, r24
 a80:	30 e0       	ldi	r19, 0x00	; 0
 a82:	3f 83       	std	Y+7, r19	; 0x07
 a84:	2e 83       	std	Y+6, r18	; 0x06
 a86:	8e 81       	ldd	r24, Y+6	; 0x06
 a88:	9f 81       	ldd	r25, Y+7	; 0x07
 a8a:	81 30       	cpi	r24, 0x01	; 1
 a8c:	91 05       	cpc	r25, r1
 a8e:	d1 f0       	breq	.+52     	; 0xac4 <DIO_u8GetPinValue+0x74>
 a90:	2e 81       	ldd	r18, Y+6	; 0x06
 a92:	3f 81       	ldd	r19, Y+7	; 0x07
 a94:	22 30       	cpi	r18, 0x02	; 2
 a96:	31 05       	cpc	r19, r1
 a98:	2c f4       	brge	.+10     	; 0xaa4 <DIO_u8GetPinValue+0x54>
 a9a:	8e 81       	ldd	r24, Y+6	; 0x06
 a9c:	9f 81       	ldd	r25, Y+7	; 0x07
 a9e:	00 97       	sbiw	r24, 0x00	; 0
 aa0:	61 f0       	breq	.+24     	; 0xaba <DIO_u8GetPinValue+0x6a>
 aa2:	1f c0       	rjmp	.+62     	; 0xae2 <DIO_u8GetPinValue+0x92>
 aa4:	2e 81       	ldd	r18, Y+6	; 0x06
 aa6:	3f 81       	ldd	r19, Y+7	; 0x07
 aa8:	22 30       	cpi	r18, 0x02	; 2
 aaa:	31 05       	cpc	r19, r1
 aac:	81 f0       	breq	.+32     	; 0xace <DIO_u8GetPinValue+0x7e>
 aae:	8e 81       	ldd	r24, Y+6	; 0x06
 ab0:	9f 81       	ldd	r25, Y+7	; 0x07
 ab2:	83 30       	cpi	r24, 0x03	; 3
 ab4:	91 05       	cpc	r25, r1
 ab6:	81 f0       	breq	.+32     	; 0xad8 <DIO_u8GetPinValue+0x88>
 ab8:	14 c0       	rjmp	.+40     	; 0xae2 <DIO_u8GetPinValue+0x92>
				  case DIO_u8PORTA: * Copy_pu8Value =Copy_u8Pin ;break;
 aba:	ec 81       	ldd	r30, Y+4	; 0x04
 abc:	fd 81       	ldd	r31, Y+5	; 0x05
 abe:	8b 81       	ldd	r24, Y+3	; 0x03
 ac0:	80 83       	st	Z, r24
 ac2:	14 c0       	rjmp	.+40     	; 0xaec <DIO_u8GetPinValue+0x9c>
				  case DIO_u8PORTB: * Copy_pu8Value =Copy_u8Pin ;break;
 ac4:	ec 81       	ldd	r30, Y+4	; 0x04
 ac6:	fd 81       	ldd	r31, Y+5	; 0x05
 ac8:	8b 81       	ldd	r24, Y+3	; 0x03
 aca:	80 83       	st	Z, r24
 acc:	0f c0       	rjmp	.+30     	; 0xaec <DIO_u8GetPinValue+0x9c>
				  case DIO_u8PORTC: * Copy_pu8Value =Copy_u8Pin ;break;
 ace:	ec 81       	ldd	r30, Y+4	; 0x04
 ad0:	fd 81       	ldd	r31, Y+5	; 0x05
 ad2:	8b 81       	ldd	r24, Y+3	; 0x03
 ad4:	80 83       	st	Z, r24
 ad6:	0a c0       	rjmp	.+20     	; 0xaec <DIO_u8GetPinValue+0x9c>
				  case DIO_u8PORTD: * Copy_pu8Value =Copy_u8Pin ;break;
 ad8:	ec 81       	ldd	r30, Y+4	; 0x04
 ada:	fd 81       	ldd	r31, Y+5	; 0x05
 adc:	8b 81       	ldd	r24, Y+3	; 0x03
 ade:	80 83       	st	Z, r24
 ae0:	05 c0       	rjmp	.+10     	; 0xaec <DIO_u8GetPinValue+0x9c>
				  default: Local_u8ErrorState=1;
 ae2:	81 e0       	ldi	r24, 0x01	; 1
 ae4:	89 83       	std	Y+1, r24	; 0x01
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <DIO_u8GetPinValue+0x9c>
				  }
	}
	else{Local_u8ErrorState=1;}
 ae8:	81 e0       	ldi	r24, 0x01	; 1
 aea:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
 aec:	89 81       	ldd	r24, Y+1	; 0x01
}
 aee:	27 96       	adiw	r28, 0x07	; 7
 af0:	0f b6       	in	r0, 0x3f	; 63
 af2:	f8 94       	cli
 af4:	de bf       	out	0x3e, r29	; 62
 af6:	0f be       	out	0x3f, r0	; 63
 af8:	cd bf       	out	0x3d, r28	; 61
 afa:	cf 91       	pop	r28
 afc:	df 91       	pop	r29
 afe:	08 95       	ret

00000b00 <main>:
#include"EXTI_interface.h"
#include"GPIO_interface.h"
void INT0_ISR(void);
void INT1_ISR(void);
void INT2_ISR(void);
void main(void){
 b00:	df 93       	push	r29
 b02:	cf 93       	push	r28
 b04:	00 d0       	rcall	.+0      	; 0xb06 <main+0x6>
 b06:	cd b7       	in	r28, 0x3d	; 61
 b08:	de b7       	in	r29, 0x3e	; 62

   u8 *x=1;
 b0a:	81 e0       	ldi	r24, 0x01	; 1
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	9a 83       	std	Y+2, r25	; 0x02
 b10:	89 83       	std	Y+1, r24	; 0x01

   DIO_u8SetPinDirection (DIO_u8PORTB, DIO_u8PIN2, DIO_u8PIN_INPUT);
 b12:	81 e0       	ldi	r24, 0x01	; 1
 b14:	62 e0       	ldi	r22, 0x02	; 2
 b16:	40 e0       	ldi	r20, 0x00	; 0
 b18:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_u8SetPinDirection>
   		 	DIO_u8SetPinValue (DIO_u8PORTB, DIO_u8PIN2,DIO_u8PIN_HIGH);
 b1c:	81 e0       	ldi	r24, 0x01	; 1
 b1e:	62 e0       	ldi	r22, 0x02	; 2
 b20:	41 e0       	ldi	r20, 0x01	; 1
 b22:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <DIO_u8SetPinValue>

   		 		EXTI_voidInt2init(falling_edge);
 b26:	82 e0       	ldi	r24, 0x02	; 2
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <EXTI_voidInt2init>

   		 	    GIE_voidEnable();
 b2e:	0e 94 3e 00 	call	0x7c	; 0x7c <GIE_voidEnable>
   		 	EXTI_u8INT2SetCallBack(&INT2_ISR);
 b32:	8c ea       	ldi	r24, 0xAC	; 172
 b34:	95 e0       	ldi	r25, 0x05	; 5
 b36:	0e 94 d6 01 	call	0x3ac	; 0x3ac <EXTI_u8INT2SetCallBack>
 b3a:	ff cf       	rjmp	.-2      	; 0xb3a <main+0x3a>

00000b3c <INT0_ISR>:


	 }
}

void INT0_ISR(void){
 b3c:	df 93       	push	r29
 b3e:	cf 93       	push	r28
 b40:	cd b7       	in	r28, 0x3d	; 61
 b42:	de b7       	in	r29, 0x3e	; 62


}
 b44:	cf 91       	pop	r28
 b46:	df 91       	pop	r29
 b48:	08 95       	ret

00000b4a <INT1_ISR>:

void INT1_ISR(void)
{
 b4a:	df 93       	push	r29
 b4c:	cf 93       	push	r28
 b4e:	cd b7       	in	r28, 0x3d	; 61
 b50:	de b7       	in	r29, 0x3e	; 62

}
 b52:	cf 91       	pop	r28
 b54:	df 91       	pop	r29
 b56:	08 95       	ret

00000b58 <INT2_ISR>:

void INT2_ISR(void){
 b58:	df 93       	push	r29
 b5a:	cf 93       	push	r28
 b5c:	cd b7       	in	r28, 0x3d	; 61
 b5e:	de b7       	in	r29, 0x3e	; 62

	DIO_u8SetPinDirection (DIO_u8PORTD, DIO_u8PIN0, DIO_u8PIN_OUTPUT);
 b60:	83 e0       	ldi	r24, 0x03	; 3
 b62:	60 e0       	ldi	r22, 0x00	; 0
 b64:	41 e0       	ldi	r20, 0x01	; 1
 b66:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_u8SetPinDirection>
				    DIO_u8SetPinValue (DIO_u8PORTD, DIO_u8PIN0,DIO_u8PIN_HIGH);
 b6a:	83 e0       	ldi	r24, 0x03	; 3
 b6c:	60 e0       	ldi	r22, 0x00	; 0
 b6e:	41 e0       	ldi	r20, 0x01	; 1
 b70:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <DIO_u8SetPinValue>
}
 b74:	cf 91       	pop	r28
 b76:	df 91       	pop	r29
 b78:	08 95       	ret

00000b7a <_exit>:
 b7a:	f8 94       	cli

00000b7c <__stop_program>:
 b7c:	ff cf       	rjmp	.-2      	; 0xb7c <__stop_program>
