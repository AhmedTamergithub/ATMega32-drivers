
TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a40  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000f54  00000000  00000000  00000a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000a4f  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3c 03 	call	0x678	; 0x678 <main>
  64:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPinDirection>:
#include "STD_Types.h"
#include "GPIO_config.h"
#include "GPIO_private.h"
#include "GPIO_interface.h"

u8  DIO_u8SetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	28 97       	sbiw	r28, 0x08	; 8
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	8a 83       	std	Y+2, r24	; 0x02
  82:	6b 83       	std	Y+3, r22	; 0x03
  84:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
  86:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin<=DIO_u8PIN7 )
  88:	8b 81       	ldd	r24, Y+3	; 0x03
  8a:	88 30       	cpi	r24, 0x08	; 8
  8c:	08 f0       	brcs	.+2      	; 0x90 <DIO_u8SetPinDirection+0x24>
  8e:	f4 c0       	rjmp	.+488    	; 0x278 <DIO_u8SetPinDirection+0x20c>
	{
		if ( Copy_u8Direction==DIO_u8PIN_INPUT){
  90:	8c 81       	ldd	r24, Y+4	; 0x04
  92:	88 23       	and	r24, r24
  94:	09 f0       	breq	.+2      	; 0x98 <DIO_u8SetPinDirection+0x2c>
  96:	77 c0       	rjmp	.+238    	; 0x186 <DIO_u8SetPinDirection+0x11a>
			switch (Copy_u8Port)
  98:	8a 81       	ldd	r24, Y+2	; 0x02
  9a:	28 2f       	mov	r18, r24
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	38 87       	std	Y+8, r19	; 0x08
  a0:	2f 83       	std	Y+7, r18	; 0x07
  a2:	8f 81       	ldd	r24, Y+7	; 0x07
  a4:	98 85       	ldd	r25, Y+8	; 0x08
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	91 05       	cpc	r25, r1
  aa:	59 f1       	breq	.+86     	; 0x102 <DIO_u8SetPinDirection+0x96>
  ac:	2f 81       	ldd	r18, Y+7	; 0x07
  ae:	38 85       	ldd	r19, Y+8	; 0x08
  b0:	22 30       	cpi	r18, 0x02	; 2
  b2:	31 05       	cpc	r19, r1
  b4:	2c f4       	brge	.+10     	; 0xc0 <DIO_u8SetPinDirection+0x54>
  b6:	8f 81       	ldd	r24, Y+7	; 0x07
  b8:	98 85       	ldd	r25, Y+8	; 0x08
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	69 f0       	breq	.+26     	; 0xd8 <DIO_u8SetPinDirection+0x6c>
  be:	60 c0       	rjmp	.+192    	; 0x180 <DIO_u8SetPinDirection+0x114>
  c0:	2f 81       	ldd	r18, Y+7	; 0x07
  c2:	38 85       	ldd	r19, Y+8	; 0x08
  c4:	22 30       	cpi	r18, 0x02	; 2
  c6:	31 05       	cpc	r19, r1
  c8:	89 f1       	breq	.+98     	; 0x12c <DIO_u8SetPinDirection+0xc0>
  ca:	8f 81       	ldd	r24, Y+7	; 0x07
  cc:	98 85       	ldd	r25, Y+8	; 0x08
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	91 05       	cpc	r25, r1
  d2:	09 f4       	brne	.+2      	; 0xd6 <DIO_u8SetPinDirection+0x6a>
  d4:	40 c0       	rjmp	.+128    	; 0x156 <DIO_u8SetPinDirection+0xea>
  d6:	54 c0       	rjmp	.+168    	; 0x180 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: Clr_Bit(DDRA,Copy_u8Pin);break;
  d8:	aa e3       	ldi	r26, 0x3A	; 58
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	ea e3       	ldi	r30, 0x3A	; 58
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	48 2f       	mov	r20, r24
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 2e       	mov	r0, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_u8SetPinDirection+0x8a>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_u8SetPinDirection+0x86>
  fa:	80 95       	com	r24
  fc:	84 23       	and	r24, r20
  fe:	8c 93       	st	X, r24
 100:	bd c0       	rjmp	.+378    	; 0x27c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB:Clr_Bit(DDRB,Copy_u8Pin); break;
 102:	a7 e3       	ldi	r26, 0x37	; 55
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e7 e3       	ldi	r30, 0x37	; 55
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	48 2f       	mov	r20, r24
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	28 2f       	mov	r18, r24
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 2e       	mov	r0, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_u8SetPinDirection+0xb4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_u8SetPinDirection+0xb0>
 124:	80 95       	com	r24
 126:	84 23       	and	r24, r20
 128:	8c 93       	st	X, r24
 12a:	a8 c0       	rjmp	.+336    	; 0x27c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC:Clr_Bit(DDRC,Copy_u8Pin); break;
 12c:	a4 e3       	ldi	r26, 0x34	; 52
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e4 e3       	ldi	r30, 0x34	; 52
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	48 2f       	mov	r20, r24
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	28 2f       	mov	r18, r24
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 2e       	mov	r0, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_u8SetPinDirection+0xde>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_u8SetPinDirection+0xda>
 14e:	80 95       	com	r24
 150:	84 23       	and	r24, r20
 152:	8c 93       	st	X, r24
 154:	93 c0       	rjmp	.+294    	; 0x27c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD:Clr_Bit(DDRD,Copy_u8Pin); break;
 156:	a1 e3       	ldi	r26, 0x31	; 49
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e1 e3       	ldi	r30, 0x31	; 49
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	48 2f       	mov	r20, r24
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 2e       	mov	r0, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_u8SetPinDirection+0x108>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_u8SetPinDirection+0x104>
 178:	80 95       	com	r24
 17a:	84 23       	and	r24, r20
 17c:	8c 93       	st	X, r24
 17e:	7e c0       	rjmp	.+252    	; 0x27c <DIO_u8SetPinDirection+0x210>
			default:Local_u8ErrorState=1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	89 83       	std	Y+1, r24	; 0x01
 184:	7b c0       	rjmp	.+246    	; 0x27c <DIO_u8SetPinDirection+0x210>
			}
		}
			else if ( Copy_u8Direction==DIO_u8PIN_OUTPUT){
 186:	8c 81       	ldd	r24, Y+4	; 0x04
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	09 f0       	breq	.+2      	; 0x18e <DIO_u8SetPinDirection+0x122>
 18c:	72 c0       	rjmp	.+228    	; 0x272 <DIO_u8SetPinDirection+0x206>
				switch (Copy_u8Port)
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	3e 83       	std	Y+6, r19	; 0x06
 196:	2d 83       	std	Y+5, r18	; 0x05
 198:	8d 81       	ldd	r24, Y+5	; 0x05
 19a:	9e 81       	ldd	r25, Y+6	; 0x06
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 05       	cpc	r25, r1
 1a0:	49 f1       	breq	.+82     	; 0x1f4 <DIO_u8SetPinDirection+0x188>
 1a2:	2d 81       	ldd	r18, Y+5	; 0x05
 1a4:	3e 81       	ldd	r19, Y+6	; 0x06
 1a6:	22 30       	cpi	r18, 0x02	; 2
 1a8:	31 05       	cpc	r19, r1
 1aa:	2c f4       	brge	.+10     	; 0x1b6 <DIO_u8SetPinDirection+0x14a>
 1ac:	8d 81       	ldd	r24, Y+5	; 0x05
 1ae:	9e 81       	ldd	r25, Y+6	; 0x06
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	61 f0       	breq	.+24     	; 0x1cc <DIO_u8SetPinDirection+0x160>
 1b4:	5b c0       	rjmp	.+182    	; 0x26c <DIO_u8SetPinDirection+0x200>
 1b6:	2d 81       	ldd	r18, Y+5	; 0x05
 1b8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ba:	22 30       	cpi	r18, 0x02	; 2
 1bc:	31 05       	cpc	r19, r1
 1be:	71 f1       	breq	.+92     	; 0x21c <DIO_u8SetPinDirection+0x1b0>
 1c0:	8d 81       	ldd	r24, Y+5	; 0x05
 1c2:	9e 81       	ldd	r25, Y+6	; 0x06
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	91 05       	cpc	r25, r1
 1c8:	e9 f1       	breq	.+122    	; 0x244 <DIO_u8SetPinDirection+0x1d8>
 1ca:	50 c0       	rjmp	.+160    	; 0x26c <DIO_u8SetPinDirection+0x200>
				{
				case DIO_u8PORTA:Set_Bit(DDRA,Copy_u8Pin);break;
 1cc:	aa e3       	ldi	r26, 0x3A	; 58
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	ea e3       	ldi	r30, 0x3A	; 58
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	48 2f       	mov	r20, r24
 1d8:	8b 81       	ldd	r24, Y+3	; 0x03
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 2e       	mov	r0, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_u8SetPinDirection+0x17e>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_u8SetPinDirection+0x17a>
 1ee:	84 2b       	or	r24, r20
 1f0:	8c 93       	st	X, r24
 1f2:	44 c0       	rjmp	.+136    	; 0x27c <DIO_u8SetPinDirection+0x210>
				case DIO_u8PORTB:Set_Bit(DDRB,Copy_u8Pin); break;
 1f4:	a7 e3       	ldi	r26, 0x37	; 55
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e7 e3       	ldi	r30, 0x37	; 55
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 2e       	mov	r0, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_u8SetPinDirection+0x1a6>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_u8SetPinDirection+0x1a2>
 216:	84 2b       	or	r24, r20
 218:	8c 93       	st	X, r24
 21a:	30 c0       	rjmp	.+96     	; 0x27c <DIO_u8SetPinDirection+0x210>
				case DIO_u8PORTC:Set_Bit(DDRC,Copy_u8Pin); break;
 21c:	a4 e3       	ldi	r26, 0x34	; 52
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e4 e3       	ldi	r30, 0x34	; 52
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	48 2f       	mov	r20, r24
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 2e       	mov	r0, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_u8SetPinDirection+0x1ce>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	0a 94       	dec	r0
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_u8SetPinDirection+0x1ca>
 23e:	84 2b       	or	r24, r20
 240:	8c 93       	st	X, r24
 242:	1c c0       	rjmp	.+56     	; 0x27c <DIO_u8SetPinDirection+0x210>
				case DIO_u8PORTD:Set_Bit(DDRD,Copy_u8Pin); break;
 244:	a1 e3       	ldi	r26, 0x31	; 49
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e1 e3       	ldi	r30, 0x31	; 49
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	48 2f       	mov	r20, r24
 250:	8b 81       	ldd	r24, Y+3	; 0x03
 252:	28 2f       	mov	r18, r24
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_u8SetPinDirection+0x1f6>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_u8SetPinDirection+0x1f2>
 266:	84 2b       	or	r24, r20
 268:	8c 93       	st	X, r24
 26a:	08 c0       	rjmp	.+16     	; 0x27c <DIO_u8SetPinDirection+0x210>
				default:Local_u8ErrorState=1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	05 c0       	rjmp	.+10     	; 0x27c <DIO_u8SetPinDirection+0x210>
				}

			}
			else{ Local_u8ErrorState=1;}
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_u8SetPinDirection+0x210>


	}
	else {Local_u8ErrorState=1;}
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
 27c:	89 81       	ldd	r24, Y+1	; 0x01
}
 27e:	28 96       	adiw	r28, 0x08	; 8
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	cf 91       	pop	r28
 28c:	df 91       	pop	r29
 28e:	08 95       	ret

00000290 <DIO_u8SetPortDirection>:


u8  DIO_u8SetPortDirection (u8 Copy_u8Port, u8 Copy_u8Direction){
 290:	df 93       	push	r29
 292:	cf 93       	push	r28
 294:	00 d0       	rcall	.+0      	; 0x296 <DIO_u8SetPortDirection+0x6>
 296:	00 d0       	rcall	.+0      	; 0x298 <DIO_u8SetPortDirection+0x8>
 298:	0f 92       	push	r0
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	8a 83       	std	Y+2, r24	; 0x02
 2a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 2a2:	19 82       	std	Y+1, r1	; 0x01


	  switch (Copy_u8Port){
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	28 2f       	mov	r18, r24
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	3d 83       	std	Y+5, r19	; 0x05
 2ac:	2c 83       	std	Y+4, r18	; 0x04
 2ae:	8c 81       	ldd	r24, Y+4	; 0x04
 2b0:	9d 81       	ldd	r25, Y+5	; 0x05
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	91 05       	cpc	r25, r1
 2b6:	d1 f0       	breq	.+52     	; 0x2ec <DIO_u8SetPortDirection+0x5c>
 2b8:	2c 81       	ldd	r18, Y+4	; 0x04
 2ba:	3d 81       	ldd	r19, Y+5	; 0x05
 2bc:	22 30       	cpi	r18, 0x02	; 2
 2be:	31 05       	cpc	r19, r1
 2c0:	2c f4       	brge	.+10     	; 0x2cc <DIO_u8SetPortDirection+0x3c>
 2c2:	8c 81       	ldd	r24, Y+4	; 0x04
 2c4:	9d 81       	ldd	r25, Y+5	; 0x05
 2c6:	00 97       	sbiw	r24, 0x00	; 0
 2c8:	61 f0       	breq	.+24     	; 0x2e2 <DIO_u8SetPortDirection+0x52>
 2ca:	1e c0       	rjmp	.+60     	; 0x308 <DIO_u8SetPortDirection+0x78>
 2cc:	2c 81       	ldd	r18, Y+4	; 0x04
 2ce:	3d 81       	ldd	r19, Y+5	; 0x05
 2d0:	22 30       	cpi	r18, 0x02	; 2
 2d2:	31 05       	cpc	r19, r1
 2d4:	81 f0       	breq	.+32     	; 0x2f6 <DIO_u8SetPortDirection+0x66>
 2d6:	8c 81       	ldd	r24, Y+4	; 0x04
 2d8:	9d 81       	ldd	r25, Y+5	; 0x05
 2da:	83 30       	cpi	r24, 0x03	; 3
 2dc:	91 05       	cpc	r25, r1
 2de:	81 f0       	breq	.+32     	; 0x300 <DIO_u8SetPortDirection+0x70>
 2e0:	13 c0       	rjmp	.+38     	; 0x308 <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
 2e2:	ea e3       	ldi	r30, 0x3A	; 58
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	8b 81       	ldd	r24, Y+3	; 0x03
 2e8:	80 83       	st	Z, r24
 2ea:	0e c0       	rjmp	.+28     	; 0x308 <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
 2ec:	e7 e3       	ldi	r30, 0x37	; 55
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	80 83       	st	Z, r24
 2f4:	09 c0       	rjmp	.+18     	; 0x308 <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
 2f6:	e4 e3       	ldi	r30, 0x34	; 52
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	80 83       	st	Z, r24
 2fe:	04 c0       	rjmp	.+8      	; 0x308 <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
 300:	e1 e3       	ldi	r30, 0x31	; 49
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	8b 81       	ldd	r24, Y+3	; 0x03
 306:	80 83       	st	Z, r24
	  }




	return Local_u8ErrorState;
 308:	89 81       	ldd	r24, Y+1	; 0x01
}
 30a:	0f 90       	pop	r0
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	cf 91       	pop	r28
 316:	df 91       	pop	r29
 318:	08 95       	ret

0000031a <DIO_u8SetPinValue>:




u8  DIO_u8SetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
 31a:	df 93       	push	r29
 31c:	cf 93       	push	r28
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
 322:	28 97       	sbiw	r28, 0x08	; 8
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	f8 94       	cli
 328:	de bf       	out	0x3e, r29	; 62
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	cd bf       	out	0x3d, r28	; 61
 32e:	8a 83       	std	Y+2, r24	; 0x02
 330:	6b 83       	std	Y+3, r22	; 0x03
 332:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 334:	19 82       	std	Y+1, r1	; 0x01
	if ( Copy_u8Pin<=DIO_u8PIN7 )
 336:	8b 81       	ldd	r24, Y+3	; 0x03
 338:	88 30       	cpi	r24, 0x08	; 8
 33a:	08 f0       	brcs	.+2      	; 0x33e <DIO_u8SetPinValue+0x24>
 33c:	f4 c0       	rjmp	.+488    	; 0x526 <DIO_u8SetPinValue+0x20c>
	{
		if ( Copy_u8Value==DIO_u8PIN_LOW){
 33e:	8c 81       	ldd	r24, Y+4	; 0x04
 340:	88 23       	and	r24, r24
 342:	09 f0       	breq	.+2      	; 0x346 <DIO_u8SetPinValue+0x2c>
 344:	77 c0       	rjmp	.+238    	; 0x434 <DIO_u8SetPinValue+0x11a>
			switch (Copy_u8Port)
 346:	8a 81       	ldd	r24, Y+2	; 0x02
 348:	28 2f       	mov	r18, r24
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	38 87       	std	Y+8, r19	; 0x08
 34e:	2f 83       	std	Y+7, r18	; 0x07
 350:	8f 81       	ldd	r24, Y+7	; 0x07
 352:	98 85       	ldd	r25, Y+8	; 0x08
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	91 05       	cpc	r25, r1
 358:	59 f1       	breq	.+86     	; 0x3b0 <DIO_u8SetPinValue+0x96>
 35a:	2f 81       	ldd	r18, Y+7	; 0x07
 35c:	38 85       	ldd	r19, Y+8	; 0x08
 35e:	22 30       	cpi	r18, 0x02	; 2
 360:	31 05       	cpc	r19, r1
 362:	2c f4       	brge	.+10     	; 0x36e <DIO_u8SetPinValue+0x54>
 364:	8f 81       	ldd	r24, Y+7	; 0x07
 366:	98 85       	ldd	r25, Y+8	; 0x08
 368:	00 97       	sbiw	r24, 0x00	; 0
 36a:	69 f0       	breq	.+26     	; 0x386 <DIO_u8SetPinValue+0x6c>
 36c:	60 c0       	rjmp	.+192    	; 0x42e <DIO_u8SetPinValue+0x114>
 36e:	2f 81       	ldd	r18, Y+7	; 0x07
 370:	38 85       	ldd	r19, Y+8	; 0x08
 372:	22 30       	cpi	r18, 0x02	; 2
 374:	31 05       	cpc	r19, r1
 376:	89 f1       	breq	.+98     	; 0x3da <DIO_u8SetPinValue+0xc0>
 378:	8f 81       	ldd	r24, Y+7	; 0x07
 37a:	98 85       	ldd	r25, Y+8	; 0x08
 37c:	83 30       	cpi	r24, 0x03	; 3
 37e:	91 05       	cpc	r25, r1
 380:	09 f4       	brne	.+2      	; 0x384 <DIO_u8SetPinValue+0x6a>
 382:	40 c0       	rjmp	.+128    	; 0x404 <DIO_u8SetPinValue+0xea>
 384:	54 c0       	rjmp	.+168    	; 0x42e <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: Clr_Bit(PORTA,Copy_u8Pin);break;
 386:	ab e3       	ldi	r26, 0x3B	; 59
 388:	b0 e0       	ldi	r27, 0x00	; 0
 38a:	eb e3       	ldi	r30, 0x3B	; 59
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	48 2f       	mov	r20, r24
 392:	8b 81       	ldd	r24, Y+3	; 0x03
 394:	28 2f       	mov	r18, r24
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 2e       	mov	r0, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_u8SetPinValue+0x8a>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	0a 94       	dec	r0
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_u8SetPinValue+0x86>
 3a8:	80 95       	com	r24
 3aa:	84 23       	and	r24, r20
 3ac:	8c 93       	st	X, r24
 3ae:	bd c0       	rjmp	.+378    	; 0x52a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:Clr_Bit(PORTB,Copy_u8Pin); break;
 3b0:	a8 e3       	ldi	r26, 0x38	; 56
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	e8 e3       	ldi	r30, 0x38	; 56
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	48 2f       	mov	r20, r24
 3bc:	8b 81       	ldd	r24, Y+3	; 0x03
 3be:	28 2f       	mov	r18, r24
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 2e       	mov	r0, r18
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_u8SetPinValue+0xb4>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	0a 94       	dec	r0
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_u8SetPinValue+0xb0>
 3d2:	80 95       	com	r24
 3d4:	84 23       	and	r24, r20
 3d6:	8c 93       	st	X, r24
 3d8:	a8 c0       	rjmp	.+336    	; 0x52a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:Clr_Bit(PORTC,Copy_u8Pin); break;
 3da:	a5 e3       	ldi	r26, 0x35	; 53
 3dc:	b0 e0       	ldi	r27, 0x00	; 0
 3de:	e5 e3       	ldi	r30, 0x35	; 53
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	48 2f       	mov	r20, r24
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	28 2f       	mov	r18, r24
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 2e       	mov	r0, r18
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_u8SetPinValue+0xde>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	0a 94       	dec	r0
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_u8SetPinValue+0xda>
 3fc:	80 95       	com	r24
 3fe:	84 23       	and	r24, r20
 400:	8c 93       	st	X, r24
 402:	93 c0       	rjmp	.+294    	; 0x52a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:Clr_Bit(PORTD,Copy_u8Pin); break;
 404:	a2 e3       	ldi	r26, 0x32	; 50
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	e2 e3       	ldi	r30, 0x32	; 50
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	48 2f       	mov	r20, r24
 410:	8b 81       	ldd	r24, Y+3	; 0x03
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 2e       	mov	r0, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_u8SetPinValue+0x108>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	0a 94       	dec	r0
 424:	e2 f7       	brpl	.-8      	; 0x41e <DIO_u8SetPinValue+0x104>
 426:	80 95       	com	r24
 428:	84 23       	and	r24, r20
 42a:	8c 93       	st	X, r24
 42c:	7e c0       	rjmp	.+252    	; 0x52a <DIO_u8SetPinValue+0x210>
			default:Local_u8ErrorState=1;
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	89 83       	std	Y+1, r24	; 0x01
 432:	7b c0       	rjmp	.+246    	; 0x52a <DIO_u8SetPinValue+0x210>
			}
		}
		else if ( Copy_u8Value==DIO_u8PIN_HIGH){
 434:	8c 81       	ldd	r24, Y+4	; 0x04
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	09 f0       	breq	.+2      	; 0x43c <DIO_u8SetPinValue+0x122>
 43a:	72 c0       	rjmp	.+228    	; 0x520 <DIO_u8SetPinValue+0x206>
			switch (Copy_u8Port)
 43c:	8a 81       	ldd	r24, Y+2	; 0x02
 43e:	28 2f       	mov	r18, r24
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	3e 83       	std	Y+6, r19	; 0x06
 444:	2d 83       	std	Y+5, r18	; 0x05
 446:	8d 81       	ldd	r24, Y+5	; 0x05
 448:	9e 81       	ldd	r25, Y+6	; 0x06
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	91 05       	cpc	r25, r1
 44e:	49 f1       	breq	.+82     	; 0x4a2 <DIO_u8SetPinValue+0x188>
 450:	2d 81       	ldd	r18, Y+5	; 0x05
 452:	3e 81       	ldd	r19, Y+6	; 0x06
 454:	22 30       	cpi	r18, 0x02	; 2
 456:	31 05       	cpc	r19, r1
 458:	2c f4       	brge	.+10     	; 0x464 <DIO_u8SetPinValue+0x14a>
 45a:	8d 81       	ldd	r24, Y+5	; 0x05
 45c:	9e 81       	ldd	r25, Y+6	; 0x06
 45e:	00 97       	sbiw	r24, 0x00	; 0
 460:	61 f0       	breq	.+24     	; 0x47a <DIO_u8SetPinValue+0x160>
 462:	5b c0       	rjmp	.+182    	; 0x51a <DIO_u8SetPinValue+0x200>
 464:	2d 81       	ldd	r18, Y+5	; 0x05
 466:	3e 81       	ldd	r19, Y+6	; 0x06
 468:	22 30       	cpi	r18, 0x02	; 2
 46a:	31 05       	cpc	r19, r1
 46c:	71 f1       	breq	.+92     	; 0x4ca <DIO_u8SetPinValue+0x1b0>
 46e:	8d 81       	ldd	r24, Y+5	; 0x05
 470:	9e 81       	ldd	r25, Y+6	; 0x06
 472:	83 30       	cpi	r24, 0x03	; 3
 474:	91 05       	cpc	r25, r1
 476:	e9 f1       	breq	.+122    	; 0x4f2 <DIO_u8SetPinValue+0x1d8>
 478:	50 c0       	rjmp	.+160    	; 0x51a <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA:Set_Bit(PORTA,Copy_u8Pin);break;
 47a:	ab e3       	ldi	r26, 0x3B	; 59
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	eb e3       	ldi	r30, 0x3B	; 59
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	48 2f       	mov	r20, r24
 486:	8b 81       	ldd	r24, Y+3	; 0x03
 488:	28 2f       	mov	r18, r24
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 2e       	mov	r0, r18
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_u8SetPinValue+0x17e>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	0a 94       	dec	r0
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_u8SetPinValue+0x17a>
 49c:	84 2b       	or	r24, r20
 49e:	8c 93       	st	X, r24
 4a0:	44 c0       	rjmp	.+136    	; 0x52a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:Set_Bit(PORTB,Copy_u8Pin); break;
 4a2:	a8 e3       	ldi	r26, 0x38	; 56
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	e8 e3       	ldi	r30, 0x38	; 56
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	48 2f       	mov	r20, r24
 4ae:	8b 81       	ldd	r24, Y+3	; 0x03
 4b0:	28 2f       	mov	r18, r24
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 2e       	mov	r0, r18
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_u8SetPinValue+0x1a6>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_u8SetPinValue+0x1a2>
 4c4:	84 2b       	or	r24, r20
 4c6:	8c 93       	st	X, r24
 4c8:	30 c0       	rjmp	.+96     	; 0x52a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:Set_Bit(PORTC,Copy_u8Pin); break;
 4ca:	a5 e3       	ldi	r26, 0x35	; 53
 4cc:	b0 e0       	ldi	r27, 0x00	; 0
 4ce:	e5 e3       	ldi	r30, 0x35	; 53
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	48 2f       	mov	r20, r24
 4d6:	8b 81       	ldd	r24, Y+3	; 0x03
 4d8:	28 2f       	mov	r18, r24
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 2e       	mov	r0, r18
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_u8SetPinValue+0x1ce>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	0a 94       	dec	r0
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_u8SetPinValue+0x1ca>
 4ec:	84 2b       	or	r24, r20
 4ee:	8c 93       	st	X, r24
 4f0:	1c c0       	rjmp	.+56     	; 0x52a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:Set_Bit(PORTD,Copy_u8Pin); break;
 4f2:	a2 e3       	ldi	r26, 0x32	; 50
 4f4:	b0 e0       	ldi	r27, 0x00	; 0
 4f6:	e2 e3       	ldi	r30, 0x32	; 50
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	80 81       	ld	r24, Z
 4fc:	48 2f       	mov	r20, r24
 4fe:	8b 81       	ldd	r24, Y+3	; 0x03
 500:	28 2f       	mov	r18, r24
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 2e       	mov	r0, r18
 50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_u8SetPinValue+0x1f6>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	0a 94       	dec	r0
 512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_u8SetPinValue+0x1f2>
 514:	84 2b       	or	r24, r20
 516:	8c 93       	st	X, r24
 518:	08 c0       	rjmp	.+16     	; 0x52a <DIO_u8SetPinValue+0x210>
			default:Local_u8ErrorState=1;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	89 83       	std	Y+1, r24	; 0x01
 51e:	05 c0       	rjmp	.+10     	; 0x52a <DIO_u8SetPinValue+0x210>
			}

		}
		else{ Local_u8ErrorState=1;}
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	89 83       	std	Y+1, r24	; 0x01
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_u8SetPinValue+0x210>


	}

	else {Local_u8ErrorState=1;}
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
 52a:	89 81       	ldd	r24, Y+1	; 0x01
}
 52c:	28 96       	adiw	r28, 0x08	; 8
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	f8 94       	cli
 532:	de bf       	out	0x3e, r29	; 62
 534:	0f be       	out	0x3f, r0	; 63
 536:	cd bf       	out	0x3d, r28	; 61
 538:	cf 91       	pop	r28
 53a:	df 91       	pop	r29
 53c:	08 95       	ret

0000053e <DIO_u8SetPortValue>:





u8  DIO_u8SetPortValue (u8 Copy_u8Port, u8 Copy_u8Value){
 53e:	df 93       	push	r29
 540:	cf 93       	push	r28
 542:	00 d0       	rcall	.+0      	; 0x544 <DIO_u8SetPortValue+0x6>
 544:	00 d0       	rcall	.+0      	; 0x546 <DIO_u8SetPortValue+0x8>
 546:	0f 92       	push	r0
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	8a 83       	std	Y+2, r24	; 0x02
 54e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 550:	19 82       	std	Y+1, r1	; 0x01


	switch (Copy_u8Port){
 552:	8a 81       	ldd	r24, Y+2	; 0x02
 554:	28 2f       	mov	r18, r24
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	3d 83       	std	Y+5, r19	; 0x05
 55a:	2c 83       	std	Y+4, r18	; 0x04
 55c:	8c 81       	ldd	r24, Y+4	; 0x04
 55e:	9d 81       	ldd	r25, Y+5	; 0x05
 560:	81 30       	cpi	r24, 0x01	; 1
 562:	91 05       	cpc	r25, r1
 564:	d1 f0       	breq	.+52     	; 0x59a <DIO_u8SetPortValue+0x5c>
 566:	2c 81       	ldd	r18, Y+4	; 0x04
 568:	3d 81       	ldd	r19, Y+5	; 0x05
 56a:	22 30       	cpi	r18, 0x02	; 2
 56c:	31 05       	cpc	r19, r1
 56e:	2c f4       	brge	.+10     	; 0x57a <DIO_u8SetPortValue+0x3c>
 570:	8c 81       	ldd	r24, Y+4	; 0x04
 572:	9d 81       	ldd	r25, Y+5	; 0x05
 574:	00 97       	sbiw	r24, 0x00	; 0
 576:	61 f0       	breq	.+24     	; 0x590 <DIO_u8SetPortValue+0x52>
 578:	1e c0       	rjmp	.+60     	; 0x5b6 <DIO_u8SetPortValue+0x78>
 57a:	2c 81       	ldd	r18, Y+4	; 0x04
 57c:	3d 81       	ldd	r19, Y+5	; 0x05
 57e:	22 30       	cpi	r18, 0x02	; 2
 580:	31 05       	cpc	r19, r1
 582:	81 f0       	breq	.+32     	; 0x5a4 <DIO_u8SetPortValue+0x66>
 584:	8c 81       	ldd	r24, Y+4	; 0x04
 586:	9d 81       	ldd	r25, Y+5	; 0x05
 588:	83 30       	cpi	r24, 0x03	; 3
 58a:	91 05       	cpc	r25, r1
 58c:	81 f0       	breq	.+32     	; 0x5ae <DIO_u8SetPortValue+0x70>
 58e:	13 c0       	rjmp	.+38     	; 0x5b6 <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTA: PORTA=Copy_u8Value;break;
 590:	eb e3       	ldi	r30, 0x3B	; 59
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	80 83       	st	Z, r24
 598:	0e c0       	rjmp	.+28     	; 0x5b6 <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTB: PORTB=Copy_u8Value;break;
 59a:	e8 e3       	ldi	r30, 0x38	; 56
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	8b 81       	ldd	r24, Y+3	; 0x03
 5a0:	80 83       	st	Z, r24
 5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTC: PORTC=Copy_u8Value;break;
 5a4:	e5 e3       	ldi	r30, 0x35	; 53
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	8b 81       	ldd	r24, Y+3	; 0x03
 5aa:	80 83       	st	Z, r24
 5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTD: PORTD=Copy_u8Value;break;
 5ae:	e2 e3       	ldi	r30, 0x32	; 50
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	8b 81       	ldd	r24, Y+3	; 0x03
 5b4:	80 83       	st	Z, r24

		  }

	return Local_u8ErrorState;
 5b6:	89 81       	ldd	r24, Y+1	; 0x01
}
 5b8:	0f 90       	pop	r0
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	cf 91       	pop	r28
 5c4:	df 91       	pop	r29
 5c6:	08 95       	ret

000005c8 <DIO_u8GetPinValue>:

u8  DIO_u8GetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value){
 5c8:	df 93       	push	r29
 5ca:	cf 93       	push	r28
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
 5d0:	27 97       	sbiw	r28, 0x07	; 7
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	f8 94       	cli
 5d6:	de bf       	out	0x3e, r29	; 62
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	cd bf       	out	0x3d, r28	; 61
 5dc:	8a 83       	std	Y+2, r24	; 0x02
 5de:	6b 83       	std	Y+3, r22	; 0x03
 5e0:	5d 83       	std	Y+5, r21	; 0x05
 5e2:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 5e4:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7)){
 5e6:	8c 81       	ldd	r24, Y+4	; 0x04
 5e8:	9d 81       	ldd	r25, Y+5	; 0x05
 5ea:	00 97       	sbiw	r24, 0x00	; 0
 5ec:	c9 f1       	breq	.+114    	; 0x660 <DIO_u8GetPinValue+0x98>
 5ee:	8b 81       	ldd	r24, Y+3	; 0x03
 5f0:	88 30       	cpi	r24, 0x08	; 8
 5f2:	b0 f5       	brcc	.+108    	; 0x660 <DIO_u8GetPinValue+0x98>
		switch (Copy_u8Port){
 5f4:	8a 81       	ldd	r24, Y+2	; 0x02
 5f6:	28 2f       	mov	r18, r24
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	3f 83       	std	Y+7, r19	; 0x07
 5fc:	2e 83       	std	Y+6, r18	; 0x06
 5fe:	8e 81       	ldd	r24, Y+6	; 0x06
 600:	9f 81       	ldd	r25, Y+7	; 0x07
 602:	81 30       	cpi	r24, 0x01	; 1
 604:	91 05       	cpc	r25, r1
 606:	d1 f0       	breq	.+52     	; 0x63c <DIO_u8GetPinValue+0x74>
 608:	2e 81       	ldd	r18, Y+6	; 0x06
 60a:	3f 81       	ldd	r19, Y+7	; 0x07
 60c:	22 30       	cpi	r18, 0x02	; 2
 60e:	31 05       	cpc	r19, r1
 610:	2c f4       	brge	.+10     	; 0x61c <DIO_u8GetPinValue+0x54>
 612:	8e 81       	ldd	r24, Y+6	; 0x06
 614:	9f 81       	ldd	r25, Y+7	; 0x07
 616:	00 97       	sbiw	r24, 0x00	; 0
 618:	61 f0       	breq	.+24     	; 0x632 <DIO_u8GetPinValue+0x6a>
 61a:	1f c0       	rjmp	.+62     	; 0x65a <DIO_u8GetPinValue+0x92>
 61c:	2e 81       	ldd	r18, Y+6	; 0x06
 61e:	3f 81       	ldd	r19, Y+7	; 0x07
 620:	22 30       	cpi	r18, 0x02	; 2
 622:	31 05       	cpc	r19, r1
 624:	81 f0       	breq	.+32     	; 0x646 <DIO_u8GetPinValue+0x7e>
 626:	8e 81       	ldd	r24, Y+6	; 0x06
 628:	9f 81       	ldd	r25, Y+7	; 0x07
 62a:	83 30       	cpi	r24, 0x03	; 3
 62c:	91 05       	cpc	r25, r1
 62e:	81 f0       	breq	.+32     	; 0x650 <DIO_u8GetPinValue+0x88>
 630:	14 c0       	rjmp	.+40     	; 0x65a <DIO_u8GetPinValue+0x92>
				  case DIO_u8PORTA: * Copy_pu8Value =Copy_u8Pin ;break;
 632:	ec 81       	ldd	r30, Y+4	; 0x04
 634:	fd 81       	ldd	r31, Y+5	; 0x05
 636:	8b 81       	ldd	r24, Y+3	; 0x03
 638:	80 83       	st	Z, r24
 63a:	14 c0       	rjmp	.+40     	; 0x664 <DIO_u8GetPinValue+0x9c>
				  case DIO_u8PORTB: * Copy_pu8Value =Copy_u8Pin ;break;
 63c:	ec 81       	ldd	r30, Y+4	; 0x04
 63e:	fd 81       	ldd	r31, Y+5	; 0x05
 640:	8b 81       	ldd	r24, Y+3	; 0x03
 642:	80 83       	st	Z, r24
 644:	0f c0       	rjmp	.+30     	; 0x664 <DIO_u8GetPinValue+0x9c>
				  case DIO_u8PORTC: * Copy_pu8Value =Copy_u8Pin ;break;
 646:	ec 81       	ldd	r30, Y+4	; 0x04
 648:	fd 81       	ldd	r31, Y+5	; 0x05
 64a:	8b 81       	ldd	r24, Y+3	; 0x03
 64c:	80 83       	st	Z, r24
 64e:	0a c0       	rjmp	.+20     	; 0x664 <DIO_u8GetPinValue+0x9c>
				  case DIO_u8PORTD: * Copy_pu8Value =Copy_u8Pin ;break;
 650:	ec 81       	ldd	r30, Y+4	; 0x04
 652:	fd 81       	ldd	r31, Y+5	; 0x05
 654:	8b 81       	ldd	r24, Y+3	; 0x03
 656:	80 83       	st	Z, r24
 658:	05 c0       	rjmp	.+10     	; 0x664 <DIO_u8GetPinValue+0x9c>
				  default: Local_u8ErrorState=1;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	89 83       	std	Y+1, r24	; 0x01
 65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_u8GetPinValue+0x9c>
				  }
	}
	else{Local_u8ErrorState=1;}
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
 664:	89 81       	ldd	r24, Y+1	; 0x01
}
 666:	27 96       	adiw	r28, 0x07	; 7
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	f8 94       	cli
 66c:	de bf       	out	0x3e, r29	; 62
 66e:	0f be       	out	0x3f, r0	; 63
 670:	cd bf       	out	0x3d, r28	; 61
 672:	cf 91       	pop	r28
 674:	df 91       	pop	r29
 676:	08 95       	ret

00000678 <main>:
#include "BIT_Calc.h"
#include "STD_Types.h"
#include"TWI_interface.h"
#include "GPIO_interface.h"
#include <util/delay.h>
void main(void){
 678:	df 93       	push	r29
 67a:	cf 93       	push	r28
 67c:	cd b7       	in	r28, 0x3d	; 61
 67e:	de b7       	in	r29, 0x3e	; 62
	TWI_voidMasterInit(0);
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	0e 94 4c 03 	call	0x698	; 0x698 <TWI_voidMasterInit>
	TWI_SendStartCondition();
 686:	0e 94 90 03 	call	0x720	; 0x720 <TWI_SendStartCondition>
	TWI_SendRSlaveAddressWithWrite(40);//40
 68a:	88 e2       	ldi	r24, 0x28	; 40
 68c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <TWI_SendRSlaveAddressWithWrite>
	TWI_MasterWriteDataByte(0);
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	0e 94 84 04 	call	0x908	; 0x908 <TWI_MasterWriteDataByte>
 696:	ff cf       	rjmp	.-2      	; 0x696 <main+0x1e>

00000698 <TWI_voidMasterInit>:
#include"TWI_config.h"
#include"TWI_private.h"



void TWI_voidMasterInit(u8 Copy_u8SlaveAddress){
 698:	df 93       	push	r29
 69a:	cf 93       	push	r28
 69c:	0f 92       	push	r0
 69e:	cd b7       	in	r28, 0x3d	; 61
 6a0:	de b7       	in	r29, 0x3e	; 62
 6a2:	89 83       	std	Y+1, r24	; 0x01

	//Enable TWI
	Set_Bit(TWCR,TWCR_TWEN);
 6a4:	a6 e5       	ldi	r26, 0x56	; 86
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	e6 e5       	ldi	r30, 0x56	; 86
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	84 60       	ori	r24, 0x04	; 4
 6b0:	8c 93       	st	X, r24

	//Set TWBR TO 2
	TWBR=2;
 6b2:	e0 e2       	ldi	r30, 0x20	; 32
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	82 e0       	ldi	r24, 0x02	; 2
 6b8:	80 83       	st	Z, r24
	//Set Clock Frequency to 400kbps
	Clr_Bit(TWSR,TWSR_TWPS1);
 6ba:	a1 e2       	ldi	r26, 0x21	; 33
 6bc:	b0 e0       	ldi	r27, 0x00	; 0
 6be:	e1 e2       	ldi	r30, 0x21	; 33
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	80 81       	ld	r24, Z
 6c4:	8d 7f       	andi	r24, 0xFD	; 253
 6c6:	8c 93       	st	X, r24
	Clr_Bit(TWSR,TWSR_TWPS0);
 6c8:	a1 e2       	ldi	r26, 0x21	; 33
 6ca:	b0 e0       	ldi	r27, 0x00	; 0
 6cc:	e1 e2       	ldi	r30, 0x21	; 33
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	80 81       	ld	r24, Z
 6d2:	8e 7f       	andi	r24, 0xFE	; 254
 6d4:	8c 93       	st	X, r24
	// Enable Acknowledge Bit
	//Set_Bit(TWCR,TWCR_TWEA);
	//initialize address
	if(Copy_u8SlaveAddress!=0){
 6d6:	89 81       	ldd	r24, Y+1	; 0x01
 6d8:	88 23       	and	r24, r24
 6da:	29 f0       	breq	.+10     	; 0x6e6 <TWI_voidMasterInit+0x4e>
		TWAR=Copy_u8SlaveAddress<<1;
 6dc:	e2 e2       	ldi	r30, 0x22	; 34
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	89 81       	ldd	r24, Y+1	; 0x01
 6e2:	88 0f       	add	r24, r24
 6e4:	80 83       	st	Z, r24
	}
}
 6e6:	0f 90       	pop	r0
 6e8:	cf 91       	pop	r28
 6ea:	df 91       	pop	r29
 6ec:	08 95       	ret

000006ee <TWI_voidSlaveInit>:

void TWI_voidSlaveInit(u8 Copy_u8SlaveAddress){
 6ee:	df 93       	push	r29
 6f0:	cf 93       	push	r28
 6f2:	0f 92       	push	r0
 6f4:	cd b7       	in	r28, 0x3d	; 61
 6f6:	de b7       	in	r29, 0x3e	; 62
 6f8:	89 83       	std	Y+1, r24	; 0x01
	//initialize address
	if(Copy_u8SlaveAddress!=0){
 6fa:	89 81       	ldd	r24, Y+1	; 0x01
 6fc:	88 23       	and	r24, r24
 6fe:	29 f0       	breq	.+10     	; 0x70a <TWI_voidSlaveInit+0x1c>
		TWAR=Copy_u8SlaveAddress<<1;
 700:	e2 e2       	ldi	r30, 0x22	; 34
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	89 81       	ldd	r24, Y+1	; 0x01
 706:	88 0f       	add	r24, r24
 708:	80 83       	st	Z, r24
	}


	//Enable TWI
	Set_Bit(TWCR,TWCR_TWEN);
 70a:	a6 e5       	ldi	r26, 0x56	; 86
 70c:	b0 e0       	ldi	r27, 0x00	; 0
 70e:	e6 e5       	ldi	r30, 0x56	; 86
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 81       	ld	r24, Z
 714:	84 60       	ori	r24, 0x04	; 4
 716:	8c 93       	st	X, r24

	// Enable Acknowledge Bit
	//Set_Bit(TWCR,TWCR_TWEA);
}
 718:	0f 90       	pop	r0
 71a:	cf 91       	pop	r28
 71c:	df 91       	pop	r29
 71e:	08 95       	ret

00000720 <TWI_SendStartCondition>:


TWI_ErrorStatus TWI_SendStartCondition(void){
 720:	df 93       	push	r29
 722:	cf 93       	push	r28
 724:	00 d0       	rcall	.+0      	; 0x726 <TWI_SendStartCondition+0x6>
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62

	TWI_ErrorStatus Local_ErrStatus=NoError;
 72a:	19 82       	std	Y+1, r1	; 0x01

	//Enable Start Condition
	Set_Bit(TWCR,TWCR_TWSTA);
 72c:	a6 e5       	ldi	r26, 0x56	; 86
 72e:	b0 e0       	ldi	r27, 0x00	; 0
 730:	e6 e5       	ldi	r30, 0x56	; 86
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	80 81       	ld	r24, Z
 736:	80 62       	ori	r24, 0x20	; 32
 738:	8c 93       	st	X, r24

	//Enable TWI
	Set_Bit(TWCR,TWCR_TWEN);
 73a:	a6 e5       	ldi	r26, 0x56	; 86
 73c:	b0 e0       	ldi	r27, 0x00	; 0
 73e:	e6 e5       	ldi	r30, 0x56	; 86
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	80 81       	ld	r24, Z
 744:	84 60       	ori	r24, 0x04	; 4
 746:	8c 93       	st	X, r24

	//Clear Flag of TWINT by writing 1 in it
	Set_Bit(TWCR,TWCR_TWINT);
 748:	a6 e5       	ldi	r26, 0x56	; 86
 74a:	b0 e0       	ldi	r27, 0x00	; 0
 74c:	e6 e5       	ldi	r30, 0x56	; 86
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	80 68       	ori	r24, 0x80	; 128
 754:	8c 93       	st	X, r24

	//TWI Check that HW raised the TWINT FLAG indicating start condition is sent
	while(Get_Bit(TWCR, TWCR_TWINT )!=1);
 756:	e6 e5       	ldi	r30, 0x56	; 86
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	88 1f       	adc	r24, r24
 75e:	88 27       	eor	r24, r24
 760:	88 1f       	adc	r24, r24
 762:	81 30       	cpi	r24, 0x01	; 1
 764:	c1 f7       	brne	.-16     	; 0x756 <TWI_SendStartCondition+0x36>

	//Checking status of bus after sending start condition
	if ((TWSR & 0xF8) != START_ACK){
 766:	e1 e2       	ldi	r30, 0x21	; 33
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 81       	ld	r24, Z
 76c:	88 2f       	mov	r24, r24
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	88 7f       	andi	r24, 0xF8	; 248
 772:	90 70       	andi	r25, 0x00	; 0
 774:	88 30       	cpi	r24, 0x08	; 8
 776:	91 05       	cpc	r25, r1
 778:	19 f0       	breq	.+6      	; 0x780 <TWI_SendStartCondition+0x60>
		return  Start_Error ;
 77a:	84 e0       	ldi	r24, 0x04	; 4
 77c:	8a 83       	std	Y+2, r24	; 0x02
 77e:	01 c0       	rjmp	.+2      	; 0x782 <TWI_SendStartCondition+0x62>
	}
	else {return NoError;}
 780:	1a 82       	std	Y+2, r1	; 0x02
 782:	8a 81       	ldd	r24, Y+2	; 0x02
	//Ask in main.c if return equal to Send Start Condition then call send slave address with write(VERY IMPORTANT)
	//and according to R/W bit Call Slave_address_read or slave_address_write function
}
 784:	0f 90       	pop	r0
 786:	0f 90       	pop	r0
 788:	cf 91       	pop	r28
 78a:	df 91       	pop	r29
 78c:	08 95       	ret

0000078e <TWI_SendRepeatedStart>:





TWI_ErrorStatus TWI_SendRepeatedStart(void){
 78e:	df 93       	push	r29
 790:	cf 93       	push	r28
 792:	00 d0       	rcall	.+0      	; 0x794 <TWI_SendRepeatedStart+0x6>
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus Local_ErrStatus=NoError;
 798:	19 82       	std	Y+1, r1	; 0x01

	//Enable Start Condition
	Set_Bit(TWCR,TWCR_TWSTA);
 79a:	a6 e5       	ldi	r26, 0x56	; 86
 79c:	b0 e0       	ldi	r27, 0x00	; 0
 79e:	e6 e5       	ldi	r30, 0x56	; 86
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	80 62       	ori	r24, 0x20	; 32
 7a6:	8c 93       	st	X, r24

	//Enable TWI
	Set_Bit(TWCR,TWCR_TWEN);
 7a8:	a6 e5       	ldi	r26, 0x56	; 86
 7aa:	b0 e0       	ldi	r27, 0x00	; 0
 7ac:	e6 e5       	ldi	r30, 0x56	; 86
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	80 81       	ld	r24, Z
 7b2:	84 60       	ori	r24, 0x04	; 4
 7b4:	8c 93       	st	X, r24

	//Clear Flag of TWINT by writing 1 in it
	Set_Bit(TWCR,TWCR_TWINT);
 7b6:	a6 e5       	ldi	r26, 0x56	; 86
 7b8:	b0 e0       	ldi	r27, 0x00	; 0
 7ba:	e6 e5       	ldi	r30, 0x56	; 86
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	80 81       	ld	r24, Z
 7c0:	80 68       	ori	r24, 0x80	; 128
 7c2:	8c 93       	st	X, r24

	//TWI Check that HW raised the TWINT FLAG indicating start condition is sent
	while(Get_Bit(TWCR, TWCR_TWINT )!=1);
 7c4:	e6 e5       	ldi	r30, 0x56	; 86
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	88 1f       	adc	r24, r24
 7cc:	88 27       	eor	r24, r24
 7ce:	88 1f       	adc	r24, r24
 7d0:	81 30       	cpi	r24, 0x01	; 1
 7d2:	c1 f7       	brne	.-16     	; 0x7c4 <TWI_SendRepeatedStart+0x36>

	//Checking status of bus after sending start condition
	if ((TWSR & 0xF8) != REP_START_ACK){
 7d4:	e1 e2       	ldi	r30, 0x21	; 33
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	80 81       	ld	r24, Z
 7da:	88 2f       	mov	r24, r24
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	88 7f       	andi	r24, 0xF8	; 248
 7e0:	90 70       	andi	r25, 0x00	; 0
 7e2:	80 31       	cpi	r24, 0x10	; 16
 7e4:	91 05       	cpc	r25, r1
 7e6:	19 f0       	breq	.+6      	; 0x7ee <TWI_SendRepeatedStart+0x60>
		return  Start_Error ;
 7e8:	84 e0       	ldi	r24, 0x04	; 4
 7ea:	8a 83       	std	Y+2, r24	; 0x02
 7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <TWI_SendRepeatedStart+0x62>
	}
	else {return NoError;}
 7ee:	1a 82       	std	Y+2, r1	; 0x02
 7f0:	8a 81       	ldd	r24, Y+2	; 0x02
}
 7f2:	0f 90       	pop	r0
 7f4:	0f 90       	pop	r0
 7f6:	cf 91       	pop	r28
 7f8:	df 91       	pop	r29
 7fa:	08 95       	ret

000007fc <TWI_SendRSlaveAddressWithWrite>:




TWI_ErrorStatus TWI_SendRSlaveAddressWithWrite(u8 Copy_u8SlaveAddress){
 7fc:	df 93       	push	r29
 7fe:	cf 93       	push	r28
 800:	00 d0       	rcall	.+0      	; 0x802 <TWI_SendRSlaveAddressWithWrite+0x6>
 802:	cd b7       	in	r28, 0x3d	; 61
 804:	de b7       	in	r29, 0x3e	; 62
 806:	89 83       	std	Y+1, r24	; 0x01
	//TWI_ErrorStatus Local_ErrStatus=NoError;
	//clear TWSTA Flag by writing zero in it
	Clr_Bit(TWCR,TWCR_TWSTA);
 808:	a6 e5       	ldi	r26, 0x56	; 86
 80a:	b0 e0       	ldi	r27, 0x00	; 0
 80c:	e6 e5       	ldi	r30, 0x56	; 86
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	80 81       	ld	r24, Z
 812:	8f 7d       	andi	r24, 0xDF	; 223
 814:	8c 93       	st	X, r24
	//Set Slave Address in 7 MOST SIGNIFICANT BITS Data Register
	TWDR=Copy_u8SlaveAddress<<1;
 816:	e3 e2       	ldi	r30, 0x23	; 35
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	89 81       	ldd	r24, Y+1	; 0x01
 81c:	88 0f       	add	r24, r24
 81e:	80 83       	st	Z, r24
	Clr_Bit(TWDR,0);//ENSURE WRITE SIGNAL
 820:	a3 e2       	ldi	r26, 0x23	; 35
 822:	b0 e0       	ldi	r27, 0x00	; 0
 824:	e3 e2       	ldi	r30, 0x23	; 35
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	80 81       	ld	r24, Z
 82a:	8e 7f       	andi	r24, 0xFE	; 254
 82c:	8c 93       	st	X, r24
	//Clear Flag of TWINT by writing 1 in it
	Set_Bit(TWCR,TWCR_TWINT);
 82e:	a6 e5       	ldi	r26, 0x56	; 86
 830:	b0 e0       	ldi	r27, 0x00	; 0
 832:	e6 e5       	ldi	r30, 0x56	; 86
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	80 81       	ld	r24, Z
 838:	80 68       	ori	r24, 0x80	; 128
 83a:	8c 93       	st	X, r24

	//Enable TWI
	Set_Bit(TWCR,TWCR_TWEN);
 83c:	a6 e5       	ldi	r26, 0x56	; 86
 83e:	b0 e0       	ldi	r27, 0x00	; 0
 840:	e6 e5       	ldi	r30, 0x56	; 86
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	80 81       	ld	r24, Z
 846:	84 60       	ori	r24, 0x04	; 4
 848:	8c 93       	st	X, r24


	//TWI Check that HW raised the TWINT FLAG indicating slave address is written with ack
	while(Get_Bit(TWCR, TWCR_TWINT )!=1);
 84a:	e6 e5       	ldi	r30, 0x56	; 86
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	80 81       	ld	r24, Z
 850:	88 1f       	adc	r24, r24
 852:	88 27       	eor	r24, r24
 854:	88 1f       	adc	r24, r24
 856:	81 30       	cpi	r24, 0x01	; 1
 858:	c1 f7       	brne	.-16     	; 0x84a <TWI_SendRSlaveAddressWithWrite+0x4e>

	if ((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK)
 85a:	e1 e2       	ldi	r30, 0x21	; 33
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	80 81       	ld	r24, Z
 860:	88 2f       	mov	r24, r24
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	88 7f       	andi	r24, 0xF8	; 248
 866:	90 70       	andi	r25, 0x00	; 0
 868:	88 31       	cpi	r24, 0x18	; 24
 86a:	91 05       	cpc	r25, r1
 86c:	19 f0       	breq	.+6      	; 0x874 <__stack+0x15>
	{return SlaveAddressandWriteAck_Error;}
 86e:	85 e0       	ldi	r24, 0x05	; 5
 870:	8a 83       	std	Y+2, r24	; 0x02
 872:	01 c0       	rjmp	.+2      	; 0x876 <__stack+0x17>
	else
	{return NoError;}
 874:	1a 82       	std	Y+2, r1	; 0x02
 876:	8a 81       	ldd	r24, Y+2	; 0x02
	//If return value=0 go to function of master write databyte


}
 878:	0f 90       	pop	r0
 87a:	0f 90       	pop	r0
 87c:	cf 91       	pop	r28
 87e:	df 91       	pop	r29
 880:	08 95       	ret

00000882 <TWI_SendRSlaveAddressWithRead>:

TWI_ErrorStatus TWI_SendRSlaveAddressWithRead(u8 Copy_u8SlaveAddress){
 882:	df 93       	push	r29
 884:	cf 93       	push	r28
 886:	00 d0       	rcall	.+0      	; 0x888 <TWI_SendRSlaveAddressWithRead+0x6>
 888:	cd b7       	in	r28, 0x3d	; 61
 88a:	de b7       	in	r29, 0x3e	; 62
 88c:	89 83       	std	Y+1, r24	; 0x01
	//TWI_ErrorStatus Local_ErrStatus=NoError;
	//clear TWSTA Flag by writing zero in it
	Clr_Bit(TWCR,TWCR_TWSTA);
 88e:	a6 e5       	ldi	r26, 0x56	; 86
 890:	b0 e0       	ldi	r27, 0x00	; 0
 892:	e6 e5       	ldi	r30, 0x56	; 86
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 81       	ld	r24, Z
 898:	8f 7d       	andi	r24, 0xDF	; 223
 89a:	8c 93       	st	X, r24
	//Set Slave Address in 7 MOST SIGNIFICANT BITS Data Register
	TWDR=Copy_u8SlaveAddress<<1;
 89c:	e3 e2       	ldi	r30, 0x23	; 35
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	89 81       	ldd	r24, Y+1	; 0x01
 8a2:	88 0f       	add	r24, r24
 8a4:	80 83       	st	Z, r24
	Set_Bit(TWDR,0);//ENSURE READ SIGNAL
 8a6:	a3 e2       	ldi	r26, 0x23	; 35
 8a8:	b0 e0       	ldi	r27, 0x00	; 0
 8aa:	e3 e2       	ldi	r30, 0x23	; 35
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	80 81       	ld	r24, Z
 8b0:	81 60       	ori	r24, 0x01	; 1
 8b2:	8c 93       	st	X, r24
	//Clear Flag of TWINT by writing 1 in it
	Set_Bit(TWCR,TWCR_TWINT);
 8b4:	a6 e5       	ldi	r26, 0x56	; 86
 8b6:	b0 e0       	ldi	r27, 0x00	; 0
 8b8:	e6 e5       	ldi	r30, 0x56	; 86
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	80 81       	ld	r24, Z
 8be:	80 68       	ori	r24, 0x80	; 128
 8c0:	8c 93       	st	X, r24
	//Enable TWI
	Set_Bit(TWCR,TWCR_TWEN);
 8c2:	a6 e5       	ldi	r26, 0x56	; 86
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	e6 e5       	ldi	r30, 0x56	; 86
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	84 60       	ori	r24, 0x04	; 4
 8ce:	8c 93       	st	X, r24

	//TWI Check that HW raised the TWINT FLAG indicating slave address is read with ack
	while(Get_Bit(TWCR, TWCR_TWINT )!=1);
 8d0:	e6 e5       	ldi	r30, 0x56	; 86
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	80 81       	ld	r24, Z
 8d6:	88 1f       	adc	r24, r24
 8d8:	88 27       	eor	r24, r24
 8da:	88 1f       	adc	r24, r24
 8dc:	81 30       	cpi	r24, 0x01	; 1
 8de:	c1 f7       	brne	.-16     	; 0x8d0 <TWI_SendRSlaveAddressWithRead+0x4e>



	if ((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK)
 8e0:	e1 e2       	ldi	r30, 0x21	; 33
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	80 81       	ld	r24, Z
 8e6:	88 2f       	mov	r24, r24
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	88 7f       	andi	r24, 0xF8	; 248
 8ec:	90 70       	andi	r25, 0x00	; 0
 8ee:	80 34       	cpi	r24, 0x40	; 64
 8f0:	91 05       	cpc	r25, r1
 8f2:	19 f0       	breq	.+6      	; 0x8fa <TWI_SendRSlaveAddressWithRead+0x78>
	{return SlaveAddressandReadAck_Error;}
 8f4:	86 e0       	ldi	r24, 0x06	; 6
 8f6:	8a 83       	std	Y+2, r24	; 0x02
 8f8:	01 c0       	rjmp	.+2      	; 0x8fc <TWI_SendRSlaveAddressWithRead+0x7a>

	else {return NoError;}
 8fa:	1a 82       	std	Y+2, r1	; 0x02
 8fc:	8a 81       	ldd	r24, Y+2	; 0x02
	//If return value=0 go to function of master read databyte

}
 8fe:	0f 90       	pop	r0
 900:	0f 90       	pop	r0
 902:	cf 91       	pop	r28
 904:	df 91       	pop	r29
 906:	08 95       	ret

00000908 <TWI_MasterWriteDataByte>:

TWI_ErrorStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte){
 908:	df 93       	push	r29
 90a:	cf 93       	push	r28
 90c:	00 d0       	rcall	.+0      	; 0x90e <TWI_MasterWriteDataByte+0x6>
 90e:	cd b7       	in	r28, 0x3d	; 61
 910:	de b7       	in	r29, 0x3e	; 62
 912:	89 83       	std	Y+1, r24	; 0x01

	//TWI_ErrorStatus Local_ErrStatus=NoError;
	//Write in TWDR
	TWDR=Copy_u8DataByte;
 914:	e3 e2       	ldi	r30, 0x23	; 35
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	89 81       	ldd	r24, Y+1	; 0x01
 91a:	80 83       	st	Z, r24

	//Clear Flag of TWINT by writing 1 in it
	Set_Bit(TWCR,TWCR_TWINT);
 91c:	a6 e5       	ldi	r26, 0x56	; 86
 91e:	b0 e0       	ldi	r27, 0x00	; 0
 920:	e6 e5       	ldi	r30, 0x56	; 86
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	80 81       	ld	r24, Z
 926:	80 68       	ori	r24, 0x80	; 128
 928:	8c 93       	st	X, r24

	//Enable TWI
	Set_Bit(TWCR,TWCR_TWEN);
 92a:	a6 e5       	ldi	r26, 0x56	; 86
 92c:	b0 e0       	ldi	r27, 0x00	; 0
 92e:	e6 e5       	ldi	r30, 0x56	; 86
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	80 81       	ld	r24, Z
 934:	84 60       	ori	r24, 0x04	; 4
 936:	8c 93       	st	X, r24
	while (Get_Bit(TWCR, TWCR_TWINT )!=1);
 938:	e6 e5       	ldi	r30, 0x56	; 86
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	80 81       	ld	r24, Z
 93e:	88 1f       	adc	r24, r24
 940:	88 27       	eor	r24, r24
 942:	88 1f       	adc	r24, r24
 944:	81 30       	cpi	r24, 0x01	; 1
 946:	c1 f7       	brne	.-16     	; 0x938 <TWI_MasterWriteDataByte+0x30>
	if ((TWSR & 0xF8) != MSTR_WR_BYTE_ACK){
 948:	e1 e2       	ldi	r30, 0x21	; 33
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	80 81       	ld	r24, Z
 94e:	88 2f       	mov	r24, r24
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	88 7f       	andi	r24, 0xF8	; 248
 954:	90 70       	andi	r25, 0x00	; 0
 956:	88 32       	cpi	r24, 0x28	; 40
 958:	91 05       	cpc	r25, r1
 95a:	19 f0       	breq	.+6      	; 0x962 <TWI_MasterWriteDataByte+0x5a>
		return MasterWriteDataByte_Error;
 95c:	87 e0       	ldi	r24, 0x07	; 7
 95e:	8a 83       	std	Y+2, r24	; 0x02
 960:	01 c0       	rjmp	.+2      	; 0x964 <TWI_MasterWriteDataByte+0x5c>
	}
	else {return NoError;}
 962:	1a 82       	std	Y+2, r1	; 0x02
 964:	8a 81       	ldd	r24, Y+2	; 0x02
}
 966:	0f 90       	pop	r0
 968:	0f 90       	pop	r0
 96a:	cf 91       	pop	r28
 96c:	df 91       	pop	r29
 96e:	08 95       	ret

00000970 <TWI_MasterReadDataByte>:

TWI_ErrorStatus TWI_MasterReadDataByte(u8 *Copy_u8DataByte){
 970:	df 93       	push	r29
 972:	cf 93       	push	r28
 974:	00 d0       	rcall	.+0      	; 0x976 <TWI_MasterReadDataByte+0x6>
 976:	00 d0       	rcall	.+0      	; 0x978 <TWI_MasterReadDataByte+0x8>
 978:	cd b7       	in	r28, 0x3d	; 61
 97a:	de b7       	in	r29, 0x3e	; 62
 97c:	9b 83       	std	Y+3, r25	; 0x03
 97e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus Local_ErrStatus=NoError;
 980:	19 82       	std	Y+1, r1	; 0x01
	//reading the content
	*Copy_u8DataByte=TWDR;
 982:	e3 e2       	ldi	r30, 0x23	; 35
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	80 81       	ld	r24, Z
 988:	ea 81       	ldd	r30, Y+2	; 0x02
 98a:	fb 81       	ldd	r31, Y+3	; 0x03
 98c:	80 83       	st	Z, r24

	//Clear Flag of TWINT by writing 1 in it
	Set_Bit(TWCR,TWCR_TWINT);
 98e:	a6 e5       	ldi	r26, 0x56	; 86
 990:	b0 e0       	ldi	r27, 0x00	; 0
 992:	e6 e5       	ldi	r30, 0x56	; 86
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	80 81       	ld	r24, Z
 998:	80 68       	ori	r24, 0x80	; 128
 99a:	8c 93       	st	X, r24
	//Enable TWI
	Set_Bit(TWCR,TWCR_TWEN);
 99c:	a6 e5       	ldi	r26, 0x56	; 86
 99e:	b0 e0       	ldi	r27, 0x00	; 0
 9a0:	e6 e5       	ldi	r30, 0x56	; 86
 9a2:	f0 e0       	ldi	r31, 0x00	; 0
 9a4:	80 81       	ld	r24, Z
 9a6:	84 60       	ori	r24, 0x04	; 4
 9a8:	8c 93       	st	X, r24

	while (Get_Bit(TWCR, TWCR_TWINT)!=1);
 9aa:	e6 e5       	ldi	r30, 0x56	; 86
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	80 81       	ld	r24, Z
 9b0:	88 1f       	adc	r24, r24
 9b2:	88 27       	eor	r24, r24
 9b4:	88 1f       	adc	r24, r24
 9b6:	81 30       	cpi	r24, 0x01	; 1
 9b8:	c1 f7       	brne	.-16     	; 0x9aa <TWI_MasterReadDataByte+0x3a>
	if ((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
 9ba:	e1 e2       	ldi	r30, 0x21	; 33
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	80 81       	ld	r24, Z
 9c0:	88 2f       	mov	r24, r24
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	88 7f       	andi	r24, 0xF8	; 248
 9c6:	90 70       	andi	r25, 0x00	; 0
 9c8:	80 35       	cpi	r24, 0x50	; 80
 9ca:	91 05       	cpc	r25, r1
 9cc:	19 f0       	breq	.+6      	; 0x9d4 <TWI_MasterReadDataByte+0x64>
		return  MasterReadDataByte_Error;
 9ce:	88 e0       	ldi	r24, 0x08	; 8
 9d0:	8c 83       	std	Y+4, r24	; 0x04
 9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <TWI_MasterReadDataByte+0x66>

	}
	else {return NoError;}
 9d4:	1c 82       	std	Y+4, r1	; 0x04
 9d6:	8c 81       	ldd	r24, Y+4	; 0x04
	// if return value=0,then go to stop condition function
}
 9d8:	0f 90       	pop	r0
 9da:	0f 90       	pop	r0
 9dc:	0f 90       	pop	r0
 9de:	0f 90       	pop	r0
 9e0:	cf 91       	pop	r28
 9e2:	df 91       	pop	r29
 9e4:	08 95       	ret

000009e6 <TWI_SendStopCondition>:



void TWI_SendStopCondition(void){
 9e6:	df 93       	push	r29
 9e8:	cf 93       	push	r28
 9ea:	cd b7       	in	r28, 0x3d	; 61
 9ec:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(TWCR,TWCR_TWSTO);
 9ee:	a6 e5       	ldi	r26, 0x56	; 86
 9f0:	b0 e0       	ldi	r27, 0x00	; 0
 9f2:	e6 e5       	ldi	r30, 0x56	; 86
 9f4:	f0 e0       	ldi	r31, 0x00	; 0
 9f6:	80 81       	ld	r24, Z
 9f8:	80 61       	ori	r24, 0x10	; 16
 9fa:	8c 93       	st	X, r24

	//Clear Flag of TWINT by writing 1 in it
	Set_Bit(TWCR,TWCR_TWINT);
 9fc:	a6 e5       	ldi	r26, 0x56	; 86
 9fe:	b0 e0       	ldi	r27, 0x00	; 0
 a00:	e6 e5       	ldi	r30, 0x56	; 86
 a02:	f0 e0       	ldi	r31, 0x00	; 0
 a04:	80 81       	ld	r24, Z
 a06:	80 68       	ori	r24, 0x80	; 128
 a08:	8c 93       	st	X, r24

}
 a0a:	cf 91       	pop	r28
 a0c:	df 91       	pop	r29
 a0e:	08 95       	ret

00000a10 <TWI_readByteWithNACK>:

u8 TWI_readByteWithNACK(void)
{
 a10:	df 93       	push	r29
 a12:	cf 93       	push	r28
 a14:	cd b7       	in	r28, 0x3d	; 61
 a16:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
 a18:	e6 e5       	ldi	r30, 0x56	; 86
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	84 e8       	ldi	r24, 0x84	; 132
 a1e:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(Get_Bit(TWCR,TWCR_TWINT)!=1);
 a20:	e6 e5       	ldi	r30, 0x56	; 86
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	80 81       	ld	r24, Z
 a26:	88 1f       	adc	r24, r24
 a28:	88 27       	eor	r24, r24
 a2a:	88 1f       	adc	r24, r24
 a2c:	81 30       	cpi	r24, 0x01	; 1
 a2e:	c1 f7       	brne	.-16     	; 0xa20 <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
 a30:	e3 e2       	ldi	r30, 0x23	; 35
 a32:	f0 e0       	ldi	r31, 0x00	; 0
 a34:	80 81       	ld	r24, Z
}
 a36:	cf 91       	pop	r28
 a38:	df 91       	pop	r29
 a3a:	08 95       	ret

00000a3c <_exit>:
 a3c:	f8 94       	cli

00000a3e <__stop_program>:
 a3e:	ff cf       	rjmp	.-2      	; 0xa3e <__stop_program>
