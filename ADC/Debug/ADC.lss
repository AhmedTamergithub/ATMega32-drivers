
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000786  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000978  00000000  00000000  000007dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000045c  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c1 03 	jmp	0x782	; 0x782 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "STD_Types.h"
#include "ADC_interface.h"
#include "GPIO_interface.h"


void main(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	u8 Reading;
	 DIO_u8SetPortDirection(DIO_u8PORTA,DIO_u8PORT_INPUT);
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	60 e0       	ldi	r22, 0x00	; 0
  7a:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_u8SetPortDirection>
	 DIO_u8SetPortDirection(DIO_u8PORTC,DIO_u8PORT_OUTPUT);
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	6f ef       	ldi	r22, 0xFF	; 255
  82:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_u8SetPortDirection>
	 ADC_voidInit();
  86:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_voidInit>


	 while(1){
		 Reading=ADC_u8GetChannelReading(0);
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 86 00 	call	0x10c	; 0x10c <ADC_u8GetChannelReading>
  90:	89 83       	std	Y+1, r24	; 0x01
		 DIO_u8SetPortValue(DIO_u8PORTC,Reading);
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	69 81       	ldd	r22, Y+1	; 0x01
  96:	0e 94 24 03 	call	0x648	; 0x648 <DIO_u8SetPortValue>
  9a:	f7 cf       	rjmp	.-18     	; 0x8a <main+0x1e>

0000009c <ADC_voidInit>:
#include "ADC_interface.h"
#include "ADC_private.h"
#include "ADC_config.h"


void ADC_voidInit(void){
  9c:	df 93       	push	r29
  9e:	cf 93       	push	r28
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62

//Choose Reference Voltage
	Set_Bit(ADMUX,ADMUX_REFS0);
  a4:	a7 e2       	ldi	r26, 0x27	; 39
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	e7 e2       	ldi	r30, 0x27	; 39
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	8c 93       	st	X, r24
	Clr_Bit(ADMUX,ADMUX_REFS1);
  b2:	a7 e2       	ldi	r26, 0x27	; 39
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	e7 e2       	ldi	r30, 0x27	; 39
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	8f 77       	andi	r24, 0x7F	; 127
  be:	8c 93       	st	X, r24

//Left adjust
	Set_Bit(ADMUX,ADMUX_ADLAR);
  c0:	a7 e2       	ldi	r26, 0x27	; 39
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	e7 e2       	ldi	r30, 0x27	; 39
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	8c 93       	st	X, r24

//Choosing by default single Conversion Mode


	//Set Prescalar to 128
	Set_Bit(ADCSRA,ADCSRA_ADPS2);
  ce:	a6 e2       	ldi	r26, 0x26	; 38
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	e6 e2       	ldi	r30, 0x26	; 38
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADPS1);
  dc:	a6 e2       	ldi	r26, 0x26	; 38
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	e6 e2       	ldi	r30, 0x26	; 38
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADPS0);
  ea:	a6 e2       	ldi	r26, 0x26	; 38
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	e6 e2       	ldi	r30, 0x26	; 38
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	8c 93       	st	X, r24

	//Enable ADC
	Set_Bit(ADCSRA,ADCSRA_ADEN);
  f8:	a6 e2       	ldi	r26, 0x26	; 38
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	e6 e2       	ldi	r30, 0x26	; 38
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 68       	ori	r24, 0x80	; 128
 104:	8c 93       	st	X, r24


}
 106:	cf 91       	pop	r28
 108:	df 91       	pop	r29
 10a:	08 95       	ret

0000010c <ADC_u8GetChannelReading>:




u8 ADC_u8GetChannelReading(u8 Copy_u8Channel){
 10c:	df 93       	push	r29
 10e:	cf 93       	push	r28
 110:	0f 92       	push	r0
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	89 83       	std	Y+1, r24	; 0x01

//Masking the least significant 5 bits to choose the channel
	ADMUX&=0b11100000;
 118:	a7 e2       	ldi	r26, 0x27	; 39
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e7 e2       	ldi	r30, 0x27	; 39
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 7e       	andi	r24, 0xE0	; 224
 124:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
 126:	a7 e2       	ldi	r26, 0x27	; 39
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	e7 e2       	ldi	r30, 0x27	; 39
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	90 81       	ld	r25, Z
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	89 2b       	or	r24, r25
 134:	8c 93       	st	X, r24


	//Start Conversion
	Set_Bit(ADCSRA,ADCSRA_ADSC);
 136:	a6 e2       	ldi	r26, 0x26	; 38
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	e6 e2       	ldi	r30, 0x26	; 38
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 64       	ori	r24, 0x40	; 64
 142:	8c 93       	st	X, r24

  //Polling on ADC flag
	while(Get_Bit(ADCSRA,ADCSRA_ADIF)==0);
 144:	e6 e2       	ldi	r30, 0x26	; 38
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	82 95       	swap	r24
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	88 2f       	mov	r24, r24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	81 70       	andi	r24, 0x01	; 1
 154:	90 70       	andi	r25, 0x00	; 0
 156:	00 97       	sbiw	r24, 0x00	; 0
 158:	a9 f3       	breq	.-22     	; 0x144 <ADC_u8GetChannelReading+0x38>
	Set_Bit(ADCSRA,ADCSRA_ADIF);
 15a:	a6 e2       	ldi	r26, 0x26	; 38
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	e6 e2       	ldi	r30, 0x26	; 38
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	80 61       	ori	r24, 0x10	; 16
 166:	8c 93       	st	X, r24

	return ADCH;
 168:	e5 e2       	ldi	r30, 0x25	; 37
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z

}
 16e:	0f 90       	pop	r0
 170:	cf 91       	pop	r28
 172:	df 91       	pop	r29
 174:	08 95       	ret

00000176 <DIO_u8SetPinDirection>:
#include "STD_Types.h"
#include "GPIO_config.h"
#include "GPIO_private.h"
#include "GPIO_interface.h"

u8  DIO_u8SetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
 176:	df 93       	push	r29
 178:	cf 93       	push	r28
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	28 97       	sbiw	r28, 0x08	; 8
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
 18a:	8a 83       	std	Y+2, r24	; 0x02
 18c:	6b 83       	std	Y+3, r22	; 0x03
 18e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 190:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin<=DIO_u8PIN7 )
 192:	8b 81       	ldd	r24, Y+3	; 0x03
 194:	88 30       	cpi	r24, 0x08	; 8
 196:	08 f0       	brcs	.+2      	; 0x19a <DIO_u8SetPinDirection+0x24>
 198:	f4 c0       	rjmp	.+488    	; 0x382 <DIO_u8SetPinDirection+0x20c>
	{
		if ( Copy_u8Direction==DIO_u8PIN_INPUT){
 19a:	8c 81       	ldd	r24, Y+4	; 0x04
 19c:	88 23       	and	r24, r24
 19e:	09 f0       	breq	.+2      	; 0x1a2 <DIO_u8SetPinDirection+0x2c>
 1a0:	77 c0       	rjmp	.+238    	; 0x290 <DIO_u8SetPinDirection+0x11a>
			switch (Copy_u8Port)
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	28 2f       	mov	r18, r24
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	38 87       	std	Y+8, r19	; 0x08
 1aa:	2f 83       	std	Y+7, r18	; 0x07
 1ac:	8f 81       	ldd	r24, Y+7	; 0x07
 1ae:	98 85       	ldd	r25, Y+8	; 0x08
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	91 05       	cpc	r25, r1
 1b4:	59 f1       	breq	.+86     	; 0x20c <DIO_u8SetPinDirection+0x96>
 1b6:	2f 81       	ldd	r18, Y+7	; 0x07
 1b8:	38 85       	ldd	r19, Y+8	; 0x08
 1ba:	22 30       	cpi	r18, 0x02	; 2
 1bc:	31 05       	cpc	r19, r1
 1be:	2c f4       	brge	.+10     	; 0x1ca <DIO_u8SetPinDirection+0x54>
 1c0:	8f 81       	ldd	r24, Y+7	; 0x07
 1c2:	98 85       	ldd	r25, Y+8	; 0x08
 1c4:	00 97       	sbiw	r24, 0x00	; 0
 1c6:	69 f0       	breq	.+26     	; 0x1e2 <DIO_u8SetPinDirection+0x6c>
 1c8:	60 c0       	rjmp	.+192    	; 0x28a <DIO_u8SetPinDirection+0x114>
 1ca:	2f 81       	ldd	r18, Y+7	; 0x07
 1cc:	38 85       	ldd	r19, Y+8	; 0x08
 1ce:	22 30       	cpi	r18, 0x02	; 2
 1d0:	31 05       	cpc	r19, r1
 1d2:	89 f1       	breq	.+98     	; 0x236 <DIO_u8SetPinDirection+0xc0>
 1d4:	8f 81       	ldd	r24, Y+7	; 0x07
 1d6:	98 85       	ldd	r25, Y+8	; 0x08
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	91 05       	cpc	r25, r1
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <DIO_u8SetPinDirection+0x6a>
 1de:	40 c0       	rjmp	.+128    	; 0x260 <DIO_u8SetPinDirection+0xea>
 1e0:	54 c0       	rjmp	.+168    	; 0x28a <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: Clr_Bit(DDRA,Copy_u8Pin);break;
 1e2:	aa e3       	ldi	r26, 0x3A	; 58
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	ea e3       	ldi	r30, 0x3A	; 58
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	48 2f       	mov	r20, r24
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	28 2f       	mov	r18, r24
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 2e       	mov	r0, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_u8SetPinDirection+0x8a>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_u8SetPinDirection+0x86>
 204:	80 95       	com	r24
 206:	84 23       	and	r24, r20
 208:	8c 93       	st	X, r24
 20a:	bd c0       	rjmp	.+378    	; 0x386 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB:Clr_Bit(DDRB,Copy_u8Pin); break;
 20c:	a7 e3       	ldi	r26, 0x37	; 55
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	e7 e3       	ldi	r30, 0x37	; 55
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	48 2f       	mov	r20, r24
 218:	8b 81       	ldd	r24, Y+3	; 0x03
 21a:	28 2f       	mov	r18, r24
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 2e       	mov	r0, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_u8SetPinDirection+0xb4>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_u8SetPinDirection+0xb0>
 22e:	80 95       	com	r24
 230:	84 23       	and	r24, r20
 232:	8c 93       	st	X, r24
 234:	a8 c0       	rjmp	.+336    	; 0x386 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC:Clr_Bit(DDRC,Copy_u8Pin); break;
 236:	a4 e3       	ldi	r26, 0x34	; 52
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	e4 e3       	ldi	r30, 0x34	; 52
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	48 2f       	mov	r20, r24
 242:	8b 81       	ldd	r24, Y+3	; 0x03
 244:	28 2f       	mov	r18, r24
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 2e       	mov	r0, r18
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_u8SetPinDirection+0xde>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_u8SetPinDirection+0xda>
 258:	80 95       	com	r24
 25a:	84 23       	and	r24, r20
 25c:	8c 93       	st	X, r24
 25e:	93 c0       	rjmp	.+294    	; 0x386 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD:Clr_Bit(DDRD,Copy_u8Pin); break;
 260:	a1 e3       	ldi	r26, 0x31	; 49
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	e1 e3       	ldi	r30, 0x31	; 49
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	48 2f       	mov	r20, r24
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	28 2f       	mov	r18, r24
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 2e       	mov	r0, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_u8SetPinDirection+0x108>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_u8SetPinDirection+0x104>
 282:	80 95       	com	r24
 284:	84 23       	and	r24, r20
 286:	8c 93       	st	X, r24
 288:	7e c0       	rjmp	.+252    	; 0x386 <DIO_u8SetPinDirection+0x210>
			default:Local_u8ErrorState=1;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	89 83       	std	Y+1, r24	; 0x01
 28e:	7b c0       	rjmp	.+246    	; 0x386 <DIO_u8SetPinDirection+0x210>
			}
		}
			else if ( Copy_u8Direction==DIO_u8PIN_OUTPUT){
 290:	8c 81       	ldd	r24, Y+4	; 0x04
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	09 f0       	breq	.+2      	; 0x298 <DIO_u8SetPinDirection+0x122>
 296:	72 c0       	rjmp	.+228    	; 0x37c <DIO_u8SetPinDirection+0x206>
				switch (Copy_u8Port)
 298:	8a 81       	ldd	r24, Y+2	; 0x02
 29a:	28 2f       	mov	r18, r24
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	3e 83       	std	Y+6, r19	; 0x06
 2a0:	2d 83       	std	Y+5, r18	; 0x05
 2a2:	8d 81       	ldd	r24, Y+5	; 0x05
 2a4:	9e 81       	ldd	r25, Y+6	; 0x06
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	91 05       	cpc	r25, r1
 2aa:	49 f1       	breq	.+82     	; 0x2fe <DIO_u8SetPinDirection+0x188>
 2ac:	2d 81       	ldd	r18, Y+5	; 0x05
 2ae:	3e 81       	ldd	r19, Y+6	; 0x06
 2b0:	22 30       	cpi	r18, 0x02	; 2
 2b2:	31 05       	cpc	r19, r1
 2b4:	2c f4       	brge	.+10     	; 0x2c0 <DIO_u8SetPinDirection+0x14a>
 2b6:	8d 81       	ldd	r24, Y+5	; 0x05
 2b8:	9e 81       	ldd	r25, Y+6	; 0x06
 2ba:	00 97       	sbiw	r24, 0x00	; 0
 2bc:	61 f0       	breq	.+24     	; 0x2d6 <DIO_u8SetPinDirection+0x160>
 2be:	5b c0       	rjmp	.+182    	; 0x376 <DIO_u8SetPinDirection+0x200>
 2c0:	2d 81       	ldd	r18, Y+5	; 0x05
 2c2:	3e 81       	ldd	r19, Y+6	; 0x06
 2c4:	22 30       	cpi	r18, 0x02	; 2
 2c6:	31 05       	cpc	r19, r1
 2c8:	71 f1       	breq	.+92     	; 0x326 <DIO_u8SetPinDirection+0x1b0>
 2ca:	8d 81       	ldd	r24, Y+5	; 0x05
 2cc:	9e 81       	ldd	r25, Y+6	; 0x06
 2ce:	83 30       	cpi	r24, 0x03	; 3
 2d0:	91 05       	cpc	r25, r1
 2d2:	e9 f1       	breq	.+122    	; 0x34e <DIO_u8SetPinDirection+0x1d8>
 2d4:	50 c0       	rjmp	.+160    	; 0x376 <DIO_u8SetPinDirection+0x200>
				{
				case DIO_u8PORTA:Set_Bit(DDRA,Copy_u8Pin);break;
 2d6:	aa e3       	ldi	r26, 0x3A	; 58
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	ea e3       	ldi	r30, 0x3A	; 58
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	48 2f       	mov	r20, r24
 2e2:	8b 81       	ldd	r24, Y+3	; 0x03
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 2e       	mov	r0, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_u8SetPinDirection+0x17e>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_u8SetPinDirection+0x17a>
 2f8:	84 2b       	or	r24, r20
 2fa:	8c 93       	st	X, r24
 2fc:	44 c0       	rjmp	.+136    	; 0x386 <DIO_u8SetPinDirection+0x210>
				case DIO_u8PORTB:Set_Bit(DDRB,Copy_u8Pin); break;
 2fe:	a7 e3       	ldi	r26, 0x37	; 55
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	e7 e3       	ldi	r30, 0x37	; 55
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	48 2f       	mov	r20, r24
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
 30c:	28 2f       	mov	r18, r24
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 2e       	mov	r0, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_u8SetPinDirection+0x1a6>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_u8SetPinDirection+0x1a2>
 320:	84 2b       	or	r24, r20
 322:	8c 93       	st	X, r24
 324:	30 c0       	rjmp	.+96     	; 0x386 <DIO_u8SetPinDirection+0x210>
				case DIO_u8PORTC:Set_Bit(DDRC,Copy_u8Pin); break;
 326:	a4 e3       	ldi	r26, 0x34	; 52
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	e4 e3       	ldi	r30, 0x34	; 52
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	48 2f       	mov	r20, r24
 332:	8b 81       	ldd	r24, Y+3	; 0x03
 334:	28 2f       	mov	r18, r24
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 2e       	mov	r0, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_u8SetPinDirection+0x1ce>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	0a 94       	dec	r0
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_u8SetPinDirection+0x1ca>
 348:	84 2b       	or	r24, r20
 34a:	8c 93       	st	X, r24
 34c:	1c c0       	rjmp	.+56     	; 0x386 <DIO_u8SetPinDirection+0x210>
				case DIO_u8PORTD:Set_Bit(DDRD,Copy_u8Pin); break;
 34e:	a1 e3       	ldi	r26, 0x31	; 49
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	e1 e3       	ldi	r30, 0x31	; 49
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	48 2f       	mov	r20, r24
 35a:	8b 81       	ldd	r24, Y+3	; 0x03
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 2e       	mov	r0, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_u8SetPinDirection+0x1f6>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_u8SetPinDirection+0x1f2>
 370:	84 2b       	or	r24, r20
 372:	8c 93       	st	X, r24
 374:	08 c0       	rjmp	.+16     	; 0x386 <DIO_u8SetPinDirection+0x210>
				default:Local_u8ErrorState=1;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	89 83       	std	Y+1, r24	; 0x01
 37a:	05 c0       	rjmp	.+10     	; 0x386 <DIO_u8SetPinDirection+0x210>
				}

			}
			else{ Local_u8ErrorState=1;}
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	89 83       	std	Y+1, r24	; 0x01
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_u8SetPinDirection+0x210>


	}
	else {Local_u8ErrorState=1;}
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
 386:	89 81       	ldd	r24, Y+1	; 0x01
}
 388:	28 96       	adiw	r28, 0x08	; 8
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	f8 94       	cli
 38e:	de bf       	out	0x3e, r29	; 62
 390:	0f be       	out	0x3f, r0	; 63
 392:	cd bf       	out	0x3d, r28	; 61
 394:	cf 91       	pop	r28
 396:	df 91       	pop	r29
 398:	08 95       	ret

0000039a <DIO_u8SetPortDirection>:


u8  DIO_u8SetPortDirection (u8 Copy_u8Port, u8 Copy_u8Direction){
 39a:	df 93       	push	r29
 39c:	cf 93       	push	r28
 39e:	00 d0       	rcall	.+0      	; 0x3a0 <DIO_u8SetPortDirection+0x6>
 3a0:	00 d0       	rcall	.+0      	; 0x3a2 <DIO_u8SetPortDirection+0x8>
 3a2:	0f 92       	push	r0
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	8a 83       	std	Y+2, r24	; 0x02
 3aa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 3ac:	19 82       	std	Y+1, r1	; 0x01


	  switch (Copy_u8Port){
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	3d 83       	std	Y+5, r19	; 0x05
 3b6:	2c 83       	std	Y+4, r18	; 0x04
 3b8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ba:	9d 81       	ldd	r25, Y+5	; 0x05
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	91 05       	cpc	r25, r1
 3c0:	d1 f0       	breq	.+52     	; 0x3f6 <DIO_u8SetPortDirection+0x5c>
 3c2:	2c 81       	ldd	r18, Y+4	; 0x04
 3c4:	3d 81       	ldd	r19, Y+5	; 0x05
 3c6:	22 30       	cpi	r18, 0x02	; 2
 3c8:	31 05       	cpc	r19, r1
 3ca:	2c f4       	brge	.+10     	; 0x3d6 <DIO_u8SetPortDirection+0x3c>
 3cc:	8c 81       	ldd	r24, Y+4	; 0x04
 3ce:	9d 81       	ldd	r25, Y+5	; 0x05
 3d0:	00 97       	sbiw	r24, 0x00	; 0
 3d2:	61 f0       	breq	.+24     	; 0x3ec <DIO_u8SetPortDirection+0x52>
 3d4:	1e c0       	rjmp	.+60     	; 0x412 <DIO_u8SetPortDirection+0x78>
 3d6:	2c 81       	ldd	r18, Y+4	; 0x04
 3d8:	3d 81       	ldd	r19, Y+5	; 0x05
 3da:	22 30       	cpi	r18, 0x02	; 2
 3dc:	31 05       	cpc	r19, r1
 3de:	81 f0       	breq	.+32     	; 0x400 <DIO_u8SetPortDirection+0x66>
 3e0:	8c 81       	ldd	r24, Y+4	; 0x04
 3e2:	9d 81       	ldd	r25, Y+5	; 0x05
 3e4:	83 30       	cpi	r24, 0x03	; 3
 3e6:	91 05       	cpc	r25, r1
 3e8:	81 f0       	breq	.+32     	; 0x40a <DIO_u8SetPortDirection+0x70>
 3ea:	13 c0       	rjmp	.+38     	; 0x412 <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
 3ec:	ea e3       	ldi	r30, 0x3A	; 58
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	8b 81       	ldd	r24, Y+3	; 0x03
 3f2:	80 83       	st	Z, r24
 3f4:	0e c0       	rjmp	.+28     	; 0x412 <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
 3f6:	e7 e3       	ldi	r30, 0x37	; 55
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	8b 81       	ldd	r24, Y+3	; 0x03
 3fc:	80 83       	st	Z, r24
 3fe:	09 c0       	rjmp	.+18     	; 0x412 <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
 400:	e4 e3       	ldi	r30, 0x34	; 52
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	80 83       	st	Z, r24
 408:	04 c0       	rjmp	.+8      	; 0x412 <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
 40a:	e1 e3       	ldi	r30, 0x31	; 49
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	8b 81       	ldd	r24, Y+3	; 0x03
 410:	80 83       	st	Z, r24
	  }




	return Local_u8ErrorState;
 412:	89 81       	ldd	r24, Y+1	; 0x01
}
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	cf 91       	pop	r28
 420:	df 91       	pop	r29
 422:	08 95       	ret

00000424 <DIO_u8SetPinValue>:




u8  DIO_u8SetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
 424:	df 93       	push	r29
 426:	cf 93       	push	r28
 428:	cd b7       	in	r28, 0x3d	; 61
 42a:	de b7       	in	r29, 0x3e	; 62
 42c:	28 97       	sbiw	r28, 0x08	; 8
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
 438:	8a 83       	std	Y+2, r24	; 0x02
 43a:	6b 83       	std	Y+3, r22	; 0x03
 43c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 43e:	19 82       	std	Y+1, r1	; 0x01
	if ( Copy_u8Pin<=DIO_u8PIN7 )
 440:	8b 81       	ldd	r24, Y+3	; 0x03
 442:	88 30       	cpi	r24, 0x08	; 8
 444:	08 f0       	brcs	.+2      	; 0x448 <DIO_u8SetPinValue+0x24>
 446:	f4 c0       	rjmp	.+488    	; 0x630 <DIO_u8SetPinValue+0x20c>
	{
		if ( Copy_u8Value==DIO_u8PIN_LOW){
 448:	8c 81       	ldd	r24, Y+4	; 0x04
 44a:	88 23       	and	r24, r24
 44c:	09 f0       	breq	.+2      	; 0x450 <DIO_u8SetPinValue+0x2c>
 44e:	77 c0       	rjmp	.+238    	; 0x53e <DIO_u8SetPinValue+0x11a>
			switch (Copy_u8Port)
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	28 2f       	mov	r18, r24
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	38 87       	std	Y+8, r19	; 0x08
 458:	2f 83       	std	Y+7, r18	; 0x07
 45a:	8f 81       	ldd	r24, Y+7	; 0x07
 45c:	98 85       	ldd	r25, Y+8	; 0x08
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	91 05       	cpc	r25, r1
 462:	59 f1       	breq	.+86     	; 0x4ba <DIO_u8SetPinValue+0x96>
 464:	2f 81       	ldd	r18, Y+7	; 0x07
 466:	38 85       	ldd	r19, Y+8	; 0x08
 468:	22 30       	cpi	r18, 0x02	; 2
 46a:	31 05       	cpc	r19, r1
 46c:	2c f4       	brge	.+10     	; 0x478 <DIO_u8SetPinValue+0x54>
 46e:	8f 81       	ldd	r24, Y+7	; 0x07
 470:	98 85       	ldd	r25, Y+8	; 0x08
 472:	00 97       	sbiw	r24, 0x00	; 0
 474:	69 f0       	breq	.+26     	; 0x490 <DIO_u8SetPinValue+0x6c>
 476:	60 c0       	rjmp	.+192    	; 0x538 <DIO_u8SetPinValue+0x114>
 478:	2f 81       	ldd	r18, Y+7	; 0x07
 47a:	38 85       	ldd	r19, Y+8	; 0x08
 47c:	22 30       	cpi	r18, 0x02	; 2
 47e:	31 05       	cpc	r19, r1
 480:	89 f1       	breq	.+98     	; 0x4e4 <DIO_u8SetPinValue+0xc0>
 482:	8f 81       	ldd	r24, Y+7	; 0x07
 484:	98 85       	ldd	r25, Y+8	; 0x08
 486:	83 30       	cpi	r24, 0x03	; 3
 488:	91 05       	cpc	r25, r1
 48a:	09 f4       	brne	.+2      	; 0x48e <DIO_u8SetPinValue+0x6a>
 48c:	40 c0       	rjmp	.+128    	; 0x50e <DIO_u8SetPinValue+0xea>
 48e:	54 c0       	rjmp	.+168    	; 0x538 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: Clr_Bit(PORTA,Copy_u8Pin);break;
 490:	ab e3       	ldi	r26, 0x3B	; 59
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	eb e3       	ldi	r30, 0x3B	; 59
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	48 2f       	mov	r20, r24
 49c:	8b 81       	ldd	r24, Y+3	; 0x03
 49e:	28 2f       	mov	r18, r24
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 2e       	mov	r0, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_u8SetPinValue+0x8a>
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	0a 94       	dec	r0
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_u8SetPinValue+0x86>
 4b2:	80 95       	com	r24
 4b4:	84 23       	and	r24, r20
 4b6:	8c 93       	st	X, r24
 4b8:	bd c0       	rjmp	.+378    	; 0x634 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:Clr_Bit(PORTB,Copy_u8Pin); break;
 4ba:	a8 e3       	ldi	r26, 0x38	; 56
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	e8 e3       	ldi	r30, 0x38	; 56
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	48 2f       	mov	r20, r24
 4c6:	8b 81       	ldd	r24, Y+3	; 0x03
 4c8:	28 2f       	mov	r18, r24
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 2e       	mov	r0, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_u8SetPinValue+0xb4>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	0a 94       	dec	r0
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_u8SetPinValue+0xb0>
 4dc:	80 95       	com	r24
 4de:	84 23       	and	r24, r20
 4e0:	8c 93       	st	X, r24
 4e2:	a8 c0       	rjmp	.+336    	; 0x634 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:Clr_Bit(PORTC,Copy_u8Pin); break;
 4e4:	a5 e3       	ldi	r26, 0x35	; 53
 4e6:	b0 e0       	ldi	r27, 0x00	; 0
 4e8:	e5 e3       	ldi	r30, 0x35	; 53
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	48 2f       	mov	r20, r24
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	28 2f       	mov	r18, r24
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 2e       	mov	r0, r18
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_u8SetPinValue+0xde>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	0a 94       	dec	r0
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_u8SetPinValue+0xda>
 506:	80 95       	com	r24
 508:	84 23       	and	r24, r20
 50a:	8c 93       	st	X, r24
 50c:	93 c0       	rjmp	.+294    	; 0x634 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:Clr_Bit(PORTD,Copy_u8Pin); break;
 50e:	a2 e3       	ldi	r26, 0x32	; 50
 510:	b0 e0       	ldi	r27, 0x00	; 0
 512:	e2 e3       	ldi	r30, 0x32	; 50
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	48 2f       	mov	r20, r24
 51a:	8b 81       	ldd	r24, Y+3	; 0x03
 51c:	28 2f       	mov	r18, r24
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	02 2e       	mov	r0, r18
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_u8SetPinValue+0x108>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	0a 94       	dec	r0
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_u8SetPinValue+0x104>
 530:	80 95       	com	r24
 532:	84 23       	and	r24, r20
 534:	8c 93       	st	X, r24
 536:	7e c0       	rjmp	.+252    	; 0x634 <DIO_u8SetPinValue+0x210>
			default:Local_u8ErrorState=1;
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	89 83       	std	Y+1, r24	; 0x01
 53c:	7b c0       	rjmp	.+246    	; 0x634 <DIO_u8SetPinValue+0x210>
			}
		}
		else if ( Copy_u8Value==DIO_u8PIN_HIGH){
 53e:	8c 81       	ldd	r24, Y+4	; 0x04
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	09 f0       	breq	.+2      	; 0x546 <DIO_u8SetPinValue+0x122>
 544:	72 c0       	rjmp	.+228    	; 0x62a <DIO_u8SetPinValue+0x206>
			switch (Copy_u8Port)
 546:	8a 81       	ldd	r24, Y+2	; 0x02
 548:	28 2f       	mov	r18, r24
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	3e 83       	std	Y+6, r19	; 0x06
 54e:	2d 83       	std	Y+5, r18	; 0x05
 550:	8d 81       	ldd	r24, Y+5	; 0x05
 552:	9e 81       	ldd	r25, Y+6	; 0x06
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	91 05       	cpc	r25, r1
 558:	49 f1       	breq	.+82     	; 0x5ac <DIO_u8SetPinValue+0x188>
 55a:	2d 81       	ldd	r18, Y+5	; 0x05
 55c:	3e 81       	ldd	r19, Y+6	; 0x06
 55e:	22 30       	cpi	r18, 0x02	; 2
 560:	31 05       	cpc	r19, r1
 562:	2c f4       	brge	.+10     	; 0x56e <DIO_u8SetPinValue+0x14a>
 564:	8d 81       	ldd	r24, Y+5	; 0x05
 566:	9e 81       	ldd	r25, Y+6	; 0x06
 568:	00 97       	sbiw	r24, 0x00	; 0
 56a:	61 f0       	breq	.+24     	; 0x584 <DIO_u8SetPinValue+0x160>
 56c:	5b c0       	rjmp	.+182    	; 0x624 <DIO_u8SetPinValue+0x200>
 56e:	2d 81       	ldd	r18, Y+5	; 0x05
 570:	3e 81       	ldd	r19, Y+6	; 0x06
 572:	22 30       	cpi	r18, 0x02	; 2
 574:	31 05       	cpc	r19, r1
 576:	71 f1       	breq	.+92     	; 0x5d4 <DIO_u8SetPinValue+0x1b0>
 578:	8d 81       	ldd	r24, Y+5	; 0x05
 57a:	9e 81       	ldd	r25, Y+6	; 0x06
 57c:	83 30       	cpi	r24, 0x03	; 3
 57e:	91 05       	cpc	r25, r1
 580:	e9 f1       	breq	.+122    	; 0x5fc <DIO_u8SetPinValue+0x1d8>
 582:	50 c0       	rjmp	.+160    	; 0x624 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA:Set_Bit(PORTA,Copy_u8Pin);break;
 584:	ab e3       	ldi	r26, 0x3B	; 59
 586:	b0 e0       	ldi	r27, 0x00	; 0
 588:	eb e3       	ldi	r30, 0x3B	; 59
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	80 81       	ld	r24, Z
 58e:	48 2f       	mov	r20, r24
 590:	8b 81       	ldd	r24, Y+3	; 0x03
 592:	28 2f       	mov	r18, r24
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	02 2e       	mov	r0, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_u8SetPinValue+0x17e>
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	0a 94       	dec	r0
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_u8SetPinValue+0x17a>
 5a6:	84 2b       	or	r24, r20
 5a8:	8c 93       	st	X, r24
 5aa:	44 c0       	rjmp	.+136    	; 0x634 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:Set_Bit(PORTB,Copy_u8Pin); break;
 5ac:	a8 e3       	ldi	r26, 0x38	; 56
 5ae:	b0 e0       	ldi	r27, 0x00	; 0
 5b0:	e8 e3       	ldi	r30, 0x38	; 56
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	48 2f       	mov	r20, r24
 5b8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ba:	28 2f       	mov	r18, r24
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	02 2e       	mov	r0, r18
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_u8SetPinValue+0x1a6>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	0a 94       	dec	r0
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_u8SetPinValue+0x1a2>
 5ce:	84 2b       	or	r24, r20
 5d0:	8c 93       	st	X, r24
 5d2:	30 c0       	rjmp	.+96     	; 0x634 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:Set_Bit(PORTC,Copy_u8Pin); break;
 5d4:	a5 e3       	ldi	r26, 0x35	; 53
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	e5 e3       	ldi	r30, 0x35	; 53
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	48 2f       	mov	r20, r24
 5e0:	8b 81       	ldd	r24, Y+3	; 0x03
 5e2:	28 2f       	mov	r18, r24
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 2e       	mov	r0, r18
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_u8SetPinValue+0x1ce>
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	0a 94       	dec	r0
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_u8SetPinValue+0x1ca>
 5f6:	84 2b       	or	r24, r20
 5f8:	8c 93       	st	X, r24
 5fa:	1c c0       	rjmp	.+56     	; 0x634 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:Set_Bit(PORTD,Copy_u8Pin); break;
 5fc:	a2 e3       	ldi	r26, 0x32	; 50
 5fe:	b0 e0       	ldi	r27, 0x00	; 0
 600:	e2 e3       	ldi	r30, 0x32	; 50
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
 606:	48 2f       	mov	r20, r24
 608:	8b 81       	ldd	r24, Y+3	; 0x03
 60a:	28 2f       	mov	r18, r24
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 2e       	mov	r0, r18
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_u8SetPinValue+0x1f6>
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	0a 94       	dec	r0
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_u8SetPinValue+0x1f2>
 61e:	84 2b       	or	r24, r20
 620:	8c 93       	st	X, r24
 622:	08 c0       	rjmp	.+16     	; 0x634 <DIO_u8SetPinValue+0x210>
			default:Local_u8ErrorState=1;
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	89 83       	std	Y+1, r24	; 0x01
 628:	05 c0       	rjmp	.+10     	; 0x634 <DIO_u8SetPinValue+0x210>
			}

		}
		else{ Local_u8ErrorState=1;}
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	89 83       	std	Y+1, r24	; 0x01
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_u8SetPinValue+0x210>


	}

	else {Local_u8ErrorState=1;}
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
 634:	89 81       	ldd	r24, Y+1	; 0x01
}
 636:	28 96       	adiw	r28, 0x08	; 8
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	f8 94       	cli
 63c:	de bf       	out	0x3e, r29	; 62
 63e:	0f be       	out	0x3f, r0	; 63
 640:	cd bf       	out	0x3d, r28	; 61
 642:	cf 91       	pop	r28
 644:	df 91       	pop	r29
 646:	08 95       	ret

00000648 <DIO_u8SetPortValue>:





u8  DIO_u8SetPortValue (u8 Copy_u8Port, u8 Copy_u8Value){
 648:	df 93       	push	r29
 64a:	cf 93       	push	r28
 64c:	00 d0       	rcall	.+0      	; 0x64e <DIO_u8SetPortValue+0x6>
 64e:	00 d0       	rcall	.+0      	; 0x650 <DIO_u8SetPortValue+0x8>
 650:	0f 92       	push	r0
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	8a 83       	std	Y+2, r24	; 0x02
 658:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 65a:	19 82       	std	Y+1, r1	; 0x01


	switch (Copy_u8Port){
 65c:	8a 81       	ldd	r24, Y+2	; 0x02
 65e:	28 2f       	mov	r18, r24
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	3d 83       	std	Y+5, r19	; 0x05
 664:	2c 83       	std	Y+4, r18	; 0x04
 666:	8c 81       	ldd	r24, Y+4	; 0x04
 668:	9d 81       	ldd	r25, Y+5	; 0x05
 66a:	81 30       	cpi	r24, 0x01	; 1
 66c:	91 05       	cpc	r25, r1
 66e:	d1 f0       	breq	.+52     	; 0x6a4 <DIO_u8SetPortValue+0x5c>
 670:	2c 81       	ldd	r18, Y+4	; 0x04
 672:	3d 81       	ldd	r19, Y+5	; 0x05
 674:	22 30       	cpi	r18, 0x02	; 2
 676:	31 05       	cpc	r19, r1
 678:	2c f4       	brge	.+10     	; 0x684 <DIO_u8SetPortValue+0x3c>
 67a:	8c 81       	ldd	r24, Y+4	; 0x04
 67c:	9d 81       	ldd	r25, Y+5	; 0x05
 67e:	00 97       	sbiw	r24, 0x00	; 0
 680:	61 f0       	breq	.+24     	; 0x69a <DIO_u8SetPortValue+0x52>
 682:	1e c0       	rjmp	.+60     	; 0x6c0 <DIO_u8SetPortValue+0x78>
 684:	2c 81       	ldd	r18, Y+4	; 0x04
 686:	3d 81       	ldd	r19, Y+5	; 0x05
 688:	22 30       	cpi	r18, 0x02	; 2
 68a:	31 05       	cpc	r19, r1
 68c:	81 f0       	breq	.+32     	; 0x6ae <DIO_u8SetPortValue+0x66>
 68e:	8c 81       	ldd	r24, Y+4	; 0x04
 690:	9d 81       	ldd	r25, Y+5	; 0x05
 692:	83 30       	cpi	r24, 0x03	; 3
 694:	91 05       	cpc	r25, r1
 696:	81 f0       	breq	.+32     	; 0x6b8 <DIO_u8SetPortValue+0x70>
 698:	13 c0       	rjmp	.+38     	; 0x6c0 <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTA: PORTA=Copy_u8Value;break;
 69a:	eb e3       	ldi	r30, 0x3B	; 59
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	8b 81       	ldd	r24, Y+3	; 0x03
 6a0:	80 83       	st	Z, r24
 6a2:	0e c0       	rjmp	.+28     	; 0x6c0 <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTB: PORTB=Copy_u8Value;break;
 6a4:	e8 e3       	ldi	r30, 0x38	; 56
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	8b 81       	ldd	r24, Y+3	; 0x03
 6aa:	80 83       	st	Z, r24
 6ac:	09 c0       	rjmp	.+18     	; 0x6c0 <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTC: PORTC=Copy_u8Value;break;
 6ae:	e5 e3       	ldi	r30, 0x35	; 53
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	8b 81       	ldd	r24, Y+3	; 0x03
 6b4:	80 83       	st	Z, r24
 6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTD: PORTD=Copy_u8Value;break;
 6b8:	e2 e3       	ldi	r30, 0x32	; 50
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	8b 81       	ldd	r24, Y+3	; 0x03
 6be:	80 83       	st	Z, r24

		  }

	return Local_u8ErrorState;
 6c0:	89 81       	ldd	r24, Y+1	; 0x01
}
 6c2:	0f 90       	pop	r0
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	cf 91       	pop	r28
 6ce:	df 91       	pop	r29
 6d0:	08 95       	ret

000006d2 <DIO_u8GetPinValue>:

u8  DIO_u8GetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value){
 6d2:	df 93       	push	r29
 6d4:	cf 93       	push	r28
 6d6:	cd b7       	in	r28, 0x3d	; 61
 6d8:	de b7       	in	r29, 0x3e	; 62
 6da:	27 97       	sbiw	r28, 0x07	; 7
 6dc:	0f b6       	in	r0, 0x3f	; 63
 6de:	f8 94       	cli
 6e0:	de bf       	out	0x3e, r29	; 62
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	cd bf       	out	0x3d, r28	; 61
 6e6:	8a 83       	std	Y+2, r24	; 0x02
 6e8:	6b 83       	std	Y+3, r22	; 0x03
 6ea:	5d 83       	std	Y+5, r21	; 0x05
 6ec:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 6ee:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7)){
 6f0:	8c 81       	ldd	r24, Y+4	; 0x04
 6f2:	9d 81       	ldd	r25, Y+5	; 0x05
 6f4:	00 97       	sbiw	r24, 0x00	; 0
 6f6:	c9 f1       	breq	.+114    	; 0x76a <DIO_u8GetPinValue+0x98>
 6f8:	8b 81       	ldd	r24, Y+3	; 0x03
 6fa:	88 30       	cpi	r24, 0x08	; 8
 6fc:	b0 f5       	brcc	.+108    	; 0x76a <DIO_u8GetPinValue+0x98>
		switch (Copy_u8Port){
 6fe:	8a 81       	ldd	r24, Y+2	; 0x02
 700:	28 2f       	mov	r18, r24
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	3f 83       	std	Y+7, r19	; 0x07
 706:	2e 83       	std	Y+6, r18	; 0x06
 708:	8e 81       	ldd	r24, Y+6	; 0x06
 70a:	9f 81       	ldd	r25, Y+7	; 0x07
 70c:	81 30       	cpi	r24, 0x01	; 1
 70e:	91 05       	cpc	r25, r1
 710:	d1 f0       	breq	.+52     	; 0x746 <DIO_u8GetPinValue+0x74>
 712:	2e 81       	ldd	r18, Y+6	; 0x06
 714:	3f 81       	ldd	r19, Y+7	; 0x07
 716:	22 30       	cpi	r18, 0x02	; 2
 718:	31 05       	cpc	r19, r1
 71a:	2c f4       	brge	.+10     	; 0x726 <DIO_u8GetPinValue+0x54>
 71c:	8e 81       	ldd	r24, Y+6	; 0x06
 71e:	9f 81       	ldd	r25, Y+7	; 0x07
 720:	00 97       	sbiw	r24, 0x00	; 0
 722:	61 f0       	breq	.+24     	; 0x73c <DIO_u8GetPinValue+0x6a>
 724:	1f c0       	rjmp	.+62     	; 0x764 <DIO_u8GetPinValue+0x92>
 726:	2e 81       	ldd	r18, Y+6	; 0x06
 728:	3f 81       	ldd	r19, Y+7	; 0x07
 72a:	22 30       	cpi	r18, 0x02	; 2
 72c:	31 05       	cpc	r19, r1
 72e:	81 f0       	breq	.+32     	; 0x750 <DIO_u8GetPinValue+0x7e>
 730:	8e 81       	ldd	r24, Y+6	; 0x06
 732:	9f 81       	ldd	r25, Y+7	; 0x07
 734:	83 30       	cpi	r24, 0x03	; 3
 736:	91 05       	cpc	r25, r1
 738:	81 f0       	breq	.+32     	; 0x75a <DIO_u8GetPinValue+0x88>
 73a:	14 c0       	rjmp	.+40     	; 0x764 <DIO_u8GetPinValue+0x92>
				  case DIO_u8PORTA: * Copy_pu8Value =Copy_u8Pin ;break;
 73c:	ec 81       	ldd	r30, Y+4	; 0x04
 73e:	fd 81       	ldd	r31, Y+5	; 0x05
 740:	8b 81       	ldd	r24, Y+3	; 0x03
 742:	80 83       	st	Z, r24
 744:	14 c0       	rjmp	.+40     	; 0x76e <DIO_u8GetPinValue+0x9c>
				  case DIO_u8PORTB: * Copy_pu8Value =Copy_u8Pin ;break;
 746:	ec 81       	ldd	r30, Y+4	; 0x04
 748:	fd 81       	ldd	r31, Y+5	; 0x05
 74a:	8b 81       	ldd	r24, Y+3	; 0x03
 74c:	80 83       	st	Z, r24
 74e:	0f c0       	rjmp	.+30     	; 0x76e <DIO_u8GetPinValue+0x9c>
				  case DIO_u8PORTC: * Copy_pu8Value =Copy_u8Pin ;break;
 750:	ec 81       	ldd	r30, Y+4	; 0x04
 752:	fd 81       	ldd	r31, Y+5	; 0x05
 754:	8b 81       	ldd	r24, Y+3	; 0x03
 756:	80 83       	st	Z, r24
 758:	0a c0       	rjmp	.+20     	; 0x76e <DIO_u8GetPinValue+0x9c>
				  case DIO_u8PORTD: * Copy_pu8Value =Copy_u8Pin ;break;
 75a:	ec 81       	ldd	r30, Y+4	; 0x04
 75c:	fd 81       	ldd	r31, Y+5	; 0x05
 75e:	8b 81       	ldd	r24, Y+3	; 0x03
 760:	80 83       	st	Z, r24
 762:	05 c0       	rjmp	.+10     	; 0x76e <DIO_u8GetPinValue+0x9c>
				  default: Local_u8ErrorState=1;
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	89 83       	std	Y+1, r24	; 0x01
 768:	02 c0       	rjmp	.+4      	; 0x76e <DIO_u8GetPinValue+0x9c>
				  }
	}
	else{Local_u8ErrorState=1;}
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
 76e:	89 81       	ldd	r24, Y+1	; 0x01
}
 770:	27 96       	adiw	r28, 0x07	; 7
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	f8 94       	cli
 776:	de bf       	out	0x3e, r29	; 62
 778:	0f be       	out	0x3f, r0	; 63
 77a:	cd bf       	out	0x3d, r28	; 61
 77c:	cf 91       	pop	r28
 77e:	df 91       	pop	r29
 780:	08 95       	ret

00000782 <_exit>:
 782:	f8 94       	cli

00000784 <__stop_program>:
 784:	ff cf       	rjmp	.-2      	; 0x784 <__stop_program>
