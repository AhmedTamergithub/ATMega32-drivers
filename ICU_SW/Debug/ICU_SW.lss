
ICU_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00001fc4  00002058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800084  00800084  0000207c  2**0
                  ALLOC
  3 .stab         00001ac4  00000000  00000000  0000207c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c4f  00000000  00000000  00003b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000478f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000048cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006688  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007573  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008320  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008480  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000870d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008edb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 45 0b 	jmp	0x168a	; 0x168a <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c5 08 	call	0x118a	; 0x118a <main>
      8a:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e7       	ldi	r26, 0x7C	; 124
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e7       	ldi	r24, 0x7C	; 124
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_voidEnable>:
#include "BIT_Calc.h"
#include "STD_Types.h"
#include "GIE_private.h"
#include "GIE_interface.h"

void GIE_voidEnable(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,SREG_I);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <GIE_voidDisable>:
void GIE_voidDisable(void){
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(SREG,SREG_I);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <DIO_u8SetPinDirection>:
#include "STD_Types.h"
#include "GPIO_config.h"
#include "GPIO_private.h"
#include "GPIO_interface.h"

u8  DIO_u8SetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	28 97       	sbiw	r28, 0x08	; 8
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	8a 83       	std	Y+2, r24	; 0x02
     b94:	6b 83       	std	Y+3, r22	; 0x03
     b96:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     b98:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin<=DIO_u8PIN7 )
     b9a:	8b 81       	ldd	r24, Y+3	; 0x03
     b9c:	88 30       	cpi	r24, 0x08	; 8
     b9e:	08 f0       	brcs	.+2      	; 0xba2 <DIO_u8SetPinDirection+0x24>
     ba0:	f4 c0       	rjmp	.+488    	; 0xd8a <DIO_u8SetPinDirection+0x20c>
	{
		if ( Copy_u8Direction==DIO_u8PIN_INPUT){
     ba2:	8c 81       	ldd	r24, Y+4	; 0x04
     ba4:	88 23       	and	r24, r24
     ba6:	09 f0       	breq	.+2      	; 0xbaa <DIO_u8SetPinDirection+0x2c>
     ba8:	77 c0       	rjmp	.+238    	; 0xc98 <DIO_u8SetPinDirection+0x11a>
			switch (Copy_u8Port)
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	28 2f       	mov	r18, r24
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	38 87       	std	Y+8, r19	; 0x08
     bb2:	2f 83       	std	Y+7, r18	; 0x07
     bb4:	8f 81       	ldd	r24, Y+7	; 0x07
     bb6:	98 85       	ldd	r25, Y+8	; 0x08
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	91 05       	cpc	r25, r1
     bbc:	59 f1       	breq	.+86     	; 0xc14 <DIO_u8SetPinDirection+0x96>
     bbe:	2f 81       	ldd	r18, Y+7	; 0x07
     bc0:	38 85       	ldd	r19, Y+8	; 0x08
     bc2:	22 30       	cpi	r18, 0x02	; 2
     bc4:	31 05       	cpc	r19, r1
     bc6:	2c f4       	brge	.+10     	; 0xbd2 <DIO_u8SetPinDirection+0x54>
     bc8:	8f 81       	ldd	r24, Y+7	; 0x07
     bca:	98 85       	ldd	r25, Y+8	; 0x08
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	69 f0       	breq	.+26     	; 0xbea <DIO_u8SetPinDirection+0x6c>
     bd0:	60 c0       	rjmp	.+192    	; 0xc92 <DIO_u8SetPinDirection+0x114>
     bd2:	2f 81       	ldd	r18, Y+7	; 0x07
     bd4:	38 85       	ldd	r19, Y+8	; 0x08
     bd6:	22 30       	cpi	r18, 0x02	; 2
     bd8:	31 05       	cpc	r19, r1
     bda:	89 f1       	breq	.+98     	; 0xc3e <DIO_u8SetPinDirection+0xc0>
     bdc:	8f 81       	ldd	r24, Y+7	; 0x07
     bde:	98 85       	ldd	r25, Y+8	; 0x08
     be0:	83 30       	cpi	r24, 0x03	; 3
     be2:	91 05       	cpc	r25, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <DIO_u8SetPinDirection+0x6a>
     be6:	40 c0       	rjmp	.+128    	; 0xc68 <DIO_u8SetPinDirection+0xea>
     be8:	54 c0       	rjmp	.+168    	; 0xc92 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: Clr_Bit(DDRA,Copy_u8Pin);break;
     bea:	aa e3       	ldi	r26, 0x3A	; 58
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	ea e3       	ldi	r30, 0x3A	; 58
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	48 2f       	mov	r20, r24
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	02 2e       	mov	r0, r18
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <DIO_u8SetPinDirection+0x8a>
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	0a 94       	dec	r0
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <DIO_u8SetPinDirection+0x86>
     c0c:	80 95       	com	r24
     c0e:	84 23       	and	r24, r20
     c10:	8c 93       	st	X, r24
     c12:	bd c0       	rjmp	.+378    	; 0xd8e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB:Clr_Bit(DDRB,Copy_u8Pin); break;
     c14:	a7 e3       	ldi	r26, 0x37	; 55
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e7 e3       	ldi	r30, 0x37	; 55
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	48 2f       	mov	r20, r24
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <DIO_u8SetPinDirection+0xb4>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <DIO_u8SetPinDirection+0xb0>
     c36:	80 95       	com	r24
     c38:	84 23       	and	r24, r20
     c3a:	8c 93       	st	X, r24
     c3c:	a8 c0       	rjmp	.+336    	; 0xd8e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC:Clr_Bit(DDRC,Copy_u8Pin); break;
     c3e:	a4 e3       	ldi	r26, 0x34	; 52
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e4 e3       	ldi	r30, 0x34	; 52
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	48 2f       	mov	r20, r24
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 2e       	mov	r0, r18
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <DIO_u8SetPinDirection+0xde>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	0a 94       	dec	r0
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <DIO_u8SetPinDirection+0xda>
     c60:	80 95       	com	r24
     c62:	84 23       	and	r24, r20
     c64:	8c 93       	st	X, r24
     c66:	93 c0       	rjmp	.+294    	; 0xd8e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD:Clr_Bit(DDRD,Copy_u8Pin); break;
     c68:	a1 e3       	ldi	r26, 0x31	; 49
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e1 e3       	ldi	r30, 0x31	; 49
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	48 2f       	mov	r20, r24
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	02 2e       	mov	r0, r18
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <DIO_u8SetPinDirection+0x108>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <DIO_u8SetPinDirection+0x104>
     c8a:	80 95       	com	r24
     c8c:	84 23       	and	r24, r20
     c8e:	8c 93       	st	X, r24
     c90:	7e c0       	rjmp	.+252    	; 0xd8e <DIO_u8SetPinDirection+0x210>
			default:Local_u8ErrorState=1;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	7b c0       	rjmp	.+246    	; 0xd8e <DIO_u8SetPinDirection+0x210>
			}
		}
			else if ( Copy_u8Direction==DIO_u8PIN_OUTPUT){
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	09 f0       	breq	.+2      	; 0xca0 <DIO_u8SetPinDirection+0x122>
     c9e:	72 c0       	rjmp	.+228    	; 0xd84 <DIO_u8SetPinDirection+0x206>
				switch (Copy_u8Port)
     ca0:	8a 81       	ldd	r24, Y+2	; 0x02
     ca2:	28 2f       	mov	r18, r24
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	3e 83       	std	Y+6, r19	; 0x06
     ca8:	2d 83       	std	Y+5, r18	; 0x05
     caa:	8d 81       	ldd	r24, Y+5	; 0x05
     cac:	9e 81       	ldd	r25, Y+6	; 0x06
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	91 05       	cpc	r25, r1
     cb2:	49 f1       	breq	.+82     	; 0xd06 <DIO_u8SetPinDirection+0x188>
     cb4:	2d 81       	ldd	r18, Y+5	; 0x05
     cb6:	3e 81       	ldd	r19, Y+6	; 0x06
     cb8:	22 30       	cpi	r18, 0x02	; 2
     cba:	31 05       	cpc	r19, r1
     cbc:	2c f4       	brge	.+10     	; 0xcc8 <DIO_u8SetPinDirection+0x14a>
     cbe:	8d 81       	ldd	r24, Y+5	; 0x05
     cc0:	9e 81       	ldd	r25, Y+6	; 0x06
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	61 f0       	breq	.+24     	; 0xcde <DIO_u8SetPinDirection+0x160>
     cc6:	5b c0       	rjmp	.+182    	; 0xd7e <DIO_u8SetPinDirection+0x200>
     cc8:	2d 81       	ldd	r18, Y+5	; 0x05
     cca:	3e 81       	ldd	r19, Y+6	; 0x06
     ccc:	22 30       	cpi	r18, 0x02	; 2
     cce:	31 05       	cpc	r19, r1
     cd0:	71 f1       	breq	.+92     	; 0xd2e <DIO_u8SetPinDirection+0x1b0>
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	83 30       	cpi	r24, 0x03	; 3
     cd8:	91 05       	cpc	r25, r1
     cda:	e9 f1       	breq	.+122    	; 0xd56 <DIO_u8SetPinDirection+0x1d8>
     cdc:	50 c0       	rjmp	.+160    	; 0xd7e <DIO_u8SetPinDirection+0x200>
				{
				case DIO_u8PORTA:Set_Bit(DDRA,Copy_u8Pin);break;
     cde:	aa e3       	ldi	r26, 0x3A	; 58
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ea e3       	ldi	r30, 0x3A	; 58
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	48 2f       	mov	r20, r24
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	02 2e       	mov	r0, r18
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <DIO_u8SetPinDirection+0x17e>
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	0a 94       	dec	r0
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <DIO_u8SetPinDirection+0x17a>
     d00:	84 2b       	or	r24, r20
     d02:	8c 93       	st	X, r24
     d04:	44 c0       	rjmp	.+136    	; 0xd8e <DIO_u8SetPinDirection+0x210>
				case DIO_u8PORTB:Set_Bit(DDRB,Copy_u8Pin); break;
     d06:	a7 e3       	ldi	r26, 0x37	; 55
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e7 e3       	ldi	r30, 0x37	; 55
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	48 2f       	mov	r20, r24
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	02 2e       	mov	r0, r18
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <DIO_u8SetPinDirection+0x1a6>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	0a 94       	dec	r0
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <DIO_u8SetPinDirection+0x1a2>
     d28:	84 2b       	or	r24, r20
     d2a:	8c 93       	st	X, r24
     d2c:	30 c0       	rjmp	.+96     	; 0xd8e <DIO_u8SetPinDirection+0x210>
				case DIO_u8PORTC:Set_Bit(DDRC,Copy_u8Pin); break;
     d2e:	a4 e3       	ldi	r26, 0x34	; 52
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e4 e3       	ldi	r30, 0x34	; 52
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	48 2f       	mov	r20, r24
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_u8SetPinDirection+0x1ce>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_u8SetPinDirection+0x1ca>
     d50:	84 2b       	or	r24, r20
     d52:	8c 93       	st	X, r24
     d54:	1c c0       	rjmp	.+56     	; 0xd8e <DIO_u8SetPinDirection+0x210>
				case DIO_u8PORTD:Set_Bit(DDRD,Copy_u8Pin); break;
     d56:	a1 e3       	ldi	r26, 0x31	; 49
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e1 e3       	ldi	r30, 0x31	; 49
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_u8SetPinDirection+0x1f6>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_u8SetPinDirection+0x1f2>
     d78:	84 2b       	or	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	08 c0       	rjmp	.+16     	; 0xd8e <DIO_u8SetPinDirection+0x210>
				default:Local_u8ErrorState=1;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	89 83       	std	Y+1, r24	; 0x01
     d82:	05 c0       	rjmp	.+10     	; 0xd8e <DIO_u8SetPinDirection+0x210>
				}

			}
			else{ Local_u8ErrorState=1;}
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <DIO_u8SetPinDirection+0x210>


	}
	else {Local_u8ErrorState=1;}
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d90:	28 96       	adiw	r28, 0x08	; 8
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <DIO_u8SetPortDirection>:


u8  DIO_u8SetPortDirection (u8 Copy_u8Port, u8 Copy_u8Direction){
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	00 d0       	rcall	.+0      	; 0xda8 <DIO_u8SetPortDirection+0x6>
     da8:	00 d0       	rcall	.+0      	; 0xdaa <DIO_u8SetPortDirection+0x8>
     daa:	0f 92       	push	r0
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	8a 83       	std	Y+2, r24	; 0x02
     db2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     db4:	19 82       	std	Y+1, r1	; 0x01


	  switch (Copy_u8Port){
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	3d 83       	std	Y+5, r19	; 0x05
     dbe:	2c 83       	std	Y+4, r18	; 0x04
     dc0:	8c 81       	ldd	r24, Y+4	; 0x04
     dc2:	9d 81       	ldd	r25, Y+5	; 0x05
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	91 05       	cpc	r25, r1
     dc8:	d1 f0       	breq	.+52     	; 0xdfe <DIO_u8SetPortDirection+0x5c>
     dca:	2c 81       	ldd	r18, Y+4	; 0x04
     dcc:	3d 81       	ldd	r19, Y+5	; 0x05
     dce:	22 30       	cpi	r18, 0x02	; 2
     dd0:	31 05       	cpc	r19, r1
     dd2:	2c f4       	brge	.+10     	; 0xdde <DIO_u8SetPortDirection+0x3c>
     dd4:	8c 81       	ldd	r24, Y+4	; 0x04
     dd6:	9d 81       	ldd	r25, Y+5	; 0x05
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	61 f0       	breq	.+24     	; 0xdf4 <DIO_u8SetPortDirection+0x52>
     ddc:	1e c0       	rjmp	.+60     	; 0xe1a <DIO_u8SetPortDirection+0x78>
     dde:	2c 81       	ldd	r18, Y+4	; 0x04
     de0:	3d 81       	ldd	r19, Y+5	; 0x05
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	81 f0       	breq	.+32     	; 0xe08 <DIO_u8SetPortDirection+0x66>
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	9d 81       	ldd	r25, Y+5	; 0x05
     dec:	83 30       	cpi	r24, 0x03	; 3
     dee:	91 05       	cpc	r25, r1
     df0:	81 f0       	breq	.+32     	; 0xe12 <DIO_u8SetPortDirection+0x70>
     df2:	13 c0       	rjmp	.+38     	; 0xe1a <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
     df4:	ea e3       	ldi	r30, 0x3A	; 58
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	80 83       	st	Z, r24
     dfc:	0e c0       	rjmp	.+28     	; 0xe1a <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
     dfe:	e7 e3       	ldi	r30, 0x37	; 55
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	80 83       	st	Z, r24
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
     e08:	e4 e3       	ldi	r30, 0x34	; 52
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	80 83       	st	Z, r24
     e10:	04 c0       	rjmp	.+8      	; 0xe1a <DIO_u8SetPortDirection+0x78>
	  case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
     e12:	e1 e3       	ldi	r30, 0x31	; 49
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	80 83       	st	Z, r24
	  }




	return Local_u8ErrorState;
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <DIO_u8SetPinValue>:




u8  DIO_u8SetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	28 97       	sbiw	r28, 0x08	; 8
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	8a 83       	std	Y+2, r24	; 0x02
     e42:	6b 83       	std	Y+3, r22	; 0x03
     e44:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     e46:	19 82       	std	Y+1, r1	; 0x01
	if ( Copy_u8Pin<=DIO_u8PIN7 )
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	88 30       	cpi	r24, 0x08	; 8
     e4c:	08 f0       	brcs	.+2      	; 0xe50 <DIO_u8SetPinValue+0x24>
     e4e:	f4 c0       	rjmp	.+488    	; 0x1038 <DIO_u8SetPinValue+0x20c>
	{
		if ( Copy_u8Value==DIO_u8PIN_LOW){
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	88 23       	and	r24, r24
     e54:	09 f0       	breq	.+2      	; 0xe58 <DIO_u8SetPinValue+0x2c>
     e56:	77 c0       	rjmp	.+238    	; 0xf46 <DIO_u8SetPinValue+0x11a>
			switch (Copy_u8Port)
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	38 87       	std	Y+8, r19	; 0x08
     e60:	2f 83       	std	Y+7, r18	; 0x07
     e62:	8f 81       	ldd	r24, Y+7	; 0x07
     e64:	98 85       	ldd	r25, Y+8	; 0x08
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	91 05       	cpc	r25, r1
     e6a:	59 f1       	breq	.+86     	; 0xec2 <DIO_u8SetPinValue+0x96>
     e6c:	2f 81       	ldd	r18, Y+7	; 0x07
     e6e:	38 85       	ldd	r19, Y+8	; 0x08
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	2c f4       	brge	.+10     	; 0xe80 <DIO_u8SetPinValue+0x54>
     e76:	8f 81       	ldd	r24, Y+7	; 0x07
     e78:	98 85       	ldd	r25, Y+8	; 0x08
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	69 f0       	breq	.+26     	; 0xe98 <DIO_u8SetPinValue+0x6c>
     e7e:	60 c0       	rjmp	.+192    	; 0xf40 <DIO_u8SetPinValue+0x114>
     e80:	2f 81       	ldd	r18, Y+7	; 0x07
     e82:	38 85       	ldd	r19, Y+8	; 0x08
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	89 f1       	breq	.+98     	; 0xeec <DIO_u8SetPinValue+0xc0>
     e8a:	8f 81       	ldd	r24, Y+7	; 0x07
     e8c:	98 85       	ldd	r25, Y+8	; 0x08
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	91 05       	cpc	r25, r1
     e92:	09 f4       	brne	.+2      	; 0xe96 <DIO_u8SetPinValue+0x6a>
     e94:	40 c0       	rjmp	.+128    	; 0xf16 <DIO_u8SetPinValue+0xea>
     e96:	54 c0       	rjmp	.+168    	; 0xf40 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: Clr_Bit(PORTA,Copy_u8Pin);break;
     e98:	ab e3       	ldi	r26, 0x3B	; 59
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	eb e3       	ldi	r30, 0x3B	; 59
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_u8SetPinValue+0x8a>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_u8SetPinValue+0x86>
     eba:	80 95       	com	r24
     ebc:	84 23       	and	r24, r20
     ebe:	8c 93       	st	X, r24
     ec0:	bd c0       	rjmp	.+378    	; 0x103c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:Clr_Bit(PORTB,Copy_u8Pin); break;
     ec2:	a8 e3       	ldi	r26, 0x38	; 56
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e8 e3       	ldi	r30, 0x38	; 56
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_u8SetPinValue+0xb4>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_u8SetPinValue+0xb0>
     ee4:	80 95       	com	r24
     ee6:	84 23       	and	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	a8 c0       	rjmp	.+336    	; 0x103c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:Clr_Bit(PORTC,Copy_u8Pin); break;
     eec:	a5 e3       	ldi	r26, 0x35	; 53
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e5 e3       	ldi	r30, 0x35	; 53
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_u8SetPinValue+0xde>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_u8SetPinValue+0xda>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	93 c0       	rjmp	.+294    	; 0x103c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:Clr_Bit(PORTD,Copy_u8Pin); break;
     f16:	a2 e3       	ldi	r26, 0x32	; 50
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e2 e3       	ldi	r30, 0x32	; 50
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_u8SetPinValue+0x108>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_u8SetPinValue+0x104>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	7e c0       	rjmp	.+252    	; 0x103c <DIO_u8SetPinValue+0x210>
			default:Local_u8ErrorState=1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	7b c0       	rjmp	.+246    	; 0x103c <DIO_u8SetPinValue+0x210>
			}
		}
		else if ( Copy_u8Value==DIO_u8PIN_HIGH){
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	09 f0       	breq	.+2      	; 0xf4e <DIO_u8SetPinValue+0x122>
     f4c:	72 c0       	rjmp	.+228    	; 0x1032 <DIO_u8SetPinValue+0x206>
			switch (Copy_u8Port)
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	3e 83       	std	Y+6, r19	; 0x06
     f56:	2d 83       	std	Y+5, r18	; 0x05
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	9e 81       	ldd	r25, Y+6	; 0x06
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	91 05       	cpc	r25, r1
     f60:	49 f1       	breq	.+82     	; 0xfb4 <DIO_u8SetPinValue+0x188>
     f62:	2d 81       	ldd	r18, Y+5	; 0x05
     f64:	3e 81       	ldd	r19, Y+6	; 0x06
     f66:	22 30       	cpi	r18, 0x02	; 2
     f68:	31 05       	cpc	r19, r1
     f6a:	2c f4       	brge	.+10     	; 0xf76 <DIO_u8SetPinValue+0x14a>
     f6c:	8d 81       	ldd	r24, Y+5	; 0x05
     f6e:	9e 81       	ldd	r25, Y+6	; 0x06
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	61 f0       	breq	.+24     	; 0xf8c <DIO_u8SetPinValue+0x160>
     f74:	5b c0       	rjmp	.+182    	; 0x102c <DIO_u8SetPinValue+0x200>
     f76:	2d 81       	ldd	r18, Y+5	; 0x05
     f78:	3e 81       	ldd	r19, Y+6	; 0x06
     f7a:	22 30       	cpi	r18, 0x02	; 2
     f7c:	31 05       	cpc	r19, r1
     f7e:	71 f1       	breq	.+92     	; 0xfdc <DIO_u8SetPinValue+0x1b0>
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	83 30       	cpi	r24, 0x03	; 3
     f86:	91 05       	cpc	r25, r1
     f88:	e9 f1       	breq	.+122    	; 0x1004 <DIO_u8SetPinValue+0x1d8>
     f8a:	50 c0       	rjmp	.+160    	; 0x102c <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA:Set_Bit(PORTA,Copy_u8Pin);break;
     f8c:	ab e3       	ldi	r26, 0x3B	; 59
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	eb e3       	ldi	r30, 0x3B	; 59
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_u8SetPinValue+0x17e>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_u8SetPinValue+0x17a>
     fae:	84 2b       	or	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	44 c0       	rjmp	.+136    	; 0x103c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:Set_Bit(PORTB,Copy_u8Pin); break;
     fb4:	a8 e3       	ldi	r26, 0x38	; 56
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e8 e3       	ldi	r30, 0x38	; 56
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_u8SetPinValue+0x1a6>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_u8SetPinValue+0x1a2>
     fd6:	84 2b       	or	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	30 c0       	rjmp	.+96     	; 0x103c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:Set_Bit(PORTC,Copy_u8Pin); break;
     fdc:	a5 e3       	ldi	r26, 0x35	; 53
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e5 e3       	ldi	r30, 0x35	; 53
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_u8SetPinValue+0x1ce>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_u8SetPinValue+0x1ca>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	1c c0       	rjmp	.+56     	; 0x103c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:Set_Bit(PORTD,Copy_u8Pin); break;
    1004:	a2 e3       	ldi	r26, 0x32	; 50
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e2 e3       	ldi	r30, 0x32	; 50
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_u8SetPinValue+0x1f6>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_u8SetPinValue+0x1f2>
    1026:	84 2b       	or	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	08 c0       	rjmp	.+16     	; 0x103c <DIO_u8SetPinValue+0x210>
			default:Local_u8ErrorState=1;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	05 c0       	rjmp	.+10     	; 0x103c <DIO_u8SetPinValue+0x210>
			}

		}
		else{ Local_u8ErrorState=1;}
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_u8SetPinValue+0x210>


	}

	else {Local_u8ErrorState=1;}
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    103c:	89 81       	ldd	r24, Y+1	; 0x01
}
    103e:	28 96       	adiw	r28, 0x08	; 8
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <DIO_u8SetPortValue>:





u8  DIO_u8SetPortValue (u8 Copy_u8Port, u8 Copy_u8Value){
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	00 d0       	rcall	.+0      	; 0x1056 <DIO_u8SetPortValue+0x6>
    1056:	00 d0       	rcall	.+0      	; 0x1058 <DIO_u8SetPortValue+0x8>
    1058:	0f 92       	push	r0
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	8a 83       	std	Y+2, r24	; 0x02
    1060:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1062:	19 82       	std	Y+1, r1	; 0x01


	switch (Copy_u8Port){
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3d 83       	std	Y+5, r19	; 0x05
    106c:	2c 83       	std	Y+4, r18	; 0x04
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	9d 81       	ldd	r25, Y+5	; 0x05
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	d1 f0       	breq	.+52     	; 0x10ac <DIO_u8SetPortValue+0x5c>
    1078:	2c 81       	ldd	r18, Y+4	; 0x04
    107a:	3d 81       	ldd	r19, Y+5	; 0x05
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	2c f4       	brge	.+10     	; 0x108c <DIO_u8SetPortValue+0x3c>
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	61 f0       	breq	.+24     	; 0x10a2 <DIO_u8SetPortValue+0x52>
    108a:	1e c0       	rjmp	.+60     	; 0x10c8 <DIO_u8SetPortValue+0x78>
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	3d 81       	ldd	r19, Y+5	; 0x05
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	81 f0       	breq	.+32     	; 0x10b6 <DIO_u8SetPortValue+0x66>
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	9d 81       	ldd	r25, Y+5	; 0x05
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	91 05       	cpc	r25, r1
    109e:	81 f0       	breq	.+32     	; 0x10c0 <DIO_u8SetPortValue+0x70>
    10a0:	13 c0       	rjmp	.+38     	; 0x10c8 <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTA: PORTA=Copy_u8Value;break;
    10a2:	eb e3       	ldi	r30, 0x3B	; 59
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	80 83       	st	Z, r24
    10aa:	0e c0       	rjmp	.+28     	; 0x10c8 <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTB: PORTB=Copy_u8Value;break;
    10ac:	e8 e3       	ldi	r30, 0x38	; 56
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	80 83       	st	Z, r24
    10b4:	09 c0       	rjmp	.+18     	; 0x10c8 <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTC: PORTC=Copy_u8Value;break;
    10b6:	e5 e3       	ldi	r30, 0x35	; 53
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	80 83       	st	Z, r24
    10be:	04 c0       	rjmp	.+8      	; 0x10c8 <DIO_u8SetPortValue+0x78>
		  case DIO_u8PORTD: PORTD=Copy_u8Value;break;
    10c0:	e2 e3       	ldi	r30, 0x32	; 50
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	80 83       	st	Z, r24

		  }

	return Local_u8ErrorState;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <DIO_u8GetPinValue>:

u8  DIO_u8GetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value){
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	27 97       	sbiw	r28, 0x07	; 7
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	8a 83       	std	Y+2, r24	; 0x02
    10f0:	6b 83       	std	Y+3, r22	; 0x03
    10f2:	5d 83       	std	Y+5, r21	; 0x05
    10f4:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
    10f6:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7)){
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	c9 f1       	breq	.+114    	; 0x1172 <DIO_u8GetPinValue+0x98>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	88 30       	cpi	r24, 0x08	; 8
    1104:	b0 f5       	brcc	.+108    	; 0x1172 <DIO_u8GetPinValue+0x98>
		switch (Copy_u8Port){
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	3f 83       	std	Y+7, r19	; 0x07
    110e:	2e 83       	std	Y+6, r18	; 0x06
    1110:	8e 81       	ldd	r24, Y+6	; 0x06
    1112:	9f 81       	ldd	r25, Y+7	; 0x07
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	91 05       	cpc	r25, r1
    1118:	d1 f0       	breq	.+52     	; 0x114e <DIO_u8GetPinValue+0x74>
    111a:	2e 81       	ldd	r18, Y+6	; 0x06
    111c:	3f 81       	ldd	r19, Y+7	; 0x07
    111e:	22 30       	cpi	r18, 0x02	; 2
    1120:	31 05       	cpc	r19, r1
    1122:	2c f4       	brge	.+10     	; 0x112e <DIO_u8GetPinValue+0x54>
    1124:	8e 81       	ldd	r24, Y+6	; 0x06
    1126:	9f 81       	ldd	r25, Y+7	; 0x07
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	61 f0       	breq	.+24     	; 0x1144 <DIO_u8GetPinValue+0x6a>
    112c:	1f c0       	rjmp	.+62     	; 0x116c <DIO_u8GetPinValue+0x92>
    112e:	2e 81       	ldd	r18, Y+6	; 0x06
    1130:	3f 81       	ldd	r19, Y+7	; 0x07
    1132:	22 30       	cpi	r18, 0x02	; 2
    1134:	31 05       	cpc	r19, r1
    1136:	81 f0       	breq	.+32     	; 0x1158 <DIO_u8GetPinValue+0x7e>
    1138:	8e 81       	ldd	r24, Y+6	; 0x06
    113a:	9f 81       	ldd	r25, Y+7	; 0x07
    113c:	83 30       	cpi	r24, 0x03	; 3
    113e:	91 05       	cpc	r25, r1
    1140:	81 f0       	breq	.+32     	; 0x1162 <DIO_u8GetPinValue+0x88>
    1142:	14 c0       	rjmp	.+40     	; 0x116c <DIO_u8GetPinValue+0x92>
				  case DIO_u8PORTA: * Copy_pu8Value =Copy_u8Pin ;break;
    1144:	ec 81       	ldd	r30, Y+4	; 0x04
    1146:	fd 81       	ldd	r31, Y+5	; 0x05
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	80 83       	st	Z, r24
    114c:	14 c0       	rjmp	.+40     	; 0x1176 <DIO_u8GetPinValue+0x9c>
				  case DIO_u8PORTB: * Copy_pu8Value =Copy_u8Pin ;break;
    114e:	ec 81       	ldd	r30, Y+4	; 0x04
    1150:	fd 81       	ldd	r31, Y+5	; 0x05
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	80 83       	st	Z, r24
    1156:	0f c0       	rjmp	.+30     	; 0x1176 <DIO_u8GetPinValue+0x9c>
				  case DIO_u8PORTC: * Copy_pu8Value =Copy_u8Pin ;break;
    1158:	ec 81       	ldd	r30, Y+4	; 0x04
    115a:	fd 81       	ldd	r31, Y+5	; 0x05
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	80 83       	st	Z, r24
    1160:	0a c0       	rjmp	.+20     	; 0x1176 <DIO_u8GetPinValue+0x9c>
				  case DIO_u8PORTD: * Copy_pu8Value =Copy_u8Pin ;break;
    1162:	ec 81       	ldd	r30, Y+4	; 0x04
    1164:	fd 81       	ldd	r31, Y+5	; 0x05
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	80 83       	st	Z, r24
    116a:	05 c0       	rjmp	.+10     	; 0x1176 <DIO_u8GetPinValue+0x9c>
				  default: Local_u8ErrorState=1;
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_u8GetPinValue+0x9c>
				  }
	}
	else{Local_u8ErrorState=1;}
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    1176:	89 81       	ldd	r24, Y+1	; 0x01
}
    1178:	27 96       	adiw	r28, 0x07	; 7
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <main>:
static s32 PeriodTicks = 0;
static s32 ONTICKS = 0;

void ICU_SW(void);

void main(void) {
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN3, DIO_u8PIN_OUTPUT); // Generate PWM signal
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	63 e0       	ldi	r22, 0x03	; 3
    1196:	41 e0       	ldi	r20, 0x01	; 1
    1198:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PIN_INPUT);  // Input triggered by PWM signal edges
    119c:	83 e0       	ldi	r24, 0x03	; 3
    119e:	62 e0       	ldi	r22, 0x02	; 2
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN2, 0);
    11a6:	83 e0       	ldi	r24, 0x03	; 3
    11a8:	62 e0       	ldi	r22, 0x02	; 2
    11aa:	40 e0       	ldi	r20, 0x00	; 0
    11ac:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_u8SetPinValue>



	TIMER1_voidInit();
    11b0:	0e 94 d6 09 	call	0x13ac	; 0x13ac <TIMER1_voidInit>
	TIMER0_voidInit();
    11b4:	0e 94 9a 09 	call	0x1334	; 0x1334 <TIMER0_voidInit>


	EXTI_voidInt0init(rising_edge); // Initialize INT0 with rising edge trigger
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	0e 94 39 0a 	call	0x1472	; 0x1472 <EXTI_voidInt0init>
			EXTI_u8INT0SetCallBack(&ICU_SW); // Set ICU_SW as the callback for INT0
    11be:	80 e3       	ldi	r24, 0x30	; 48
    11c0:	99 e0       	ldi	r25, 0x09	; 9
    11c2:	0e 94 28 0b 	call	0x1650	; 0x1650 <EXTI_u8INT0SetCallBack>
			GIE_voidEnable();
    11c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GIE_voidEnable>
	LCD_voidInit();
    11ca:	0e 94 b6 0b 	call	0x176c	; 0x176c <LCD_voidInit>


	while (1) {
		while (PeriodTicks == 0 && ONTICKS == 0); // Wait until both are non-zero
    11ce:	80 91 84 00 	lds	r24, 0x0084
    11d2:	90 91 85 00 	lds	r25, 0x0085
    11d6:	a0 91 86 00 	lds	r26, 0x0086
    11da:	b0 91 87 00 	lds	r27, 0x0087
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	a1 05       	cpc	r26, r1
    11e2:	b1 05       	cpc	r27, r1
    11e4:	61 f4       	brne	.+24     	; 0x11fe <main+0x74>
    11e6:	80 91 88 00 	lds	r24, 0x0088
    11ea:	90 91 89 00 	lds	r25, 0x0089
    11ee:	a0 91 8a 00 	lds	r26, 0x008A
    11f2:	b0 91 8b 00 	lds	r27, 0x008B
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	a1 05       	cpc	r26, r1
    11fa:	b1 05       	cpc	r27, r1
    11fc:	41 f3       	breq	.-48     	; 0x11ce <main+0x44>


		// Display PeriodTicks on the LCD
		LCD_voidSetPos(0, 0);
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_voidSetPos>
		LCD_voidSendString("PeriodTicks:");
    1206:	80 e6       	ldi	r24, 0x60	; 96
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_voidSendString>
		LCD_voidSendNumber(PeriodTicks);
    120e:	80 91 84 00 	lds	r24, 0x0084
    1212:	90 91 85 00 	lds	r25, 0x0085
    1216:	a0 91 86 00 	lds	r26, 0x0086
    121a:	b0 91 87 00 	lds	r27, 0x0087
    121e:	bc 01       	movw	r22, r24
    1220:	cd 01       	movw	r24, r26
    1222:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <LCD_voidSendNumber>

		// Display ONTICKS on the LCD
		LCD_voidSetPos(1, 0);
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_voidSetPos>
		LCD_voidSendString("ONTICKS:");
    122e:	8d e6       	ldi	r24, 0x6D	; 109
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_voidSendString>
		LCD_voidSendNumber(ONTICKS);
    1236:	80 91 88 00 	lds	r24, 0x0088
    123a:	90 91 89 00 	lds	r25, 0x0089
    123e:	a0 91 8a 00 	lds	r26, 0x008A
    1242:	b0 91 8b 00 	lds	r27, 0x008B
    1246:	bc 01       	movw	r22, r24
    1248:	cd 01       	movw	r24, r26
    124a:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <LCD_voidSendNumber>
		ONTICKS=0;
    124e:	10 92 88 00 	sts	0x0088, r1
    1252:	10 92 89 00 	sts	0x0089, r1
    1256:	10 92 8a 00 	sts	0x008A, r1
    125a:	10 92 8b 00 	sts	0x008B, r1
    125e:	b7 cf       	rjmp	.-146    	; 0x11ce <main+0x44>

00001260 <ICU_SW>:


	}
}

void ICU_SW(void) {
    1260:	ef 92       	push	r14
    1262:	ff 92       	push	r15
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
	static u8 FSM_FLAG = 0; // State machine flag, initially zero
	FSM_FLAG++;
    1270:	80 91 8c 00 	lds	r24, 0x008C
    1274:	8f 5f       	subi	r24, 0xFF	; 255
    1276:	80 93 8c 00 	sts	0x008C, r24
	LCD_voidSendString("AHMED");
    127a:	86 e7       	ldi	r24, 0x76	; 118
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_voidSendString>
	if (FSM_FLAG == 1) {
    1282:	80 91 8c 00 	lds	r24, 0x008C
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	29 f4       	brne	.+10     	; 0x1294 <ICU_SW+0x34>
		Timer1_setTimerValue(0); // Start counting the period
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <Timer1_setTimerValue>
    1292:	49 c0       	rjmp	.+146    	; 0x1326 <ICU_SW+0xc6>
	}
	else if (FSM_FLAG == 2) {
    1294:	80 91 8c 00 	lds	r24, 0x008C
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	89 f4       	brne	.+34     	; 0x12be <ICU_SW+0x5e>
		PeriodTicks = Timer1_GetTimerReading(); // Record the period duration
    129c:	0e 94 2e 0a 	call	0x145c	; 0x145c <Timer1_GetTimerReading>
    12a0:	cc 01       	movw	r24, r24
    12a2:	a0 e0       	ldi	r26, 0x00	; 0
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	80 93 84 00 	sts	0x0084, r24
    12aa:	90 93 85 00 	sts	0x0085, r25
    12ae:	a0 93 86 00 	sts	0x0086, r26
    12b2:	b0 93 87 00 	sts	0x0087, r27

		INT0_settrigger(falling_edge); // Switch to falling edge detection
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	0e 94 bd 0a 	call	0x157a	; 0x157a <INT0_settrigger>
    12bc:	34 c0       	rjmp	.+104    	; 0x1326 <ICU_SW+0xc6>
	}
	else if (FSM_FLAG == 3) {
    12be:	80 91 8c 00 	lds	r24, 0x008C
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	81 f5       	brne	.+96     	; 0x1326 <ICU_SW+0xc6>
		ONTICKS = Timer1_GetTimerReading();
    12c6:	0e 94 2e 0a 	call	0x145c	; 0x145c <Timer1_GetTimerReading>
    12ca:	cc 01       	movw	r24, r24
    12cc:	a0 e0       	ldi	r26, 0x00	; 0
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	80 93 88 00 	sts	0x0088, r24
    12d4:	90 93 89 00 	sts	0x0089, r25
    12d8:	a0 93 8a 00 	sts	0x008A, r26
    12dc:	b0 93 8b 00 	sts	0x008B, r27
		// Record the on-time

		ONTICKS -= PeriodTicks; // Calculate the on-duration
    12e0:	20 91 88 00 	lds	r18, 0x0088
    12e4:	30 91 89 00 	lds	r19, 0x0089
    12e8:	40 91 8a 00 	lds	r20, 0x008A
    12ec:	50 91 8b 00 	lds	r21, 0x008B
    12f0:	80 91 84 00 	lds	r24, 0x0084
    12f4:	90 91 85 00 	lds	r25, 0x0085
    12f8:	a0 91 86 00 	lds	r26, 0x0086
    12fc:	b0 91 87 00 	lds	r27, 0x0087
    1300:	79 01       	movw	r14, r18
    1302:	8a 01       	movw	r16, r20
    1304:	e8 1a       	sub	r14, r24
    1306:	f9 0a       	sbc	r15, r25
    1308:	0a 0b       	sbc	r16, r26
    130a:	1b 0b       	sbc	r17, r27
    130c:	d8 01       	movw	r26, r16
    130e:	c7 01       	movw	r24, r14
    1310:	80 93 88 00 	sts	0x0088, r24
    1314:	90 93 89 00 	sts	0x0089, r25
    1318:	a0 93 8a 00 	sts	0x008A, r26
    131c:	b0 93 8b 00 	sts	0x008B, r27

		EXTI_DisableInterrupt(INT0); // Disable further interrupts
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <EXTI_DisableInterrupt>

	}
}
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	ff 90       	pop	r15
    1330:	ef 90       	pop	r14
    1332:	08 95       	ret

00001334 <TIMER0_voidInit>:

//Global Pointers to hold address of ISR of INT0
void (*EXTI_pvInt0) (void)=NULL;


void TIMER0_voidInit(void){
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62

	//Waveform Generation Mode
	Set_Bit(TCCR0,TCCR0_WGM00);
    133c:	a3 e5       	ldi	r26, 0x53	; 83
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e3 e5       	ldi	r30, 0x53	; 83
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	80 64       	ori	r24, 0x40	; 64
    1348:	8c 93       	st	X, r24
	Set_Bit(TCCR0,TCCR0_WGM01);
    134a:	a3 e5       	ldi	r26, 0x53	; 83
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e3 e5       	ldi	r30, 0x53	; 83
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	88 60       	ori	r24, 0x08	; 8
    1356:	8c 93       	st	X, r24

	//Slect Compare OutputMode (Non-inverted Mode)
	Set_Bit(TCCR0,TCCR0_COM01);
    1358:	a3 e5       	ldi	r26, 0x53	; 83
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e3 e5       	ldi	r30, 0x53	; 83
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	80 62       	ori	r24, 0x20	; 32
    1364:	8c 93       	st	X, r24
	Clr_Bit(TCCR0,TCCR0_COM00);
    1366:	a3 e5       	ldi	r26, 0x53	; 83
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e3 e5       	ldi	r30, 0x53	; 83
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8f 7e       	andi	r24, 0xEF	; 239
    1372:	8c 93       	st	X, r24


	// Prescalar :(Division by 8)
	Clr_Bit(TCCR0,TCCR0_CS02);
    1374:	a3 e5       	ldi	r26, 0x53	; 83
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e3 e5       	ldi	r30, 0x53	; 83
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	8b 7f       	andi	r24, 0xFB	; 251
    1380:	8c 93       	st	X, r24
	Set_Bit(TCCR0,TCCR0_CS01);
    1382:	a3 e5       	ldi	r26, 0x53	; 83
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e3 e5       	ldi	r30, 0x53	; 83
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	82 60       	ori	r24, 0x02	; 2
    138e:	8c 93       	st	X, r24
	Clr_Bit(TCCR0,TCCR0_CS00);
    1390:	a3 e5       	ldi	r26, 0x53	; 83
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e3 e5       	ldi	r30, 0x53	; 83
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	8e 7f       	andi	r24, 0xFE	; 254
    139c:	8c 93       	st	X, r24
	//Dutycycle=25%
	OCR0=64;
    139e:	ec e5       	ldi	r30, 0x5C	; 92
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 e4       	ldi	r24, 0x40	; 64
    13a4:	80 83       	st	Z, r24

}
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <TIMER1_voidInit>:


void TIMER1_voidInit(void){
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62

	//set Timer1 in Normal Mode and in ChannelA
	Clr_Bit(TCCR1A,TCCR1A_COM1A1);
    13b4:	af e4       	ldi	r26, 0x4F	; 79
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	ef e4       	ldi	r30, 0x4F	; 79
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8f 77       	andi	r24, 0x7F	; 127
    13c0:	8c 93       	st	X, r24
	Clr_Bit(TCCR1A,TCCR1A_COM1A0);
    13c2:	af e4       	ldi	r26, 0x4F	; 79
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ef e4       	ldi	r30, 0x4F	; 79
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8f 7b       	andi	r24, 0xBF	; 191
    13ce:	8c 93       	st	X, r24

	//Set Waveform Generation Mode

	Clr_Bit(TCCR1A,TCCR1A_WGM10);
    13d0:	af e4       	ldi	r26, 0x4F	; 79
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ef e4       	ldi	r30, 0x4F	; 79
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	8e 7f       	andi	r24, 0xFE	; 254
    13dc:	8c 93       	st	X, r24
	Clr_Bit(TCCR1A,TCCR1A_WGM11);
    13de:	af e4       	ldi	r26, 0x4F	; 79
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ef e4       	ldi	r30, 0x4F	; 79
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	8d 7f       	andi	r24, 0xFD	; 253
    13ea:	8c 93       	st	X, r24
	Clr_Bit(TCCR1B,TCCR1B_WGM12);
    13ec:	ae e4       	ldi	r26, 0x4E	; 78
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ee e4       	ldi	r30, 0x4E	; 78
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	87 7f       	andi	r24, 0xF7	; 247
    13f8:	8c 93       	st	X, r24
	Clr_Bit(TCCR1B,TCCR1B_WGM13);
    13fa:	ae e4       	ldi	r26, 0x4E	; 78
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	ee e4       	ldi	r30, 0x4E	; 78
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8f 7e       	andi	r24, 0xEF	; 239
    1406:	8c 93       	st	X, r24

	//Set Prescalar
	Clr_Bit(TCCR1B,TCCR1B_CS12);
    1408:	ae e4       	ldi	r26, 0x4E	; 78
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	ee e4       	ldi	r30, 0x4E	; 78
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	8b 7f       	andi	r24, 0xFB	; 251
    1414:	8c 93       	st	X, r24
	Set_Bit(TCCR1B,TCCR1B_CS11);
    1416:	ae e4       	ldi	r26, 0x4E	; 78
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	ee e4       	ldi	r30, 0x4E	; 78
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	82 60       	ori	r24, 0x02	; 2
    1422:	8c 93       	st	X, r24
	Clr_Bit(TCCR1B,TCCR1B_CS10);
    1424:	ae e4       	ldi	r26, 0x4E	; 78
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	ee e4       	ldi	r30, 0x4E	; 78
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	8e 7f       	andi	r24, 0xFE	; 254
    1430:	8c 93       	st	X, r24


}
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <Timer1_setTimerValue>:
void Timer1_setTimerValue(u16 Copy_u16value){
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	00 d0       	rcall	.+0      	; 0x143e <Timer1_setTimerValue+0x6>
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	9a 83       	std	Y+2, r25	; 0x02
    1444:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16value;
    1446:	ec e4       	ldi	r30, 0x4C	; 76
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	9a 81       	ldd	r25, Y+2	; 0x02
    144e:	91 83       	std	Z+1, r25	; 0x01
    1450:	80 83       	st	Z, r24
}
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <Timer1_GetTimerReading>:
u16  Timer1_GetTimerReading (void){
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    1464:	ec e4       	ldi	r30, 0x4C	; 76
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	91 81       	ldd	r25, Z+1	; 0x01
}
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <EXTI_voidInt0init>:

void EXTI_voidInt0init(u8 Copy_u8InterruptMode) {
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	00 d0       	rcall	.+0      	; 0x1478 <EXTI_voidInt0init+0x6>
    1478:	0f 92       	push	r0
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8InterruptMode) {
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	3b 83       	std	Y+3, r19	; 0x03
    1488:	2a 83       	std	Y+2, r18	; 0x02
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	9b 81       	ldd	r25, Y+3	; 0x03
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	91 05       	cpc	r25, r1
    1492:	61 f1       	breq	.+88     	; 0x14ec <EXTI_voidInt0init+0x7a>
    1494:	2a 81       	ldd	r18, Y+2	; 0x02
    1496:	3b 81       	ldd	r19, Y+3	; 0x03
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	2c f4       	brge	.+10     	; 0x14a8 <EXTI_voidInt0init+0x36>
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	9b 81       	ldd	r25, Y+3	; 0x03
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	69 f0       	breq	.+26     	; 0x14c0 <EXTI_voidInt0init+0x4e>
    14a6:	63 c0       	rjmp	.+198    	; 0x156e <EXTI_voidInt0init+0xfc>
    14a8:	2a 81       	ldd	r18, Y+2	; 0x02
    14aa:	3b 81       	ldd	r19, Y+3	; 0x03
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	99 f1       	breq	.+102    	; 0x1518 <EXTI_voidInt0init+0xa6>
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	9b 81       	ldd	r25, Y+3	; 0x03
    14b6:	83 30       	cpi	r24, 0x03	; 3
    14b8:	91 05       	cpc	r25, r1
    14ba:	09 f4       	brne	.+2      	; 0x14be <EXTI_voidInt0init+0x4c>
    14bc:	43 c0       	rjmp	.+134    	; 0x1544 <EXTI_voidInt0init+0xd2>
    14be:	57 c0       	rjmp	.+174    	; 0x156e <EXTI_voidInt0init+0xfc>
	case low_level : {
		// Set sense control to low level
		Clr_Bit(MCUCR, MCUCR_ISC01);
    14c0:	a5 e5       	ldi	r26, 0x55	; 85
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e5 e5       	ldi	r30, 0x55	; 85
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	8d 7f       	andi	r24, 0xFD	; 253
    14cc:	8c 93       	st	X, r24
		Clr_Bit(MCUCR, MCUCR_ISC00);
    14ce:	a5 e5       	ldi	r26, 0x55	; 85
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e5 e5       	ldi	r30, 0x55	; 85
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	8e 7f       	andi	r24, 0xFE	; 254
    14da:	8c 93       	st	X, r24

		// Set PIE for INT0
		Set_Bit(GICR, GICR_INT0);
    14dc:	ab e5       	ldi	r26, 0x5B	; 91
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	eb e5       	ldi	r30, 0x5B	; 91
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	80 64       	ori	r24, 0x40	; 64
    14e8:	8c 93       	st	X, r24
    14ea:	41 c0       	rjmp	.+130    	; 0x156e <EXTI_voidInt0init+0xfc>
		break;
	}

	case on_change: {
		// Set sense control to any logical change
		Clr_Bit(MCUCR, MCUCR_ISC01);
    14ec:	a5 e5       	ldi	r26, 0x55	; 85
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e5 e5       	ldi	r30, 0x55	; 85
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	8d 7f       	andi	r24, 0xFD	; 253
    14f8:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC00);
    14fa:	a5 e5       	ldi	r26, 0x55	; 85
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e5 e5       	ldi	r30, 0x55	; 85
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	81 60       	ori	r24, 0x01	; 1
    1506:	8c 93       	st	X, r24

		// Set PIE for INT0
		Set_Bit(GICR, GICR_INT0);
    1508:	ab e5       	ldi	r26, 0x5B	; 91
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	eb e5       	ldi	r30, 0x5B	; 91
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	80 64       	ori	r24, 0x40	; 64
    1514:	8c 93       	st	X, r24
    1516:	2b c0       	rjmp	.+86     	; 0x156e <EXTI_voidInt0init+0xfc>
		break;
	}

	case falling_edge: {
		// Set sense control to falling edge
		Set_Bit(MCUCR, MCUCR_ISC01);
    1518:	a5 e5       	ldi	r26, 0x55	; 85
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e5 e5       	ldi	r30, 0x55	; 85
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	82 60       	ori	r24, 0x02	; 2
    1524:	8c 93       	st	X, r24
		Clr_Bit(MCUCR, MCUCR_ISC00);
    1526:	a5 e5       	ldi	r26, 0x55	; 85
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e5 e5       	ldi	r30, 0x55	; 85
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	8e 7f       	andi	r24, 0xFE	; 254
    1532:	8c 93       	st	X, r24

		// Set PIE for INT0
		Set_Bit(GICR, GICR_INT0);
    1534:	ab e5       	ldi	r26, 0x5B	; 91
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	eb e5       	ldi	r30, 0x5B	; 91
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 64       	ori	r24, 0x40	; 64
    1540:	8c 93       	st	X, r24
    1542:	15 c0       	rjmp	.+42     	; 0x156e <EXTI_voidInt0init+0xfc>
		break;
	}

	case rising_edge: {
		// Set sense control to rising edge
		Set_Bit(MCUCR, MCUCR_ISC01);
    1544:	a5 e5       	ldi	r26, 0x55	; 85
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e5 e5       	ldi	r30, 0x55	; 85
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	82 60       	ori	r24, 0x02	; 2
    1550:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC00);
    1552:	a5 e5       	ldi	r26, 0x55	; 85
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e5 e5       	ldi	r30, 0x55	; 85
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	81 60       	ori	r24, 0x01	; 1
    155e:	8c 93       	st	X, r24

		// Set PIE for INT0
		Set_Bit(GICR, GICR_INT0);
    1560:	ab e5       	ldi	r26, 0x5B	; 91
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	eb e5       	ldi	r30, 0x5B	; 91
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 64       	ori	r24, 0x40	; 64
    156c:	8c 93       	st	X, r24
	default: {
		// Handle invalid interrupt mode if necessary
		break;
	}
	}
}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <INT0_settrigger>:



void INT0_settrigger(u8 Copy_u8edge){
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	0f 92       	push	r0
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8edge==falling_edge){
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	82 30       	cpi	r24, 0x02	; 2
    158a:	b1 f4       	brne	.+44     	; 0x15b8 <INT0_settrigger+0x3e>
		// Set sense control to falling edge
		Set_Bit(MCUCR, MCUCR_ISC01);
    158c:	a5 e5       	ldi	r26, 0x55	; 85
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e5 e5       	ldi	r30, 0x55	; 85
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	82 60       	ori	r24, 0x02	; 2
    1598:	8c 93       	st	X, r24
		Clr_Bit(MCUCR, MCUCR_ISC00);
    159a:	a5 e5       	ldi	r26, 0x55	; 85
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e5 e5       	ldi	r30, 0x55	; 85
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8e 7f       	andi	r24, 0xFE	; 254
    15a6:	8c 93       	st	X, r24

		// Set PIE for INT0
		Set_Bit(GICR, GICR_INT0);
    15a8:	ab e5       	ldi	r26, 0x5B	; 91
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	eb e5       	ldi	r30, 0x5B	; 91
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	80 64       	ori	r24, 0x40	; 64
    15b4:	8c 93       	st	X, r24
    15b6:	18 c0       	rjmp	.+48     	; 0x15e8 <INT0_settrigger+0x6e>
	}
	else if(Copy_u8edge==rising_edge){
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	83 30       	cpi	r24, 0x03	; 3
    15bc:	a9 f4       	brne	.+42     	; 0x15e8 <INT0_settrigger+0x6e>
		// Set sense control to rising edge
		Set_Bit(MCUCR, MCUCR_ISC01);
    15be:	a5 e5       	ldi	r26, 0x55	; 85
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e5 e5       	ldi	r30, 0x55	; 85
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	82 60       	ori	r24, 0x02	; 2
    15ca:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC00);
    15cc:	a5 e5       	ldi	r26, 0x55	; 85
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e5 e5       	ldi	r30, 0x55	; 85
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	81 60       	ori	r24, 0x01	; 1
    15d8:	8c 93       	st	X, r24

		// Set PIE for INT0
		Set_Bit(GICR, GICR_INT0);
    15da:	ab e5       	ldi	r26, 0x5B	; 91
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	eb e5       	ldi	r30, 0x5B	; 91
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	80 64       	ori	r24, 0x40	; 64
    15e6:	8c 93       	st	X, r24
	}

}
    15e8:	0f 90       	pop	r0
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <EXTI_DisableInterrupt>:
u8 EXTI_DisableInterrupt(u8 Copy_u8Interruptnumber){
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <EXTI_DisableInterrupt+0x6>
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=0;
    15fc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Interruptnumber==INT0){
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	88 23       	and	r24, r24
    1602:	41 f4       	brne	.+16     	; 0x1614 <EXTI_DisableInterrupt+0x24>
		Clr_Bit(GICR, GICR_INT0);
    1604:	ab e5       	ldi	r26, 0x5B	; 91
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	eb e5       	ldi	r30, 0x5B	; 91
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8f 7b       	andi	r24, 0xBF	; 191
    1610:	8c 93       	st	X, r24
    1612:	18 c0       	rjmp	.+48     	; 0x1644 <EXTI_DisableInterrupt+0x54>
	}
	else if(Copy_u8Interruptnumber==INT1){
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	41 f4       	brne	.+16     	; 0x162a <EXTI_DisableInterrupt+0x3a>
		Clr_Bit(GICR, GICR_INT1);
    161a:	ab e5       	ldi	r26, 0x5B	; 91
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	eb e5       	ldi	r30, 0x5B	; 91
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	8f 77       	andi	r24, 0x7F	; 127
    1626:	8c 93       	st	X, r24
    1628:	0d c0       	rjmp	.+26     	; 0x1644 <EXTI_DisableInterrupt+0x54>
	}
	else if(Copy_u8Interruptnumber==INT2){
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	82 30       	cpi	r24, 0x02	; 2
    162e:	41 f4       	brne	.+16     	; 0x1640 <EXTI_DisableInterrupt+0x50>
		Clr_Bit(GICR, GICR_INT2);
    1630:	ab e5       	ldi	r26, 0x5B	; 91
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	eb e5       	ldi	r30, 0x5B	; 91
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	8f 7d       	andi	r24, 0xDF	; 223
    163c:	8c 93       	st	X, r24
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <EXTI_DisableInterrupt+0x54>
	}
	else{
		 Local_u8ErrorStatus=1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorStatus;
    1644:	89 81       	ldd	r24, Y+1	; 0x01
}
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <EXTI_u8INT0SetCallBack>:

u8 EXTI_u8INT0SetCallBack(void (*Copy_pvINT0Func)(void)){
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <EXTI_u8INT0SetCallBack+0x6>
    1656:	0f 92       	push	r0
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	9b 83       	std	Y+3, r25	; 0x03
    165e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
    1660:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvINT0Func!=NULL){
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	9b 81       	ldd	r25, Y+3	; 0x03
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	39 f0       	breq	.+14     	; 0x1678 <EXTI_u8INT0SetCallBack+0x28>
		EXTI_pvInt0=Copy_pvINT0Func;
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	9b 81       	ldd	r25, Y+3	; 0x03
    166e:	90 93 8e 00 	sts	0x008E, r25
    1672:	80 93 8d 00 	sts	0x008D, r24
    1676:	02 c0       	rjmp	.+4      	; 0x167c <EXTI_u8INT0SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    167c:	89 81       	ldd	r24, Y+1	; 0x01
}
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <__vector_1>:




void __vector_1 (void) __attribute__((signal));
void __vector_1 (void){
    168a:	1f 92       	push	r1
    168c:	0f 92       	push	r0
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	0f 92       	push	r0
    1692:	11 24       	eor	r1, r1
    1694:	2f 93       	push	r18
    1696:	3f 93       	push	r19
    1698:	4f 93       	push	r20
    169a:	5f 93       	push	r21
    169c:	6f 93       	push	r22
    169e:	7f 93       	push	r23
    16a0:	8f 93       	push	r24
    16a2:	9f 93       	push	r25
    16a4:	af 93       	push	r26
    16a6:	bf 93       	push	r27
    16a8:	ef 93       	push	r30
    16aa:	ff 93       	push	r31
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvInt0(); //name of function is already pointer to function
    16b4:	e0 91 8d 00 	lds	r30, 0x008D
    16b8:	f0 91 8e 00 	lds	r31, 0x008E
    16bc:	09 95       	icall
}
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	ff 91       	pop	r31
    16c4:	ef 91       	pop	r30
    16c6:	bf 91       	pop	r27
    16c8:	af 91       	pop	r26
    16ca:	9f 91       	pop	r25
    16cc:	8f 91       	pop	r24
    16ce:	7f 91       	pop	r23
    16d0:	6f 91       	pop	r22
    16d2:	5f 91       	pop	r21
    16d4:	4f 91       	pop	r20
    16d6:	3f 91       	pop	r19
    16d8:	2f 91       	pop	r18
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	0f 90       	pop	r0
    16e0:	1f 90       	pop	r1
    16e2:	18 95       	reti

000016e4 <LCD_voidSendCommand>:
#include "LCD_private.h"
#include "GPIO_Interface.h"
#include <util/delay.h>

void LCD_voidSendCommand(u8 command)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	0f 92       	push	r0
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	89 83       	std	Y+1, r24	; 0x01
#if(LcdMode==8)
	//set the RS value as Low (command =>RS =  0 )
		DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_RsPin,DIO_u8PIN_LOW);
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_u8SetPinValue>
	//set the RW value as Low (Write  => RW = 0 )
		DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_RwPin, DIO_u8PIN_LOW);
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	61 e0       	ldi	r22, 0x01	; 1
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_u8SetPinValue>
	//set the E Value as High (High CLK)
		DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_EPin, DIO_u8PIN_HIGH);
    1704:	82 e0       	ldi	r24, 0x02	; 2
    1706:	62 e0       	ldi	r22, 0x02	; 2
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_u8SetPinValue>
	//Send Command
		DIO_u8SetPortValue(Lcd_DCGroup,command);
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	69 81       	ldd	r22, Y+1	; 0x01
    1712:	0e 94 28 08 	call	0x1050	; 0x1050 <DIO_u8SetPortValue>
	//Set the E value as Low (Low CLK)
		DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_EPin,DIO_u8PIN_LOW);
    1716:	82 e0       	ldi	r24, 0x02	; 2
    1718:	62 e0       	ldi	r22, 0x02	; 2
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Lcd_DCGroup,Lcd_D7,Get_Bit(command,7));
	//Set the E value as Low (Low CLK)
		DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_EPin,DIO_u8PIN_LOW);
#endif

}
    1720:	0f 90       	pop	r0
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <LCD_voidSendData>:

void LCD_voidSendData(u8 data)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	0f 92       	push	r0
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	89 83       	std	Y+1, r24	; 0x01
#if(LcdMode==8)
	//set the RS value as Low (Data =>RS =  1 )
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_RsPin,DIO_u8PIN_HIGH);
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	41 e0       	ldi	r20, 0x01	; 1
    173a:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_u8SetPinValue>
	//set the RW vlaue as Low (Write  => RW = 0 )
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_RwPin,DIO_u8PIN_LOW);
    173e:	82 e0       	ldi	r24, 0x02	; 2
    1740:	61 e0       	ldi	r22, 0x01	; 1
    1742:	40 e0       	ldi	r20, 0x00	; 0
    1744:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_u8SetPinValue>
	//set the E Value as High (High CLK)
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_EPin,DIO_u8PIN_HIGH);
    1748:	82 e0       	ldi	r24, 0x02	; 2
    174a:	62 e0       	ldi	r22, 0x02	; 2
    174c:	41 e0       	ldi	r20, 0x01	; 1
    174e:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_u8SetPinValue>
	//Send Data
		DIO_u8SetPortValue(Lcd_DCGroup,data);
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	69 81       	ldd	r22, Y+1	; 0x01
    1756:	0e 94 28 08 	call	0x1050	; 0x1050 <DIO_u8SetPortValue>
	//Set the E value as Low (Low CLK)
		DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_EPin,DIO_u8PIN_LOW);
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	62 e0       	ldi	r22, 0x02	; 2
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_u8SetPinValue>
	//Set the E value as Low (Low CLK)
		DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_EPin,DIO_u8PIN_LOW);

#endif

}
    1764:	0f 90       	pop	r0
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <LCD_voidInit>:


void LCD_voidInit()
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	e8 97       	sbiw	r28, 0x38	; 56
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
#if(LcdMode==8)
	//set Direction
	DIO_u8SetPinDirection(Lcd_ControlGroup,Lcd_RsPin,DIO_u8PIN_OUTPUT);
    1780:	82 e0       	ldi	r24, 0x02	; 2
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	41 e0       	ldi	r20, 0x01	; 1
    1786:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Lcd_ControlGroup,Lcd_RwPin,DIO_u8PIN_OUTPUT);
    178a:	82 e0       	ldi	r24, 0x02	; 2
    178c:	61 e0       	ldi	r22, 0x01	; 1
    178e:	41 e0       	ldi	r20, 0x01	; 1
    1790:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Lcd_ControlGroup,Lcd_EPin,DIO_u8PIN_OUTPUT);
    1794:	82 e0       	ldi	r24, 0x02	; 2
    1796:	62 e0       	ldi	r22, 0x02	; 2
    1798:	41 e0       	ldi	r20, 0x01	; 1
    179a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_u8SetPinDirection>
	DIO_u8SetPortDirection(Lcd_DCGroup,0xff);
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	6f ef       	ldi	r22, 0xFF	; 255
    17a2:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_u8SetPortDirection>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	ac e0       	ldi	r26, 0x0C	; 12
    17ac:	b2 e4       	ldi	r27, 0x42	; 66
    17ae:	8d ab       	std	Y+53, r24	; 0x35
    17b0:	9e ab       	std	Y+54, r25	; 0x36
    17b2:	af ab       	std	Y+55, r26	; 0x37
    17b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b6:	6d a9       	ldd	r22, Y+53	; 0x35
    17b8:	7e a9       	ldd	r23, Y+54	; 0x36
    17ba:	8f a9       	ldd	r24, Y+55	; 0x37
    17bc:	98 ad       	ldd	r25, Y+56	; 0x38
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	4a ef       	ldi	r20, 0xFA	; 250
    17c4:	54 e4       	ldi	r21, 0x44	; 68
    17c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	89 ab       	std	Y+49, r24	; 0x31
    17d0:	9a ab       	std	Y+50, r25	; 0x32
    17d2:	ab ab       	std	Y+51, r26	; 0x33
    17d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17d6:	69 a9       	ldd	r22, Y+49	; 0x31
    17d8:	7a a9       	ldd	r23, Y+50	; 0x32
    17da:	8b a9       	ldd	r24, Y+51	; 0x33
    17dc:	9c a9       	ldd	r25, Y+52	; 0x34
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <LCD_voidInit+0x8c>
		__ticks = 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	98 ab       	std	Y+48, r25	; 0x30
    17f4:	8f a7       	std	Y+47, r24	; 0x2f
    17f6:	3f c0       	rjmp	.+126    	; 0x1876 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    17f8:	69 a9       	ldd	r22, Y+49	; 0x31
    17fa:	7a a9       	ldd	r23, Y+50	; 0x32
    17fc:	8b a9       	ldd	r24, Y+51	; 0x33
    17fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	4f e7       	ldi	r20, 0x7F	; 127
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180c:	18 16       	cp	r1, r24
    180e:	4c f5       	brge	.+82     	; 0x1862 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1810:	6d a9       	ldd	r22, Y+53	; 0x35
    1812:	7e a9       	ldd	r23, Y+54	; 0x36
    1814:	8f a9       	ldd	r24, Y+55	; 0x37
    1816:	98 ad       	ldd	r25, Y+56	; 0x38
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e2       	ldi	r20, 0x20	; 32
    181e:	51 e4       	ldi	r21, 0x41	; 65
    1820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	98 ab       	std	Y+48, r25	; 0x30
    1836:	8f a7       	std	Y+47, r24	; 0x2f
    1838:	0f c0       	rjmp	.+30     	; 0x1858 <LCD_voidInit+0xec>
    183a:	88 ec       	ldi	r24, 0xC8	; 200
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9e a7       	std	Y+46, r25	; 0x2e
    1840:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1842:	8d a5       	ldd	r24, Y+45	; 0x2d
    1844:	9e a5       	ldd	r25, Y+46	; 0x2e
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <LCD_voidInit+0xda>
    184a:	9e a7       	std	Y+46, r25	; 0x2e
    184c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1850:	98 a9       	ldd	r25, Y+48	; 0x30
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	98 ab       	std	Y+48, r25	; 0x30
    1856:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1858:	8f a5       	ldd	r24, Y+47	; 0x2f
    185a:	98 a9       	ldd	r25, Y+48	; 0x30
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	69 f7       	brne	.-38     	; 0x183a <LCD_voidInit+0xce>
    1860:	14 c0       	rjmp	.+40     	; 0x188a <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1862:	69 a9       	ldd	r22, Y+49	; 0x31
    1864:	7a a9       	ldd	r23, Y+50	; 0x32
    1866:	8b a9       	ldd	r24, Y+51	; 0x33
    1868:	9c a9       	ldd	r25, Y+52	; 0x34
    186a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	98 ab       	std	Y+48, r25	; 0x30
    1874:	8f a7       	std	Y+47, r24	; 0x2f
    1876:	8f a5       	ldd	r24, Y+47	; 0x2f
    1878:	98 a9       	ldd	r25, Y+48	; 0x30
    187a:	9c a7       	std	Y+44, r25	; 0x2c
    187c:	8b a7       	std	Y+43, r24	; 0x2b
    187e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1880:	9c a5       	ldd	r25, Y+44	; 0x2c
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	f1 f7       	brne	.-4      	; 0x1882 <LCD_voidInit+0x116>
    1886:	9c a7       	std	Y+44, r25	; 0x2c
    1888:	8b a7       	std	Y+43, r24	; 0x2b
	//wait for 30ms
	_delay_ms(35);
	//sent the Function set
	LCD_voidSendCommand(LCD_Set8Bit2Line5x8);
    188a:	88 e3       	ldi	r24, 0x38	; 56
    188c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <LCD_voidSendCommand>
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	a0 e8       	ldi	r26, 0x80	; 128
    1896:	bf e3       	ldi	r27, 0x3F	; 63
    1898:	8f a3       	std	Y+39, r24	; 0x27
    189a:	98 a7       	std	Y+40, r25	; 0x28
    189c:	a9 a7       	std	Y+41, r26	; 0x29
    189e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a0:	6f a1       	ldd	r22, Y+39	; 0x27
    18a2:	78 a5       	ldd	r23, Y+40	; 0x28
    18a4:	89 a5       	ldd	r24, Y+41	; 0x29
    18a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	4a ef       	ldi	r20, 0xFA	; 250
    18ae:	54 e4       	ldi	r21, 0x44	; 68
    18b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	8b a3       	std	Y+35, r24	; 0x23
    18ba:	9c a3       	std	Y+36, r25	; 0x24
    18bc:	ad a3       	std	Y+37, r26	; 0x25
    18be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18c0:	6b a1       	ldd	r22, Y+35	; 0x23
    18c2:	7c a1       	ldd	r23, Y+36	; 0x24
    18c4:	8d a1       	ldd	r24, Y+37	; 0x25
    18c6:	9e a1       	ldd	r25, Y+38	; 0x26
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e8       	ldi	r20, 0x80	; 128
    18ce:	5f e3       	ldi	r21, 0x3F	; 63
    18d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d4:	88 23       	and	r24, r24
    18d6:	2c f4       	brge	.+10     	; 0x18e2 <LCD_voidInit+0x176>
		__ticks = 1;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9a a3       	std	Y+34, r25	; 0x22
    18de:	89 a3       	std	Y+33, r24	; 0x21
    18e0:	3f c0       	rjmp	.+126    	; 0x1960 <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    18e2:	6b a1       	ldd	r22, Y+35	; 0x23
    18e4:	7c a1       	ldd	r23, Y+36	; 0x24
    18e6:	8d a1       	ldd	r24, Y+37	; 0x25
    18e8:	9e a1       	ldd	r25, Y+38	; 0x26
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	3f ef       	ldi	r19, 0xFF	; 255
    18ee:	4f e7       	ldi	r20, 0x7F	; 127
    18f0:	57 e4       	ldi	r21, 0x47	; 71
    18f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18f6:	18 16       	cp	r1, r24
    18f8:	4c f5       	brge	.+82     	; 0x194c <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fa:	6f a1       	ldd	r22, Y+39	; 0x27
    18fc:	78 a5       	ldd	r23, Y+40	; 0x28
    18fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1900:	9a a5       	ldd	r25, Y+42	; 0x2a
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e2       	ldi	r20, 0x20	; 32
    1908:	51 e4       	ldi	r21, 0x41	; 65
    190a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	bc 01       	movw	r22, r24
    1914:	cd 01       	movw	r24, r26
    1916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	9a a3       	std	Y+34, r25	; 0x22
    1920:	89 a3       	std	Y+33, r24	; 0x21
    1922:	0f c0       	rjmp	.+30     	; 0x1942 <LCD_voidInit+0x1d6>
    1924:	88 ec       	ldi	r24, 0xC8	; 200
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	98 a3       	std	Y+32, r25	; 0x20
    192a:	8f 8f       	std	Y+31, r24	; 0x1f
    192c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    192e:	98 a1       	ldd	r25, Y+32	; 0x20
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	f1 f7       	brne	.-4      	; 0x1930 <LCD_voidInit+0x1c4>
    1934:	98 a3       	std	Y+32, r25	; 0x20
    1936:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1938:	89 a1       	ldd	r24, Y+33	; 0x21
    193a:	9a a1       	ldd	r25, Y+34	; 0x22
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	9a a3       	std	Y+34, r25	; 0x22
    1940:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1942:	89 a1       	ldd	r24, Y+33	; 0x21
    1944:	9a a1       	ldd	r25, Y+34	; 0x22
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	69 f7       	brne	.-38     	; 0x1924 <LCD_voidInit+0x1b8>
    194a:	14 c0       	rjmp	.+40     	; 0x1974 <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194c:	6b a1       	ldd	r22, Y+35	; 0x23
    194e:	7c a1       	ldd	r23, Y+36	; 0x24
    1950:	8d a1       	ldd	r24, Y+37	; 0x25
    1952:	9e a1       	ldd	r25, Y+38	; 0x26
    1954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	9a a3       	std	Y+34, r25	; 0x22
    195e:	89 a3       	std	Y+33, r24	; 0x21
    1960:	89 a1       	ldd	r24, Y+33	; 0x21
    1962:	9a a1       	ldd	r25, Y+34	; 0x22
    1964:	9e 8f       	std	Y+30, r25	; 0x1e
    1966:	8d 8f       	std	Y+29, r24	; 0x1d
    1968:	8d 8d       	ldd	r24, Y+29	; 0x1d
    196a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <LCD_voidInit+0x200>
    1970:	9e 8f       	std	Y+30, r25	; 0x1e
    1972:	8d 8f       	std	Y+29, r24	; 0x1d
	//wait for 39us
	_delay_ms(1);
	//sent the display
	LCD_voidSendCommand(LCD_8BitCursorBlinkON);
    1974:	8f e0       	ldi	r24, 0x0F	; 15
    1976:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <LCD_voidSendCommand>
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a0 e8       	ldi	r26, 0x80	; 128
    1980:	bf e3       	ldi	r27, 0x3F	; 63
    1982:	89 8f       	std	Y+25, r24	; 0x19
    1984:	9a 8f       	std	Y+26, r25	; 0x1a
    1986:	ab 8f       	std	Y+27, r26	; 0x1b
    1988:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198a:	69 8d       	ldd	r22, Y+25	; 0x19
    198c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    198e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1990:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	4a ef       	ldi	r20, 0xFA	; 250
    1998:	54 e4       	ldi	r21, 0x44	; 68
    199a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	8d 8b       	std	Y+21, r24	; 0x15
    19a4:	9e 8b       	std	Y+22, r25	; 0x16
    19a6:	af 8b       	std	Y+23, r26	; 0x17
    19a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19aa:	6d 89       	ldd	r22, Y+21	; 0x15
    19ac:	7e 89       	ldd	r23, Y+22	; 0x16
    19ae:	8f 89       	ldd	r24, Y+23	; 0x17
    19b0:	98 8d       	ldd	r25, Y+24	; 0x18
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e8       	ldi	r20, 0x80	; 128
    19b8:	5f e3       	ldi	r21, 0x3F	; 63
    19ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19be:	88 23       	and	r24, r24
    19c0:	2c f4       	brge	.+10     	; 0x19cc <LCD_voidInit+0x260>
		__ticks = 1;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	9c 8b       	std	Y+20, r25	; 0x14
    19c8:	8b 8b       	std	Y+19, r24	; 0x13
    19ca:	3f c0       	rjmp	.+126    	; 0x1a4a <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    19cc:	6d 89       	ldd	r22, Y+21	; 0x15
    19ce:	7e 89       	ldd	r23, Y+22	; 0x16
    19d0:	8f 89       	ldd	r24, Y+23	; 0x17
    19d2:	98 8d       	ldd	r25, Y+24	; 0x18
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	3f ef       	ldi	r19, 0xFF	; 255
    19d8:	4f e7       	ldi	r20, 0x7F	; 127
    19da:	57 e4       	ldi	r21, 0x47	; 71
    19dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e0:	18 16       	cp	r1, r24
    19e2:	4c f5       	brge	.+82     	; 0x1a36 <LCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e4:	69 8d       	ldd	r22, Y+25	; 0x19
    19e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e2       	ldi	r20, 0x20	; 32
    19f2:	51 e4       	ldi	r21, 0x41	; 65
    19f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	bc 01       	movw	r22, r24
    19fe:	cd 01       	movw	r24, r26
    1a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	9c 8b       	std	Y+20, r25	; 0x14
    1a0a:	8b 8b       	std	Y+19, r24	; 0x13
    1a0c:	0f c0       	rjmp	.+30     	; 0x1a2c <LCD_voidInit+0x2c0>
    1a0e:	88 ec       	ldi	r24, 0xC8	; 200
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	9a 8b       	std	Y+18, r25	; 0x12
    1a14:	89 8b       	std	Y+17, r24	; 0x11
    1a16:	89 89       	ldd	r24, Y+17	; 0x11
    1a18:	9a 89       	ldd	r25, Y+18	; 0x12
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <LCD_voidInit+0x2ae>
    1a1e:	9a 8b       	std	Y+18, r25	; 0x12
    1a20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a22:	8b 89       	ldd	r24, Y+19	; 0x13
    1a24:	9c 89       	ldd	r25, Y+20	; 0x14
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	9c 8b       	std	Y+20, r25	; 0x14
    1a2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	69 f7       	brne	.-38     	; 0x1a0e <LCD_voidInit+0x2a2>
    1a34:	14 c0       	rjmp	.+40     	; 0x1a5e <LCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a36:	6d 89       	ldd	r22, Y+21	; 0x15
    1a38:	7e 89       	ldd	r23, Y+22	; 0x16
    1a3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	9c 8b       	std	Y+20, r25	; 0x14
    1a48:	8b 8b       	std	Y+19, r24	; 0x13
    1a4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4e:	98 8b       	std	Y+16, r25	; 0x10
    1a50:	8f 87       	std	Y+15, r24	; 0x0f
    1a52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a54:	98 89       	ldd	r25, Y+16	; 0x10
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <LCD_voidInit+0x2ea>
    1a5a:	98 8b       	std	Y+16, r25	; 0x10
    1a5c:	8f 87       	std	Y+15, r24	; 0x0f
	//wait for 39us
	_delay_ms(1);
	//sent the Clear
	LCD_voidSendCommand(LCD_8BitClearDisplay);
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <LCD_voidSendCommand>
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a0 e0       	ldi	r26, 0x00	; 0
    1a6a:	b0 e4       	ldi	r27, 0x40	; 64
    1a6c:	8b 87       	std	Y+11, r24	; 0x0b
    1a6e:	9c 87       	std	Y+12, r25	; 0x0c
    1a70:	ad 87       	std	Y+13, r26	; 0x0d
    1a72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	4a ef       	ldi	r20, 0xFA	; 250
    1a82:	54 e4       	ldi	r21, 0x44	; 68
    1a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	8f 83       	std	Y+7, r24	; 0x07
    1a8e:	98 87       	std	Y+8, r25	; 0x08
    1a90:	a9 87       	std	Y+9, r26	; 0x09
    1a92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a94:	6f 81       	ldd	r22, Y+7	; 0x07
    1a96:	78 85       	ldd	r23, Y+8	; 0x08
    1a98:	89 85       	ldd	r24, Y+9	; 0x09
    1a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e8       	ldi	r20, 0x80	; 128
    1aa2:	5f e3       	ldi	r21, 0x3F	; 63
    1aa4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa8:	88 23       	and	r24, r24
    1aaa:	2c f4       	brge	.+10     	; 0x1ab6 <LCD_voidInit+0x34a>
		__ticks = 1;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9e 83       	std	Y+6, r25	; 0x06
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
    1ab4:	3f c0       	rjmp	.+126    	; 0x1b34 <LCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    1ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab8:	78 85       	ldd	r23, Y+8	; 0x08
    1aba:	89 85       	ldd	r24, Y+9	; 0x09
    1abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	3f ef       	ldi	r19, 0xFF	; 255
    1ac2:	4f e7       	ldi	r20, 0x7F	; 127
    1ac4:	57 e4       	ldi	r21, 0x47	; 71
    1ac6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aca:	18 16       	cp	r1, r24
    1acc:	4c f5       	brge	.+82     	; 0x1b20 <LCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ace:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e2       	ldi	r20, 0x20	; 32
    1adc:	51 e4       	ldi	r21, 0x41	; 65
    1ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	cd 01       	movw	r24, r26
    1aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	8d 83       	std	Y+5, r24	; 0x05
    1af6:	0f c0       	rjmp	.+30     	; 0x1b16 <LCD_voidInit+0x3aa>
    1af8:	88 ec       	ldi	r24, 0xC8	; 200
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	9c 83       	std	Y+4, r25	; 0x04
    1afe:	8b 83       	std	Y+3, r24	; 0x03
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <LCD_voidInit+0x398>
    1b08:	9c 83       	std	Y+4, r25	; 0x04
    1b0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	9e 83       	std	Y+6, r25	; 0x06
    1b14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b16:	8d 81       	ldd	r24, Y+5	; 0x05
    1b18:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	69 f7       	brne	.-38     	; 0x1af8 <LCD_voidInit+0x38c>
    1b1e:	14 c0       	rjmp	.+40     	; 0x1b48 <LCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b20:	6f 81       	ldd	r22, Y+7	; 0x07
    1b22:	78 85       	ldd	r23, Y+8	; 0x08
    1b24:	89 85       	ldd	r24, Y+9	; 0x09
    1b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	9e 83       	std	Y+6, r25	; 0x06
    1b32:	8d 83       	std	Y+5, r24	; 0x05
    1b34:	8d 81       	ldd	r24, Y+5	; 0x05
    1b36:	9e 81       	ldd	r25, Y+6	; 0x06
    1b38:	9a 83       	std	Y+2, r25	; 0x02
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <LCD_voidInit+0x3d4>
    1b44:	9a 83       	std	Y+2, r25	; 0x02
    1b46:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms
	_delay_ms(2);
	//sent the EntryMode
	LCD_voidSendCommand(LCD_8BitEntryMode1);
    1b48:	86 e0       	ldi	r24, 0x06	; 6
    1b4a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <LCD_voidSendCommand>
		_delay_ms(2);
		//sent the EntryMode
		LCD_voidSendCommand(first_command);
		LCD_voidSendCommand(LCD_4BitEntryMode1);
#endif
}
    1b4e:	e8 96       	adiw	r28, 0x38	; 56
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <LCD_voidSendString>:


void LCD_voidSendString(u8 String[])
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <LCD_voidSendString+0x6>
    1b66:	0f 92       	push	r0
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	9b 83       	std	Y+3, r25	; 0x03
    1b6e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0 ;
    1b70:	19 82       	std	Y+1, r1	; 0x01
    1b72:	0e c0       	rjmp	.+28     	; 0x1b90 <LCD_voidSendString+0x30>
	while(String[i]!='\0')
	{
		LCD_voidSendData(String[i]);
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7e:	fc 01       	movw	r30, r24
    1b80:	e2 0f       	add	r30, r18
    1b82:	f3 1f       	adc	r31, r19
    1b84:	80 81       	ld	r24, Z
    1b86:	0e 94 94 0b 	call	0x1728	; 0x1728 <LCD_voidSendData>
		i++;
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidSendString(u8 String[])
{
	u8 i = 0 ;
	while(String[i]!='\0')
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	e2 0f       	add	r30, r18
    1b9e:	f3 1f       	adc	r31, r19
    1ba0:	80 81       	ld	r24, Z
    1ba2:	88 23       	and	r24, r24
    1ba4:	39 f7       	brne	.-50     	; 0x1b74 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(String[i]);
		i++;
	}
}
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <LCD_voidSetPos>:


void LCD_voidSetPos(u8 x, u8 y)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <LCD_voidSetPos+0x6>
    1bb8:	0f 92       	push	r0
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	8a 83       	std	Y+2, r24	; 0x02
    1bc0:	6b 83       	std	Y+3, r22	; 0x03
	u8 adress;
	if (x==first_line_pos)
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	88 23       	and	r24, r24
    1bc6:	19 f4       	brne	.+6      	; 0x1bce <LCD_voidSetPos+0x1c>
	{
		adress=y+first_line_add;
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	06 c0       	rjmp	.+12     	; 0x1bda <LCD_voidSetPos+0x28>
	}
	else if (x==sec_line_pos)
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	81 30       	cpi	r24, 0x01	; 1
    1bd2:	19 f4       	brne	.+6      	; 0x1bda <LCD_voidSetPos+0x28>
	{
		adress=y+sec_line_add;
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	80 5c       	subi	r24, 0xC0	; 192
    1bd8:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_voidSendCommand(adress|LCD_SetAddressDDRAM);
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	80 68       	ori	r24, 0x80	; 128
    1bde:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <LCD_voidSendCommand>
}
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <LCD_voidSpecialCharacter>:

void LCD_voidSpecialCharacter (u8 block_no , u8 *special, u8 x, u8 y)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	27 97       	sbiw	r28, 0x07	; 7
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	8b 83       	std	Y+3, r24	; 0x03
    1c04:	7d 83       	std	Y+5, r23	; 0x05
    1c06:	6c 83       	std	Y+4, r22	; 0x04
    1c08:	4e 83       	std	Y+6, r20	; 0x06
    1c0a:	2f 83       	std	Y+7, r18	; 0x07
	u8 adress;
	u8 counter;
	adress = block_no*8;
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	88 2f       	mov	r24, r24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendCommand(adress|LCD_SetAddressCGRAM);
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	80 64       	ori	r24, 0x40	; 64
    1c24:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <LCD_voidSendCommand>
	for (counter=0; counter<8;counter++)
    1c28:	19 82       	std	Y+1, r1	; 0x01
    1c2a:	0e c0       	rjmp	.+28     	; 0x1c48 <LCD_voidSpecialCharacter+0x5a>
	{
		LCD_voidSendData(special[counter]);
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	8c 81       	ldd	r24, Y+4	; 0x04
    1c34:	9d 81       	ldd	r25, Y+5	; 0x05
    1c36:	fc 01       	movw	r30, r24
    1c38:	e2 0f       	add	r30, r18
    1c3a:	f3 1f       	adc	r31, r19
    1c3c:	80 81       	ld	r24, Z
    1c3e:	0e 94 94 0b 	call	0x1728	; 0x1728 <LCD_voidSendData>
{
	u8 adress;
	u8 counter;
	adress = block_no*8;
	LCD_voidSendCommand(adress|LCD_SetAddressCGRAM);
	for (counter=0; counter<8;counter++)
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	8f 5f       	subi	r24, 0xFF	; 255
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	88 30       	cpi	r24, 0x08	; 8
    1c4c:	78 f3       	brcs	.-34     	; 0x1c2c <LCD_voidSpecialCharacter+0x3e>
	{
		LCD_voidSendData(special[counter]);
	}
	//go back to DDRAM
	LCD_voidSetPos(x,y);
    1c4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c50:	6f 81       	ldd	r22, Y+7	; 0x07
    1c52:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_voidSetPos>
	LCD_voidSendData(block_no);
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	0e 94 94 0b 	call	0x1728	; 0x1728 <LCD_voidSendData>
}
    1c5c:	27 96       	adiw	r28, 0x07	; 7
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <LCD_voidClear>:

void LCD_voidClear()
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	2e 97       	sbiw	r28, 0x0e	; 14
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(LCD_8BitClearDisplay);
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <LCD_voidSendCommand>
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	a0 e0       	ldi	r26, 0x00	; 0
    1c8e:	b0 e4       	ldi	r27, 0x40	; 64
    1c90:	8b 87       	std	Y+11, r24	; 0x0b
    1c92:	9c 87       	std	Y+12, r25	; 0x0c
    1c94:	ad 87       	std	Y+13, r26	; 0x0d
    1c96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	4a ef       	ldi	r20, 0xFA	; 250
    1ca6:	54 e4       	ldi	r21, 0x44	; 68
    1ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	8f 83       	std	Y+7, r24	; 0x07
    1cb2:	98 87       	std	Y+8, r25	; 0x08
    1cb4:	a9 87       	std	Y+9, r26	; 0x09
    1cb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cba:	78 85       	ldd	r23, Y+8	; 0x08
    1cbc:	89 85       	ldd	r24, Y+9	; 0x09
    1cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e8       	ldi	r20, 0x80	; 128
    1cc6:	5f e3       	ldi	r21, 0x3F	; 63
    1cc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ccc:	88 23       	and	r24, r24
    1cce:	2c f4       	brge	.+10     	; 0x1cda <LCD_voidClear+0x6c>
		__ticks = 1;
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	9e 83       	std	Y+6, r25	; 0x06
    1cd6:	8d 83       	std	Y+5, r24	; 0x05
    1cd8:	3f c0       	rjmp	.+126    	; 0x1d58 <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    1cda:	6f 81       	ldd	r22, Y+7	; 0x07
    1cdc:	78 85       	ldd	r23, Y+8	; 0x08
    1cde:	89 85       	ldd	r24, Y+9	; 0x09
    1ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	3f ef       	ldi	r19, 0xFF	; 255
    1ce6:	4f e7       	ldi	r20, 0x7F	; 127
    1ce8:	57 e4       	ldi	r21, 0x47	; 71
    1cea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cee:	18 16       	cp	r1, r24
    1cf0:	4c f5       	brge	.+82     	; 0x1d44 <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e2       	ldi	r20, 0x20	; 32
    1d00:	51 e4       	ldi	r21, 0x41	; 65
    1d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	9e 83       	std	Y+6, r25	; 0x06
    1d18:	8d 83       	std	Y+5, r24	; 0x05
    1d1a:	0f c0       	rjmp	.+30     	; 0x1d3a <LCD_voidClear+0xcc>
    1d1c:	88 ec       	ldi	r24, 0xC8	; 200
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	9c 83       	std	Y+4, r25	; 0x04
    1d22:	8b 83       	std	Y+3, r24	; 0x03
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	9c 81       	ldd	r25, Y+4	; 0x04
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <LCD_voidClear+0xba>
    1d2c:	9c 83       	std	Y+4, r25	; 0x04
    1d2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d30:	8d 81       	ldd	r24, Y+5	; 0x05
    1d32:	9e 81       	ldd	r25, Y+6	; 0x06
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	9e 83       	std	Y+6, r25	; 0x06
    1d38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	69 f7       	brne	.-38     	; 0x1d1c <LCD_voidClear+0xae>
    1d42:	14 c0       	rjmp	.+40     	; 0x1d6c <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d44:	6f 81       	ldd	r22, Y+7	; 0x07
    1d46:	78 85       	ldd	r23, Y+8	; 0x08
    1d48:	89 85       	ldd	r24, Y+9	; 0x09
    1d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	9e 83       	std	Y+6, r25	; 0x06
    1d56:	8d 83       	std	Y+5, r24	; 0x05
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5c:	9a 83       	std	Y+2, r25	; 0x02
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	9a 81       	ldd	r25, Y+2	; 0x02
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <LCD_voidClear+0xf6>
    1d68:	9a 83       	std	Y+2, r25	; 0x02
    1d6a:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms
	_delay_ms(2);
}
    1d6c:	2e 96       	adiw	r28, 0x0e	; 14
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <LCD_voidSendNumber>:
void LCD_voidSendNumber(s32 num) {
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	a0 97       	sbiw	r28, 0x20	; 32
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
    1d96:	6d 8f       	std	Y+29, r22	; 0x1d
    1d98:	7e 8f       	std	Y+30, r23	; 0x1e
    1d9a:	8f 8f       	std	Y+31, r24	; 0x1f
    1d9c:	98 a3       	std	Y+32, r25	; 0x20
    s8 counter;
    u8 length = 0;
    1d9e:	1f 82       	std	Y+7, r1	; 0x07
    u8 StringStart = 0;
    1da0:	1e 82       	std	Y+6, r1	; 0x06
    u8 IsNegative = 0;
    1da2:	1d 82       	std	Y+5, r1	; 0x05
    u8 str[20];

    if (num < 0) {
    1da4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1da6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1da8:	af 8d       	ldd	r26, Y+31	; 0x1f
    1daa:	b8 a1       	ldd	r27, Y+32	; 0x20
    1dac:	bb 23       	and	r27, r27
    1dae:	c4 f4       	brge	.+48     	; 0x1de0 <LCD_voidSendNumber+0x62>
        num = -num;
    1db0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1db2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1db4:	af 8d       	ldd	r26, Y+31	; 0x1f
    1db6:	b8 a1       	ldd	r27, Y+32	; 0x20
    1db8:	b0 95       	com	r27
    1dba:	a0 95       	com	r26
    1dbc:	90 95       	com	r25
    1dbe:	81 95       	neg	r24
    1dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc2:	af 4f       	sbci	r26, 0xFF	; 255
    1dc4:	bf 4f       	sbci	r27, 0xFF	; 255
    1dc6:	8d 8f       	std	Y+29, r24	; 0x1d
    1dc8:	9e 8f       	std	Y+30, r25	; 0x1e
    1dca:	af 8f       	std	Y+31, r26	; 0x1f
    1dcc:	b8 a3       	std	Y+32, r27	; 0x20
        IsNegative = 1;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
        StringStart = 1;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	8e 83       	std	Y+6, r24	; 0x06
        str[0] = '-';
    1dd6:	8d e2       	ldi	r24, 0x2D	; 45
    1dd8:	89 87       	std	Y+9, r24	; 0x09
        length++;
    1dda:	8f 81       	ldd	r24, Y+7	; 0x07
    1ddc:	8f 5f       	subi	r24, 0xFF	; 255
    1dde:	8f 83       	std	Y+7, r24	; 0x07
    }

    u32 temp_num = num;
    1de0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1de2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1de4:	af 8d       	ldd	r26, Y+31	; 0x1f
    1de6:	b8 a1       	ldd	r27, Y+32	; 0x20
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	9a 83       	std	Y+2, r25	; 0x02
    1dec:	ab 83       	std	Y+3, r26	; 0x03
    1dee:	bc 83       	std	Y+4, r27	; 0x04
    do {
        temp_num /= 10;
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	9a 81       	ldd	r25, Y+2	; 0x02
    1df4:	ab 81       	ldd	r26, Y+3	; 0x03
    1df6:	bc 81       	ldd	r27, Y+4	; 0x04
    1df8:	2a e0       	ldi	r18, 0x0A	; 10
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	bc 01       	movw	r22, r24
    1e02:	cd 01       	movw	r24, r26
    1e04:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__udivmodsi4>
    1e08:	da 01       	movw	r26, r20
    1e0a:	c9 01       	movw	r24, r18
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	9a 83       	std	Y+2, r25	; 0x02
    1e10:	ab 83       	std	Y+3, r26	; 0x03
    1e12:	bc 83       	std	Y+4, r27	; 0x04
        length++;
    1e14:	8f 81       	ldd	r24, Y+7	; 0x07
    1e16:	8f 5f       	subi	r24, 0xFF	; 255
    1e18:	8f 83       	std	Y+7, r24	; 0x07
    } while (temp_num > 0);
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1e:	ab 81       	ldd	r26, Y+3	; 0x03
    1e20:	bc 81       	ldd	r27, Y+4	; 0x04
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	a1 05       	cpc	r26, r1
    1e26:	b1 05       	cpc	r27, r1
    1e28:	19 f7       	brne	.-58     	; 0x1df0 <LCD_voidSendNumber+0x72>

    for (counter = length - 1; counter >= StringStart; counter--) {
    1e2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e2c:	81 50       	subi	r24, 0x01	; 1
    1e2e:	88 87       	std	Y+8, r24	; 0x08
    1e30:	30 c0       	rjmp	.+96     	; 0x1e92 <LCD_voidSendNumber+0x114>
        str[counter] = num % 10 + '0';
    1e32:	88 85       	ldd	r24, Y+8	; 0x08
    1e34:	08 2f       	mov	r16, r24
    1e36:	11 27       	eor	r17, r17
    1e38:	07 fd       	sbrc	r16, 7
    1e3a:	10 95       	com	r17
    1e3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e40:	af 8d       	ldd	r26, Y+31	; 0x1f
    1e42:	b8 a1       	ldd	r27, Y+32	; 0x20
    1e44:	2a e0       	ldi	r18, 0x0A	; 10
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	cd 01       	movw	r24, r26
    1e50:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__divmodsi4>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	28 2f       	mov	r18, r24
    1e5a:	20 5d       	subi	r18, 0xD0	; 208
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	09 96       	adiw	r24, 0x09	; 9
    1e60:	fc 01       	movw	r30, r24
    1e62:	e0 0f       	add	r30, r16
    1e64:	f1 1f       	adc	r31, r17
    1e66:	20 83       	st	Z, r18
        num /= 10;
    1e68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e6c:	af 8d       	ldd	r26, Y+31	; 0x1f
    1e6e:	b8 a1       	ldd	r27, Y+32	; 0x20
    1e70:	2a e0       	ldi	r18, 0x0A	; 10
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__divmodsi4>
    1e80:	da 01       	movw	r26, r20
    1e82:	c9 01       	movw	r24, r18
    1e84:	8d 8f       	std	Y+29, r24	; 0x1d
    1e86:	9e 8f       	std	Y+30, r25	; 0x1e
    1e88:	af 8f       	std	Y+31, r26	; 0x1f
    1e8a:	b8 a3       	std	Y+32, r27	; 0x20
    do {
        temp_num /= 10;
        length++;
    } while (temp_num > 0);

    for (counter = length - 1; counter >= StringStart; counter--) {
    1e8c:	88 85       	ldd	r24, Y+8	; 0x08
    1e8e:	81 50       	subi	r24, 0x01	; 1
    1e90:	88 87       	std	Y+8, r24	; 0x08
    1e92:	88 85       	ldd	r24, Y+8	; 0x08
    1e94:	28 2f       	mov	r18, r24
    1e96:	33 27       	eor	r19, r19
    1e98:	27 fd       	sbrc	r18, 7
    1e9a:	30 95       	com	r19
    1e9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9e:	88 2f       	mov	r24, r24
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	28 17       	cp	r18, r24
    1ea4:	39 07       	cpc	r19, r25
    1ea6:	2c f6       	brge	.-118    	; 0x1e32 <LCD_voidSendNumber+0xb4>
        str[counter] = num % 10 + '0';
        num /= 10;
    }
    str[length] = '\0';
    1ea8:	8f 81       	ldd	r24, Y+7	; 0x07
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	ce 01       	movw	r24, r28
    1eb0:	09 96       	adiw	r24, 0x09	; 9
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	e2 0f       	add	r30, r18
    1eb6:	f3 1f       	adc	r31, r19
    1eb8:	10 82       	st	Z, r1
    LCD_voidSendString(str);
    1eba:	ce 01       	movw	r24, r28
    1ebc:	09 96       	adiw	r24, 0x09	; 9
    1ebe:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_voidSendString>
}
    1ec2:	a0 96       	adiw	r28, 0x20	; 32
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	08 95       	ret

00001ed8 <__udivmodsi4>:
    1ed8:	a1 e2       	ldi	r26, 0x21	; 33
    1eda:	1a 2e       	mov	r1, r26
    1edc:	aa 1b       	sub	r26, r26
    1ede:	bb 1b       	sub	r27, r27
    1ee0:	fd 01       	movw	r30, r26
    1ee2:	0d c0       	rjmp	.+26     	; 0x1efe <__udivmodsi4_ep>

00001ee4 <__udivmodsi4_loop>:
    1ee4:	aa 1f       	adc	r26, r26
    1ee6:	bb 1f       	adc	r27, r27
    1ee8:	ee 1f       	adc	r30, r30
    1eea:	ff 1f       	adc	r31, r31
    1eec:	a2 17       	cp	r26, r18
    1eee:	b3 07       	cpc	r27, r19
    1ef0:	e4 07       	cpc	r30, r20
    1ef2:	f5 07       	cpc	r31, r21
    1ef4:	20 f0       	brcs	.+8      	; 0x1efe <__udivmodsi4_ep>
    1ef6:	a2 1b       	sub	r26, r18
    1ef8:	b3 0b       	sbc	r27, r19
    1efa:	e4 0b       	sbc	r30, r20
    1efc:	f5 0b       	sbc	r31, r21

00001efe <__udivmodsi4_ep>:
    1efe:	66 1f       	adc	r22, r22
    1f00:	77 1f       	adc	r23, r23
    1f02:	88 1f       	adc	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	1a 94       	dec	r1
    1f08:	69 f7       	brne	.-38     	; 0x1ee4 <__udivmodsi4_loop>
    1f0a:	60 95       	com	r22
    1f0c:	70 95       	com	r23
    1f0e:	80 95       	com	r24
    1f10:	90 95       	com	r25
    1f12:	9b 01       	movw	r18, r22
    1f14:	ac 01       	movw	r20, r24
    1f16:	bd 01       	movw	r22, r26
    1f18:	cf 01       	movw	r24, r30
    1f1a:	08 95       	ret

00001f1c <__divmodsi4>:
    1f1c:	97 fb       	bst	r25, 7
    1f1e:	09 2e       	mov	r0, r25
    1f20:	05 26       	eor	r0, r21
    1f22:	0e d0       	rcall	.+28     	; 0x1f40 <__divmodsi4_neg1>
    1f24:	57 fd       	sbrc	r21, 7
    1f26:	04 d0       	rcall	.+8      	; 0x1f30 <__divmodsi4_neg2>
    1f28:	d7 df       	rcall	.-82     	; 0x1ed8 <__udivmodsi4>
    1f2a:	0a d0       	rcall	.+20     	; 0x1f40 <__divmodsi4_neg1>
    1f2c:	00 1c       	adc	r0, r0
    1f2e:	38 f4       	brcc	.+14     	; 0x1f3e <__divmodsi4_exit>

00001f30 <__divmodsi4_neg2>:
    1f30:	50 95       	com	r21
    1f32:	40 95       	com	r20
    1f34:	30 95       	com	r19
    1f36:	21 95       	neg	r18
    1f38:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3a:	4f 4f       	sbci	r20, 0xFF	; 255
    1f3c:	5f 4f       	sbci	r21, 0xFF	; 255

00001f3e <__divmodsi4_exit>:
    1f3e:	08 95       	ret

00001f40 <__divmodsi4_neg1>:
    1f40:	f6 f7       	brtc	.-4      	; 0x1f3e <__divmodsi4_exit>
    1f42:	90 95       	com	r25
    1f44:	80 95       	com	r24
    1f46:	70 95       	com	r23
    1f48:	61 95       	neg	r22
    1f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f50:	08 95       	ret

00001f52 <__prologue_saves__>:
    1f52:	2f 92       	push	r2
    1f54:	3f 92       	push	r3
    1f56:	4f 92       	push	r4
    1f58:	5f 92       	push	r5
    1f5a:	6f 92       	push	r6
    1f5c:	7f 92       	push	r7
    1f5e:	8f 92       	push	r8
    1f60:	9f 92       	push	r9
    1f62:	af 92       	push	r10
    1f64:	bf 92       	push	r11
    1f66:	cf 92       	push	r12
    1f68:	df 92       	push	r13
    1f6a:	ef 92       	push	r14
    1f6c:	ff 92       	push	r15
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	ca 1b       	sub	r28, r26
    1f7c:	db 0b       	sbc	r29, r27
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	09 94       	ijmp

00001f8a <__epilogue_restores__>:
    1f8a:	2a 88       	ldd	r2, Y+18	; 0x12
    1f8c:	39 88       	ldd	r3, Y+17	; 0x11
    1f8e:	48 88       	ldd	r4, Y+16	; 0x10
    1f90:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f92:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f94:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f96:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f98:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f9c:	b9 84       	ldd	r11, Y+9	; 0x09
    1f9e:	c8 84       	ldd	r12, Y+8	; 0x08
    1fa0:	df 80       	ldd	r13, Y+7	; 0x07
    1fa2:	ee 80       	ldd	r14, Y+6	; 0x06
    1fa4:	fd 80       	ldd	r15, Y+5	; 0x05
    1fa6:	0c 81       	ldd	r16, Y+4	; 0x04
    1fa8:	1b 81       	ldd	r17, Y+3	; 0x03
    1faa:	aa 81       	ldd	r26, Y+2	; 0x02
    1fac:	b9 81       	ldd	r27, Y+1	; 0x01
    1fae:	ce 0f       	add	r28, r30
    1fb0:	d1 1d       	adc	r29, r1
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	ed 01       	movw	r28, r26
    1fbe:	08 95       	ret

00001fc0 <_exit>:
    1fc0:	f8 94       	cli

00001fc2 <__stop_program>:
    1fc2:	ff cf       	rjmp	.-2      	; 0x1fc2 <__stop_program>
